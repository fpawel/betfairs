// Code generated by github.com/gobuffalo/packr. DO NOT EDIT

package main

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "bundle.js", "\"LyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykgewovKioqKioqLyAJCWlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiAxOiBub2RlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0Ci8qKioqKiovIAkvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2Ygbm9kZSBpbnRvIHRoZSBucwovKioqKioqLyAJLy8gbW9kZSAmIDQ6IHJldHVybiBub2RlIHdoZW4gYWxyZWFkeSBucyBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7Ci8qKioqKiovIAkJaWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTsKLyoqKioqKi8gCQlpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlOwovKioqKioqLyAJCXZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTsKLyoqKioqKi8gCQlPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpOwovKioqKioqLyAJCXJldHVybiBuczsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7Ci8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwovKioqKioqLyAJCXJldHVybiBnZXR0ZXI7Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07Ci8qKioqKiovCi8qKioqKiovIAkvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7Ci8qKioqKiovCi8qKioqKiovCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9ICIuL3NyYy9pbmRleC50c3giKTsKLyoqKioqKi8gfSkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gKHsKCi8qKiovICIuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOy8qIQogIENvcHlyaWdodCAoYykgMjAxNiBKZWQgV2F0c29uLgogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZSAoTUlUKSwgc2VlCiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lcwoqLwovKiBnbG9iYWwgZGVmaW5lICovCgooZnVuY3Rpb24gKCkgewoJJ3VzZSBzdHJpY3QnOwoKCXZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTsKCglmdW5jdGlvbiBjbGFzc05hbWVzICgpIHsKCQl2YXIgY2xhc3NlcyA9IFtdOwoKCQlmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewoJCQl2YXIgYXJnID0gYXJndW1lbnRzW2ldOwoJCQlpZiAoIWFyZykgY29udGludWU7CgoJCQl2YXIgYXJnVHlwZSA9IHR5cGVvZiBhcmc7CgoJCQlpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHsKCQkJCWNsYXNzZXMucHVzaChhcmcpOwoJCQl9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkgewoJCQkJY2xhc3Nlcy5wdXNoKGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKSk7CgkJCX0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ29iamVjdCcpIHsKCQkJCWZvciAodmFyIGtleSBpbiBhcmcpIHsKCQkJCQlpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7CgkJCQkJCWNsYXNzZXMucHVzaChrZXkpOwoJCQkJCX0KCQkJCX0KCQkJfQoJCX0KCgkJcmV0dXJuIGNsYXNzZXMuam9pbignICcpOwoJfQoKCWlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykgewoJCW1vZHVsZS5leHBvcnRzID0gY2xhc3NOYW1lczsKCX0gZWxzZSBpZiAodHJ1ZSkgewoJCS8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWUKCQkhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAoZnVuY3Rpb24gKCkgewoJCQlyZXR1cm4gY2xhc3NOYW1lczsKCQl9KS5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSwKCQkJCV9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsKCX0gZWxzZSB7fQp9KCkpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zcmMvY29tcG9uZW50cy9jdXN0b20tc3R5bGluZy5jc3MiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9jdXN0b20tc3R5bGluZy5jc3MgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgpleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMgKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIikoZmFsc2UpOwovLyBpbXBvcnRzCgoKLy8gbW9kdWxlCmV4cG9ydHMucHVzaChbbW9kdWxlLmksICIuY3VzdG9tLW92ZXJsYXkge1xyXG4gICAgYmFja2dyb3VuZDogcmdiYSgzNiwgMTIzLCAxNjAsIDAuNyk7XHJcbn1cclxuLmN1c3RvbS1tb2RhbCB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjYjJkYmJmO1xyXG4gICAgbWF4LXdpZHRoOiA1MDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59IiwgIiJdKTsKCi8vIGV4cG9ydHMKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCi8qCglNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAoJQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYQoqLwovLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlcgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkgewoJdmFyIGxpc3QgPSBbXTsKCgkvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nCglsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7CgkJcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CgkJCXZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApOwoJCQlpZihpdGVtWzJdKSB7CgkJCQlyZXR1cm4gIkBtZWRpYSAiICsgaXRlbVsyXSArICJ7IiArIGNvbnRlbnQgKyAifSI7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gY29udGVudDsKCQkJfQoJCX0pLmpvaW4oIiIpOwoJfTsKCgkvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdAoJbGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkgewoJCWlmKHR5cGVvZiBtb2R1bGVzID09PSAic3RyaW5nIikKCQkJbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgIiJdXTsKCQl2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9OwoJCWZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CgkJCXZhciBpZCA9IHRoaXNbaV1bMF07CgkJCWlmKHR5cGVvZiBpZCA9PT0gIm51bWJlciIpCgkJCQlhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7CgkJfQoJCWZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHsKCQkJdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOwoJCQkvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlCgkJCS8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zCgkJCS8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuCgkJCS8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpCgkJCWlmKHR5cGVvZiBpdGVtWzBdICE9PSAibnVtYmVyIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkgewoJCQkJaWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkgewoJCQkJCWl0ZW1bMl0gPSBtZWRpYVF1ZXJ5OwoJCQkJfSBlbHNlIGlmKG1lZGlhUXVlcnkpIHsKCQkJCQlpdGVtWzJdID0gIigiICsgaXRlbVsyXSArICIpIGFuZCAoIiArIG1lZGlhUXVlcnkgKyAiKSI7CgkJCQl9CgkJCQlsaXN0LnB1c2goaXRlbSk7CgkJCX0KCQl9Cgl9OwoJcmV0dXJuIGxpc3Q7Cn07CgpmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkgewoJdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOwoJdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdOwoJaWYgKCFjc3NNYXBwaW5nKSB7CgkJcmV0dXJuIGNvbnRlbnQ7Cgl9CgoJaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykgewoJCXZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpOwoJCXZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7CgkJCXJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLycKCQl9KTsKCgkJcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXG4nKTsKCX0KCglyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xuJyk7Cn0KCi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVCkKZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkgewoJLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCgl2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTsKCXZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7CgoJcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJzsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gYWRkQ2xhc3M7Cgp2YXIgX2hhc0NsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9oYXNDbGFzcyAqLyAiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMiKTsKCnZhciBfaGFzQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkgewogIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7ZWxzZSBpZiAoISgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGVsZW1lbnQsIGNsYXNzTmFtZSkpIGlmICh0eXBlb2YgZWxlbWVudC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lICsgJyAnICsgY2xhc3NOYW1lO2Vsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmJhc2VWYWwgfHwgJycpICsgJyAnICsgY2xhc3NOYW1lKTsKfQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2hhc0NsYXNzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvaGFzQ2xhc3MuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7CmZ1bmN0aW9uIGhhc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkgewogIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgcmV0dXJuICEhY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7ZWxzZSByZXR1cm4gKCIgIiArIChlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8IGVsZW1lbnQuY2xhc3NOYW1lKSArICIgIikuaW5kZXhPZigiICIgKyBjbGFzc05hbWUgKyAiICIpICE9PSAtMTsKfQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL3JlbW92ZUNsYXNzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCmZ1bmN0aW9uIHJlcGxhY2VDbGFzc05hbWUob3JpZ0NsYXNzLCBjbGFzc1RvUmVtb3ZlKSB7CiAgcmV0dXJuIG9yaWdDbGFzcy5yZXBsYWNlKG5ldyBSZWdFeHAoJyhefFxccyknICsgY2xhc3NUb1JlbW92ZSArICcoPzpcXHN8JCknLCAnZycpLCAnJDEnKS5yZXBsYWNlKC9ccysvZywgJyAnKS5yZXBsYWNlKC9eXHMqfFxzKiQvZywgJycpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSkgewogIGlmIChlbGVtZW50LmNsYXNzTGlzdCkgZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7ZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQuY2xhc3NOYW1lID09PSAnc3RyaW5nJykgZWxlbWVudC5jbGFzc05hbWUgPSByZXBsYWNlQ2xhc3NOYW1lKGVsZW1lbnQuY2xhc3NOYW1lLCBjbGFzc05hbWUpO2Vsc2UgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgcmVwbGFjZUNsYXNzTmFtZShlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5iYXNlVmFsIHx8ICcnLCBjbGFzc05hbWUpKTsKfTsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKLyoqCiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogKgogKiAKICovCgpmdW5jdGlvbiBtYWtlRW1wdHlGdW5jdGlvbihhcmcpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGFyZzsKICB9Owp9CgovKioKICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXMKICogcHJpbWFyaWx5IHVzZWZ1bCBpZGlvbWF0aWNhbGx5IGZvciBvdmVycmlkYWJsZSBmdW5jdGlvbiBlbmRwb2ludHMgd2hpY2gKICogYWx3YXlzIG5lZWQgdG8gYmUgY2FsbGFibGUsIHNpbmNlIEpTIGxhY2tzIGEgbnVsbC1jYWxsIGlkaW9tIGFsYSBDb2NvYS4KICovCnZhciBlbXB0eUZ1bmN0aW9uID0gZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9OwoKZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uOwplbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2UgPSBtYWtlRW1wdHlGdW5jdGlvbihmYWxzZSk7CmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUcnVlID0gbWFrZUVtcHR5RnVuY3Rpb24odHJ1ZSk7CmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7CmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNUaGlzID0gZnVuY3Rpb24gKCkgewogIHJldHVybiB0aGlzOwp9OwplbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQgPSBmdW5jdGlvbiAoYXJnKSB7CiAgcmV0dXJuIGFyZzsKfTsKCm1vZHVsZS5leHBvcnRzID0gZW1wdHlGdW5jdGlvbjsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKLyoqCiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogKgogKi8KCgoKLyoqCiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS4KICoKICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHMKICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlCiAqIGV4cGVjdGluZy4KICoKICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnQKICogd2lsbCByZW1haW4gdG8gZW5zdXJlIGxvZ2ljIGRvZXMgbm90IGRpZmZlciBpbiBwcm9kdWN0aW9uLgogKi8KCnZhciB2YWxpZGF0ZUZvcm1hdCA9IGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCkge307CgppZiAodHJ1ZSkgewogIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7CiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpOwogICAgfQogIH07Cn0KCmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikgewogIHZhbGlkYXRlRm9ybWF0KGZvcm1hdCk7CgogIGlmICghY29uZGl0aW9uKSB7CiAgICB2YXIgZXJyb3I7CiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHsKICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdOwogICAgICB2YXIgYXJnSW5kZXggPSAwOwogICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdOwogICAgICB9KSk7CiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7CiAgICB9CgogICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZQogICAgdGhyb3cgZXJyb3I7CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3dhcm5pbmcuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2ZianMvbGliL3dhcm5pbmcuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Ci8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4KICoKICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICoKICovCgoKCnZhciBlbXB0eUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9lbXB0eUZ1bmN0aW9uICovICIuL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9lbXB0eUZ1bmN0aW9uLmpzIik7CgovKioKICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LgogKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsCiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlCiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLgogKi8KCnZhciB3YXJuaW5nID0gZW1wdHlGdW5jdGlvbjsKCmlmICh0cnVlKSB7CiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQpIHsKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICB2YXIgYXJnSW5kZXggPSAwOwogICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdOwogICAgfSk7CiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7CiAgICB9CiAgICB0cnkgewogICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tCiAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFjawogICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS4KICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpOwogICAgfSBjYXRjaCAoeCkge30KICB9OwoKICB3YXJuaW5nID0gZnVuY3Rpb24gd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCkgewogICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7CiAgICB9CgogICAgaWYgKGZvcm1hdC5pbmRleE9mKCdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAnKSA9PT0gMCkgewogICAgICByZXR1cm47IC8vIElnbm9yZSBDb21wb3NpdGVDb21wb25lbnQgcHJvcHR5cGUgY2hlY2suCiAgICB9CgogICAgaWYgKCFjb25kaXRpb24pIHsKICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIgPiAyID8gX2xlbjIgLSAyIDogMCksIF9rZXkyID0gMjsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgIGFyZ3NbX2tleTIgLSAyXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICAgIH0KCiAgICAgIHByaW50V2FybmluZy5hcHBseSh1bmRlZmluZWQsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7CiAgICB9CiAgfTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nOwoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvbm8tc2Nyb2xsL2luZGV4LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL25vLXNjcm9sbC9pbmRleC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKKGZ1bmN0aW9uKHJvb3QpIHsKICB2YXIgaXNPbiA9IGZhbHNlOwogIHZhciBzY3JvbGxiYXJTaXplOwogIHZhciBzY3JvbGxUb3A7CgogIGZ1bmN0aW9uIGdldFNjcm9sbGJhclNpemUoKSB7CiAgICBpZiAodHlwZW9mIHNjcm9sbGJhclNpemUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gc2Nyb2xsYmFyU2l6ZTsKCiAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgdmFyIGR1bW15U2Nyb2xsZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgIGR1bW15U2Nyb2xsZXIuc2V0QXR0cmlidXRlKCdzdHlsZScsICd3aWR0aDo5OXB4O2hlaWdodDo5OXB4OycgKyAncG9zaXRpb246YWJzb2x1dGU7dG9wOi05OTk5cHg7b3ZlcmZsb3c6c2Nyb2xsOycpOwogICAgZG9jLmFwcGVuZENoaWxkKGR1bW15U2Nyb2xsZXIpOwogICAgc2Nyb2xsYmFyU2l6ZSA9IGR1bW15U2Nyb2xsZXIub2Zmc2V0V2lkdGggLSBkdW1teVNjcm9sbGVyLmNsaWVudFdpZHRoOwogICAgZG9jLnJlbW92ZUNoaWxkKGR1bW15U2Nyb2xsZXIpOwogICAgcmV0dXJuIHNjcm9sbGJhclNpemU7CiAgfQoKICBmdW5jdGlvbiBoYXNTY3JvbGxiYXIoKSB7CiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodDsKICB9CgogIGZ1bmN0aW9uIG9uKG9wdGlvbnMpIHsKICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8IGlzT24pIHJldHVybjsKICAgIHZhciBkb2MgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CiAgICBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7CiAgICBpZiAoaGFzU2Nyb2xsYmFyKCkpIHsKICAgICAgZG9jLnN0eWxlLndpZHRoID0gJ2NhbGMoMTAwJSAtICcrIGdldFNjcm9sbGJhclNpemUoKSArJ3B4KSc7CiAgICB9IGVsc2UgewogICAgICBkb2Muc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICB9CiAgICBkb2Muc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwogICAgZG9jLnN0eWxlLnRvcCA9IC1zY3JvbGxUb3AgKyAncHgnOwogICAgZG9jLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7CiAgICBpc09uID0gdHJ1ZTsKICB9CgogIGZ1bmN0aW9uIG9mZigpIHsKICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnIHx8ICFpc09uKSByZXR1cm47CiAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OwogICAgZG9jLnN0eWxlLndpZHRoID0gJyc7CiAgICBkb2Muc3R5bGUucG9zaXRpb24gPSAnJzsKICAgIGRvYy5zdHlsZS50b3AgPSAnJzsKICAgIGRvYy5zdHlsZS5vdmVyZmxvdyA9ICcnOwogICAgd2luZG93LnNjcm9sbCgwLCBzY3JvbGxUb3ApOwogICAgaXNPbiA9IGZhbHNlOwogIH0KCiAgZnVuY3Rpb24gdG9nZ2xlKCkgewogICAgaWYgKGlzT24pIHsKICAgICAgb2ZmKCk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG9uKCk7CiAgfQoKICB2YXIgbm9TY3JvbGwgPSB7CiAgICBvbjogb24sCiAgICBvZmY6IG9mZiwKICAgIHRvZ2dsZTogdG9nZ2xlLAogIH07CgogIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IG5vU2Nyb2xsOwogIH0gZWxzZSB7CiAgICByb290Lm5vU2Nyb2xsID0gbm9TY3JvbGw7CiAgfQp9KSh0aGlzKTsKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwovKgpvYmplY3QtYXNzaWduCihjKSBTaW5kcmUgU29yaHVzCkBsaWNlbnNlIE1JVAoqLwoKCi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovCnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOwp2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5Owp2YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7CgpmdW5jdGlvbiB0b09iamVjdCh2YWwpIHsKCWlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHsKCQl0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpOwoJfQoKCXJldHVybiBPYmplY3QodmFsKTsKfQoKZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkgewoJdHJ5IHsKCQlpZiAoIU9iamVjdC5hc3NpZ24pIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLgoKCQkvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4CgkJdmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVycwoJCXRlc3QxWzVdID0gJ2RlJzsKCQlpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NgoJCXZhciB0ZXN0MiA9IHt9OwoJCWZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykgewoJCQl0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7CgkJfQoJCXZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7CgkJCXJldHVybiB0ZXN0MltuXTsKCQl9KTsKCQlpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHsKCQkJcmV0dXJuIGZhbHNlOwoJCX0KCgkJLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NgoJCXZhciB0ZXN0MyA9IHt9OwoJCSdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikgewoJCQl0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyOwoJCX0pOwoJCWlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PQoJCQkJJ2FiY2RlZmdoaWprbG1ub3BxcnN0JykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQlyZXR1cm4gdHJ1ZTsKCX0gY2F0Y2ggKGVycikgewoJCS8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuCgkJcmV0dXJuIGZhbHNlOwoJfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkgewoJdmFyIGZyb207Cgl2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpOwoJdmFyIHN5bWJvbHM7CgoJZm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHsKCQlmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7CgoJCWZvciAodmFyIGtleSBpbiBmcm9tKSB7CgkJCWlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHsKCQkJCXRvW2tleV0gPSBmcm9tW2tleV07CgkJCX0KCQl9CgoJCWlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsKCQkJc3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTsKCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7CgkJCQlpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7CgkJCQkJdG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dOwoJCQkJfQoJCQl9CgkJfQoJfQoKCXJldHVybiB0bzsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2NoZWNrUHJvcFR5cGVzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwovKioKICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqLwoKCgppZiAodHJ1ZSkgewogIHZhciBpbnZhcmlhbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBmYmpzL2xpYi9pbnZhcmlhbnQgKi8gIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2ludmFyaWFudC5qcyIpOwogIHZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZmJqcy9saWIvd2FybmluZyAqLyAiLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIpOwogIHZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0ICovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIpOwogIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTsKfQoKLyoqCiAqIEFzc2VydCB0aGF0IHRoZSB2YWx1ZXMgbWF0Y2ggd2l0aCB0aGUgdHlwZSBzcGVjcy4KICogRXJyb3IgbWVzc2FnZXMgYXJlIG1lbW9yaXplZCBhbmQgd2lsbCBvbmx5IGJlIHNob3duIG9uY2UuCiAqCiAqIEBwYXJhbSB7b2JqZWN0fSB0eXBlU3BlY3MgTWFwIG9mIG5hbWUgdG8gYSBSZWFjdFByb3BUeXBlCiAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgUnVudGltZSB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHR5cGUtY2hlY2tlZAogKiBAcGFyYW0ge3N0cmluZ30gbG9jYXRpb24gZS5nLiAicHJvcCIsICJjb250ZXh0IiwgImNoaWxkIGNvbnRleHQiCiAqIEBwYXJhbSB7c3RyaW5nfSBjb21wb25lbnROYW1lIE5hbWUgb2YgdGhlIGNvbXBvbmVudCBmb3IgZXJyb3IgbWVzc2FnZXMuCiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBnZXRTdGFjayBSZXR1cm5zIHRoZSBjb21wb25lbnQgc3RhY2suCiAqIEBwcml2YXRlCiAqLwpmdW5jdGlvbiBjaGVja1Byb3BUeXBlcyh0eXBlU3BlY3MsIHZhbHVlcywgbG9jYXRpb24sIGNvbXBvbmVudE5hbWUsIGdldFN0YWNrKSB7CiAgaWYgKHRydWUpIHsKICAgIGZvciAodmFyIHR5cGVTcGVjTmFtZSBpbiB0eXBlU3BlY3MpIHsKICAgICAgaWYgKHR5cGVTcGVjcy5oYXNPd25Qcm9wZXJ0eSh0eXBlU3BlY05hbWUpKSB7CiAgICAgICAgdmFyIGVycm9yOwogICAgICAgIC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvCiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LgogICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy4KICAgICAgICB0cnkgewogICAgICAgICAgLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IGFuIGludmFyaWFudCB0aGF0IGdldHMgY2F1Z2h0LiBJdCdzIHRoZSBzYW1lCiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuCiAgICAgICAgICBpbnZhcmlhbnQodHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdID09PSAnZnVuY3Rpb24nLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ3RoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAlc2AuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBsb2NhdGlvbiwgdHlwZVNwZWNOYW1lLCB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0pOwogICAgICAgICAgZXJyb3IgPSB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSh2YWx1ZXMsIHR5cGVTcGVjTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIG51bGwsIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgZXJyb3IgPSBleDsKICAgICAgICB9CiAgICAgICAgd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgbG9jYXRpb24sIHR5cGVTcGVjTmFtZSwgdHlwZW9mIGVycm9yKTsKICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkgewogICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlCiAgICAgICAgICAvLyBzYW1lIGVycm9yLgogICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTsKCiAgICAgICAgICB2YXIgc3RhY2sgPSBnZXRTdGFjayA/IGdldFN0YWNrKCkgOiAnJzsKCiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkICVzIHR5cGU6ICVzJXMnLCBsb2NhdGlvbiwgZXJyb3IubWVzc2FnZSwgc3RhY2sgIT0gbnVsbCA/IHN0YWNrIDogJycpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSBjaGVja1Byb3BUeXBlczsKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwovKioKICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqLwoKCgp2YXIgZW1wdHlGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGZianMvbGliL2VtcHR5RnVuY3Rpb24gKi8gIi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiKTsKdmFyIGludmFyaWFudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGZianMvbGliL2ludmFyaWFudCAqLyAiLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvaW52YXJpYW50LmpzIik7CnZhciB3YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZmJqcy9saWIvd2FybmluZyAqLyAiLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvd2FybmluZy5qcyIpOwp2YXIgYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgb2JqZWN0LWFzc2lnbiAqLyAiLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIpOwoKdmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQgKi8gIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIik7CnZhciBjaGVja1Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY2hlY2tQcm9wVHlwZXMgKi8gIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvY2hlY2tQcm9wVHlwZXMuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNWYWxpZEVsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpIHsKICAvKiBnbG9iYWwgU3ltYm9sICovCiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yOwogIHZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLgoKICAvKioKICAgKiBSZXR1cm5zIHRoZSBpdGVyYXRvciBtZXRob2QgZnVuY3Rpb24gY29udGFpbmVkIG9uIHRoZSBpdGVyYWJsZSBvYmplY3QuCiAgICoKICAgKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDoKICAgKgogICAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7CiAgICogICAgIGlmIChpdGVyYXRvckZuKSB7CiAgICogICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG15SXRlcmFibGUpOwogICAqICAgICAgIC4uLgogICAqICAgICB9CiAgICoKICAgKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGUKICAgKiBAcmV0dXJuIHs/ZnVuY3Rpb259CiAgICovCiAgZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7CiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pOwogICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHJldHVybiBpdGVyYXRvckZuOwogICAgfQogIH0KCiAgLyoqCiAgICogQ29sbGVjdGlvbiBvZiBtZXRob2RzIHRoYXQgYWxsb3cgZGVjbGFyYXRpb24gYW5kIHZhbGlkYXRpb24gb2YgcHJvcHMgdGhhdCBhcmUKICAgKiBzdXBwbGllZCB0byBSZWFjdCBjb21wb25lbnRzLiBFeGFtcGxlIHVzYWdlOgogICAqCiAgICogICB2YXIgUHJvcHMgPSByZXF1aXJlKCdSZWFjdFByb3BUeXBlcycpOwogICAqICAgdmFyIE15QXJ0aWNsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHsKICAgKiAgICAgcHJvcFR5cGVzOiB7CiAgICogICAgICAgLy8gQW4gb3B0aW9uYWwgc3RyaW5nIHByb3AgbmFtZWQgImRlc2NyaXB0aW9uIi4KICAgKiAgICAgICBkZXNjcmlwdGlvbjogUHJvcHMuc3RyaW5nLAogICAqCiAgICogICAgICAgLy8gQSByZXF1aXJlZCBlbnVtIHByb3AgbmFtZWQgImNhdGVnb3J5Ii4KICAgKiAgICAgICBjYXRlZ29yeTogUHJvcHMub25lT2YoWydOZXdzJywnUGhvdG9zJ10pLmlzUmVxdWlyZWQsCiAgICoKICAgKiAgICAgICAvLyBBIHByb3AgbmFtZWQgImRpYWxvZyIgdGhhdCByZXF1aXJlcyBhbiBpbnN0YW5jZSBvZiBEaWFsb2cuCiAgICogICAgICAgZGlhbG9nOiBQcm9wcy5pbnN0YW5jZU9mKERpYWxvZykuaXNSZXF1aXJlZAogICAqICAgICB9LAogICAqICAgICByZW5kZXI6IGZ1bmN0aW9uKCkgeyAuLi4gfQogICAqICAgfSk7CiAgICoKICAgKiBBIG1vcmUgZm9ybWFsIHNwZWNpZmljYXRpb24gb2YgaG93IHRoZXNlIG1ldGhvZHMgYXJlIHVzZWQ6CiAgICoKICAgKiAgIHR5cGUgOj0gYXJyYXl8Ym9vbHxmdW5jfG9iamVjdHxudW1iZXJ8c3RyaW5nfG9uZU9mKFsuLi5dKXxpbnN0YW5jZU9mKC4uLikKICAgKiAgIGRlY2wgOj0gUmVhY3RQcm9wVHlwZXMue3R5cGV9KC5pc1JlcXVpcmVkKT8KICAgKgogICAqIEVhY2ggYW5kIGV2ZXJ5IGRlY2xhcmF0aW9uIHByb2R1Y2VzIGEgZnVuY3Rpb24gd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUuIFRoaXMKICAgKiBhbGxvd3MgdGhlIGNyZWF0aW9uIG9mIGN1c3RvbSB2YWxpZGF0aW9uIGZ1bmN0aW9ucy4gRm9yIGV4YW1wbGU6CiAgICoKICAgKiAgdmFyIE15TGluayA9IFJlYWN0LmNyZWF0ZUNsYXNzKHsKICAgKiAgICBwcm9wVHlwZXM6IHsKICAgKiAgICAgIC8vIEFuIG9wdGlvbmFsIHN0cmluZyBvciBVUkkgcHJvcCBuYW1lZCAiaHJlZiIuCiAgICogICAgICBocmVmOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHsKICAgKiAgICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTsKICAgKiAgICAgICAgaWYgKHByb3BWYWx1ZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wVmFsdWUgIT09ICdzdHJpbmcnICYmCiAgICogICAgICAgICAgICAhKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFVSSSkpIHsKICAgKiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKAogICAqICAgICAgICAgICAgJ0V4cGVjdGVkIGEgc3RyaW5nIG9yIGFuIFVSSSBmb3IgJyArIHByb3BOYW1lICsgJyBpbiAnICsKICAgKiAgICAgICAgICAgIGNvbXBvbmVudE5hbWUKICAgKiAgICAgICAgICApOwogICAqICAgICAgICB9CiAgICogICAgICB9CiAgICogICAgfSwKICAgKiAgICByZW5kZXI6IGZ1bmN0aW9uKCkgey4uLn0KICAgKiAgfSk7CiAgICoKICAgKiBAaW50ZXJuYWwKICAgKi8KCiAgdmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JzsKCiAgLy8gSW1wb3J0YW50IQogIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzYC4KICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7CiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksCiAgICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLAogICAgZnVuYzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksCiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSwKICAgIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLAogICAgc3RyaW5nOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksCiAgICBzeW1ib2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzeW1ib2wnKSwKCiAgICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksCiAgICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsCiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSwKICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsCiAgICBub2RlOiBjcmVhdGVOb2RlQ2hlY2tlcigpLAogICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsCiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLAogICAgb25lT2ZUeXBlOiBjcmVhdGVVbmlvblR5cGVDaGVja2VyLAogICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIsCiAgICBleGFjdDogY3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciwKICB9OwoKICAvKioKICAgKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duCiAgICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzCiAgICovCiAgLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUqLwogIGZ1bmN0aW9uIGlzKHgsIHkpIHsKICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG0KICAgIGlmICh4ID09PSB5KSB7CiAgICAgIC8vIFN0ZXBzIDEtNSwgNy0xMAogICAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMAogICAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7CiAgICB9IGVsc2UgewogICAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTgogICAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5OwogICAgfQogIH0KICAvKmVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlKi8KCiAgLyoqCiAgICogV2UgdXNlIGFuIEVycm9yLWxpa2Ugb2JqZWN0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IGFzIHBlb3BsZSBtYXkgY2FsbAogICAqIFByb3BUeXBlcyBkaXJlY3RseSBhbmQgaW5zcGVjdCB0aGVpciBvdXRwdXQuIEhvd2V2ZXIsIHdlIGRvbid0IHVzZSByZWFsCiAgICogRXJyb3JzIGFueW1vcmUuIFdlIGRvbid0IGluc3BlY3QgdGhlaXIgc3RhY2sgYW55d2F5LCBhbmQgY3JlYXRpbmcgdGhlbQogICAqIGlzIHByb2hpYml0aXZlbHkgZXhwZW5zaXZlIGlmIHRoZXkgYXJlIGNyZWF0ZWQgdG9vIG9mdGVuLCBzdWNoIGFzIHdoYXQKICAgKiBoYXBwZW5zIGluIG9uZU9mVHlwZSgpIGZvciBhbnkgdHlwZSBiZWZvcmUgdGhlIG9uZSB0aGF0IG1hdGNoZWQuCiAgICovCiAgZnVuY3Rpb24gUHJvcFR5cGVFcnJvcihtZXNzYWdlKSB7CiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOwogICAgdGhpcy5zdGFjayA9ICcnOwogIH0KICAvLyBNYWtlIGBpbnN0YW5jZW9mIEVycm9yYCBzdGlsbCB3b3JrIGZvciByZXR1cm5lZCBlcnJvcnMuCiAgUHJvcFR5cGVFcnJvci5wcm90b3R5cGUgPSBFcnJvci5wcm90b3R5cGU7CgogIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7CiAgICBpZiAodHJ1ZSkgewogICAgICB2YXIgbWFudWFsUHJvcFR5cGVDYWxsQ2FjaGUgPSB7fTsKICAgICAgdmFyIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50ID0gMDsKICAgIH0KICAgIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkgewogICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7CiAgICAgIHByb3BGdWxsTmFtZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTsKCiAgICAgIGlmIChzZWNyZXQgIT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7CiAgICAgICAgaWYgKHRocm93T25EaXJlY3RBY2Nlc3MpIHsKICAgICAgICAgIC8vIE5ldyBiZWhhdmlvciBvbmx5IGZvciB1c2VycyBvZiBgcHJvcC10eXBlc2AgcGFja2FnZQogICAgICAgICAgaW52YXJpYW50KAogICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgKwogICAgICAgICAgICAnVXNlIGBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKWAgdG8gY2FsbCB0aGVtLiAnICsKICAgICAgICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnCiAgICAgICAgICApOwogICAgICAgIH0gZWxzZSBpZiAoImRldmVsb3BtZW50IiAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgLy8gT2xkIGJlaGF2aW9yIGZvciBwZW9wbGUgdXNpbmcgUmVhY3QuUHJvcFR5cGVzCiAgICAgICAgICB2YXIgY2FjaGVLZXkgPSBjb21wb25lbnROYW1lICsgJzonICsgcHJvcE5hbWU7CiAgICAgICAgICBpZiAoCiAgICAgICAgICAgICFtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gJiYKICAgICAgICAgICAgLy8gQXZvaWQgc3BhbW1pbmcgdGhlIGNvbnNvbGUgYmVjYXVzZSB0aGV5IGFyZSBvZnRlbiBub3QgYWN0aW9uYWJsZSBleGNlcHQgZm9yIGxpYiBhdXRob3JzCiAgICAgICAgICAgIG1hbnVhbFByb3BUeXBlV2FybmluZ0NvdW50IDwgMwogICAgICAgICAgKSB7CiAgICAgICAgICAgIHdhcm5pbmcoCiAgICAgICAgICAgICAgZmFsc2UsCiAgICAgICAgICAgICAgJ1lvdSBhcmUgbWFudWFsbHkgY2FsbGluZyBhIFJlYWN0LlByb3BUeXBlcyB2YWxpZGF0aW9uICcgKwogICAgICAgICAgICAgICdmdW5jdGlvbiBmb3IgdGhlIGAlc2AgcHJvcCBvbiBgJXNgLiBUaGlzIGlzIGRlcHJlY2F0ZWQgJyArCiAgICAgICAgICAgICAgJ2FuZCB3aWxsIHRocm93IGluIHRoZSBzdGFuZGFsb25lIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICsKICAgICAgICAgICAgICAnWW91IG1heSBiZSBzZWVpbmcgdGhpcyB3YXJuaW5nIGR1ZSB0byBhIHRoaXJkLXBhcnR5IFByb3BUeXBlcyAnICsKICAgICAgICAgICAgICAnbGlicmFyeS4gU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1kb250LWNhbGwtcHJvcHR5cGVzICcgKyAnZm9yIGRldGFpbHMuJywKICAgICAgICAgICAgICBwcm9wRnVsbE5hbWUsCiAgICAgICAgICAgICAgY29tcG9uZW50TmFtZQogICAgICAgICAgICApOwogICAgICAgICAgICBtYW51YWxQcm9wVHlwZUNhbGxDYWNoZVtjYWNoZUtleV0gPSB0cnVlOwogICAgICAgICAgICBtYW51YWxQcm9wVHlwZVdhcm5pbmdDb3VudCsrOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHsKICAgICAgICBpZiAoaXNSZXF1aXJlZCkgewogICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gbnVsbCkgewogICAgICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1RoZSAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2AgaXMgbWFya2VkIGFzIHJlcXVpcmVkICcgKyAoJ2luIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIG5vZGUgaXMgYG51bGxgLicpKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignVGhlICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBpcyBtYXJrZWQgYXMgcmVxdWlyZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGJ1dCBpdHMgbm9kZSBpcyBgdW5kZWZpbmVkYC4nKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpOwogICAgICB9CiAgICB9CgogICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7CiAgICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTsKCiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKGV4cGVjdGVkVHlwZSkgewogICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHsKICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTsKICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTsKICAgICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHsKICAgICAgICAvLyBgcHJvcFZhbHVlYCBiZWluZyBpbnN0YW5jZSBvZiwgc2F5LCBkYXRlL3JlZ2V4cCwgcGFzcyB0aGUgJ29iamVjdCcKICAgICAgICAvLyBjaGVjaywgYnV0IHdlIGNhbiBvZmZlciBhIG1vcmUgcHJlY2lzZSBlcnJvciBtZXNzYWdlIGhlcmUgcmF0aGVyIHRoYW4KICAgICAgICAvLyAnb2YgdHlwZSBgb2JqZWN0YCcuCiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTsKCiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJlY2lzZVR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2AnICsgZXhwZWN0ZWRUeXBlICsgJ2AuJykpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkgewogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikgewogICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7CiAgICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHsKICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpOwogICAgICB9CiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07CiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7CiAgICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTsKICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBhcnJheS4nKSk7CiAgICAgIH0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnWycgKyBpICsgJ10nLCBSZWFjdFByb3BUeXBlc1NlY3JldCk7CiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkgewogICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7CiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07CiAgICAgIGlmICghaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkgewogICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50LicpKTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHsKICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgewogICAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkgewogICAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7CiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pOwogICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHsKICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHsKICAgICAgIHRydWUgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJykgOiB1bmRlZmluZWQ7CiAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDsKICAgIH0KCiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHsKICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpOwogICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIG5vZGUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTsKICAgIH0KICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7CiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHsKICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHJldHVybiBuZXcgUHJvcFR5cGVFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIG9iamVjdE9mLicpOwogICAgICB9CiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07CiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7CiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpOwogICAgICB9CiAgICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHsKICAgICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7CiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2VycykgewogICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7CiAgICAgICB0cnVlID8gd2FybmluZyhmYWxzZSwgJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKSA6IHVuZGVmaW5lZDsKICAgICAgcmV0dXJuIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsOwogICAgfQoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07CiAgICAgIGlmICh0eXBlb2YgY2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdhcm5pbmcoCiAgICAgICAgICBmYWxzZSwKICAgICAgICAgICdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZS4gRXhwZWN0ZWQgYW4gYXJyYXkgb2YgY2hlY2sgZnVuY3Rpb25zLCBidXQgJyArCiAgICAgICAgICAncmVjZWl2ZWQgJXMgYXQgaW5kZXggJXMuJywKICAgICAgICAgIGdldFBvc3RmaXhGb3JUeXBlV2FybmluZyhjaGVja2VyKSwKICAgICAgICAgIGkKICAgICAgICApOwogICAgICAgIHJldHVybiBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zTnVsbDsKICAgICAgfQogICAgfQoKICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgewogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07CiAgICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBSZWFjdFByb3BUeXBlc1NlY3JldCkgPT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTsKICAgIH0KICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHsKICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgewogICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykgewogICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7CiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07CiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7CiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7CiAgICAgIH0KICAgICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHsKICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTsKICAgICAgICBpZiAoIWNoZWNrZXIpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5LCBSZWFjdFByb3BUeXBlc1NlY3JldCk7CiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICByZXR1cm4gZXJyb3I7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXIoc2hhcGVUeXBlcykgewogICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7CiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07CiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7CiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHsKICAgICAgICByZXR1cm4gbmV3IFByb3BUeXBlRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7CiAgICAgIH0KICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb20KICAgICAgLy8gcHJvcHMuCiAgICAgIHZhciBhbGxLZXlzID0gYXNzaWduKHt9LCBwcm9wc1twcm9wTmFtZV0sIHNoYXBlVHlwZXMpOwogICAgICBmb3IgKHZhciBrZXkgaW4gYWxsS2V5cykgewogICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldOwogICAgICAgIGlmICghY2hlY2tlcikgewogICAgICAgICAgcmV0dXJuIG5ldyBQcm9wVHlwZUVycm9yKAogICAgICAgICAgICAnSW52YWxpZCAnICsgbG9jYXRpb24gKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Aga2V5IGAnICsga2V5ICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJyArCiAgICAgICAgICAgICdcbkJhZCBvYmplY3Q6ICcgKyBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpICsKICAgICAgICAgICAgJ1xuVmFsaWQga2V5czogJyArICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJykKICAgICAgICAgICk7CiAgICAgICAgfQogICAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXksIFJlYWN0UHJvcFR5cGVzU2VjcmV0KTsKICAgICAgICBpZiAoZXJyb3IpIHsKICAgICAgICAgIHJldHVybiBlcnJvcjsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTsKICB9CgogIGZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHsKICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkgewogICAgICBjYXNlICdudW1iZXInOgogICAgICBjYXNlICdzdHJpbmcnOgogICAgICBjYXNlICd1bmRlZmluZWQnOgogICAgICAgIHJldHVybiB0cnVlOwogICAgICBjYXNlICdib29sZWFuJzoKICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTsKICAgICAgY2FzZSAnb2JqZWN0JzoKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7CiAgICAgICAgfQogICAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQoKICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTsKICAgICAgICBpZiAoaXRlcmF0b3JGbikgewogICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7CiAgICAgICAgICB2YXIgc3RlcDsKICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykgewogICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7CiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIEl0ZXJhdG9yIHdpbGwgcHJvdmlkZSBlbnRyeSBbayx2XSB0dXBsZXMgcmF0aGVyIHRoYW4gdmFsdWVzLgogICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7CiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTsKICAgICAgICAgICAgICBpZiAoZW50cnkpIHsKICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0cnVlOwogICAgICBkZWZhdWx0OgogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGlzU3ltYm9sKHByb3BUeXBlLCBwcm9wVmFsdWUpIHsKICAgIC8vIE5hdGl2ZSBTeW1ib2wuCiAgICBpZiAocHJvcFR5cGUgPT09ICdzeW1ib2wnKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10gPT09ICdTeW1ib2wnCiAgICBpZiAocHJvcFZhbHVlWydAQHRvU3RyaW5nVGFnJ10gPT09ICdTeW1ib2wnKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQoKICAgIC8vIEZhbGxiYWNrIGZvciBub24tc3BlYyBjb21wbGlhbnQgU3ltYm9scyB3aGljaCBhcmUgcG9seWZpbGxlZC4KICAgIGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHByb3BWYWx1ZSBpbnN0YW5jZW9mIFN5bWJvbCkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICAvLyBFcXVpdmFsZW50IG9mIGB0eXBlb2ZgIGJ1dCB3aXRoIHNwZWNpYWwgaGFuZGxpbmcgZm9yIGFycmF5IGFuZCByZWdleHAuCiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7CiAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlOwogICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkgewogICAgICByZXR1cm4gJ2FycmF5JzsKICAgIH0KICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgLy8gT2xkIHdlYmtpdHMgKGF0IGxlYXN0IHVudGlsIEFuZHJvaWQgNC4wKSByZXR1cm4gJ2Z1bmN0aW9uJyByYXRoZXIgdGhhbgogICAgICAvLyAnb2JqZWN0JyBmb3IgdHlwZW9mIGEgUmVnRXhwLiBXZSdsbCBub3JtYWxpemUgdGhpcyBoZXJlIHNvIHRoYXQgL2JsYS8KICAgICAgLy8gcGFzc2VzIFByb3BUeXBlcy5vYmplY3QuCiAgICAgIHJldHVybiAnb2JqZWN0JzsKICAgIH0KICAgIGlmIChpc1N5bWJvbChwcm9wVHlwZSwgcHJvcFZhbHVlKSkgewogICAgICByZXR1cm4gJ3N5bWJvbCc7CiAgICB9CiAgICByZXR1cm4gcHJvcFR5cGU7CiAgfQoKICAvLyBUaGlzIGhhbmRsZXMgbW9yZSB0eXBlcyB0aGFuIGBnZXRQcm9wVHlwZWAuIE9ubHkgdXNlZCBmb3IgZXJyb3IgbWVzc2FnZXMuCiAgLy8gU2VlIGBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcmAuCiAgZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7CiAgICBpZiAodHlwZW9mIHByb3BWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcFZhbHVlID09PSBudWxsKSB7CiAgICAgIHJldHVybiAnJyArIHByb3BWYWx1ZTsKICAgIH0KICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7CiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7CiAgICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7CiAgICAgICAgcmV0dXJuICdkYXRlJzsKICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHsKICAgICAgICByZXR1cm4gJ3JlZ2V4cCc7CiAgICAgIH0KICAgIH0KICAgIHJldHVybiBwcm9wVHlwZTsKICB9CgogIC8vIFJldHVybnMgYSBzdHJpbmcgdGhhdCBpcyBwb3N0Zml4ZWQgdG8gYSB3YXJuaW5nIGFib3V0IGFuIGludmFsaWQgdHlwZS4KICAvLyBGb3IgZXhhbXBsZSwgInVuZGVmaW5lZCIgb3IgIm9mIHR5cGUgYXJyYXkiCiAgZnVuY3Rpb24gZ2V0UG9zdGZpeEZvclR5cGVXYXJuaW5nKHZhbHVlKSB7CiAgICB2YXIgdHlwZSA9IGdldFByZWNpc2VUeXBlKHZhbHVlKTsKICAgIHN3aXRjaCAodHlwZSkgewogICAgICBjYXNlICdhcnJheSc6CiAgICAgIGNhc2UgJ29iamVjdCc6CiAgICAgICAgcmV0dXJuICdhbiAnICsgdHlwZTsKICAgICAgY2FzZSAnYm9vbGVhbic6CiAgICAgIGNhc2UgJ2RhdGUnOgogICAgICBjYXNlICdyZWdleHAnOgogICAgICAgIHJldHVybiAnYSAnICsgdHlwZTsKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gdHlwZTsKICAgIH0KICB9CgogIC8vIFJldHVybnMgY2xhc3MgbmFtZSBvZiB0aGUgb2JqZWN0LCBpZiBhbnkuCiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkgewogICAgaWYgKCFwcm9wVmFsdWUuY29uc3RydWN0b3IgfHwgIXByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lKSB7CiAgICAgIHJldHVybiBBTk9OWU1PVVM7CiAgICB9CiAgICByZXR1cm4gcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWU7CiAgfQoKICBSZWFjdFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGNoZWNrUHJvcFR5cGVzOwogIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzOwoKICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCi8qKgogKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy4KICoKICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICovCgppZiAodHJ1ZSkgewogIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJgogICAgU3ltYm9sLmZvciAmJgogICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fAogICAgMHhlYWM3OwoKICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJgogICAgICBvYmplY3QgIT09IG51bGwgJiYKICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7CiAgfTsKCiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuCiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZAogIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTsKICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMgKi8gIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanMiKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7Cn0gZWxzZSB7fQoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwovKioKICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqLwoKCgp2YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnOwoKbW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDsKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC9yZWFjdC1saWZlY3ljbGVzLWNvbXBhdC5lcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIGV4cG9ydHMgcHJvdmlkZWQ6IHBvbHlmaWxsICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sICJwb2x5ZmlsbCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gcG9seWZpbGw7IH0pOwovKioKICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqLwoKZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkgewogIC8vIENhbGwgdGhpcy5jb25zdHJ1Y3Rvci5nRFNGUCB0byBzdXBwb3J0IHN1Yi1jbGFzc2VzLgogIHZhciBzdGF0ZSA9IHRoaXMuY29uc3RydWN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpOwogIGlmIChzdGF0ZSAhPT0gbnVsbCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICB0aGlzLnNldFN0YXRlKHN0YXRlKTsKICB9Cn0KCmZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7CiAgLy8gQ2FsbCB0aGlzLmNvbnN0cnVjdG9yLmdEU0ZQIHRvIHN1cHBvcnQgc3ViLWNsYXNzZXMuCiAgLy8gVXNlIHRoZSBzZXRTdGF0ZSgpIHVwZGF0ZXIgdG8gZW5zdXJlIHN0YXRlIGlzbid0IHN0YWxlIGluIGNlcnRhaW4gZWRnZSBjYXNlcy4KICBmdW5jdGlvbiB1cGRhdGVyKHByZXZTdGF0ZSkgewogICAgdmFyIHN0YXRlID0gdGhpcy5jb25zdHJ1Y3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMobmV4dFByb3BzLCBwcmV2U3RhdGUpOwogICAgcmV0dXJuIHN0YXRlICE9PSBudWxsICYmIHN0YXRlICE9PSB1bmRlZmluZWQgPyBzdGF0ZSA6IG51bGw7CiAgfQogIC8vIEJpbmRpbmcgInRoaXMiIGlzIGltcG9ydGFudCBmb3Igc2hhbGxvdyByZW5kZXJlciBzdXBwb3J0LgogIHRoaXMuc2V0U3RhdGUodXBkYXRlci5iaW5kKHRoaXMpKTsKfQoKZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSkgewogIHRyeSB7CiAgICB2YXIgcHJldlByb3BzID0gdGhpcy5wcm9wczsKICAgIHZhciBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlOwogICAgdGhpcy5wcm9wcyA9IG5leHRQcm9wczsKICAgIHRoaXMuc3RhdGUgPSBuZXh0U3RhdGU7CiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90RmxhZyA9IHRydWU7CiAgICB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90ID0gdGhpcy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgKICAgICAgcHJldlByb3BzLAogICAgICBwcmV2U3RhdGUKICAgICk7CiAgfSBmaW5hbGx5IHsKICAgIHRoaXMucHJvcHMgPSBwcmV2UHJvcHM7CiAgICB0aGlzLnN0YXRlID0gcHJldlN0YXRlOwogIH0KfQoKLy8gUmVhY3QgbWF5IHdhcm4gYWJvdXQgY1dNL2NXUlAvY1dVIG1ldGhvZHMgYmVpbmcgZGVwcmVjYXRlZC4KLy8gQWRkIGEgZmxhZyB0byBzdXBwcmVzcyB0aGVzZSB3YXJuaW5ncyBmb3IgdGhpcyBzcGVjaWFsIGNhc2UuCmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTsKY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTsKY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nID0gdHJ1ZTsKCmZ1bmN0aW9uIHBvbHlmaWxsKENvbXBvbmVudCkgewogIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlOwoKICBpZiAoIXByb3RvdHlwZSB8fCAhcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHsKICAgIHRocm93IG5ldyBFcnJvcignQ2FuIG9ubHkgcG9seWZpbGwgY2xhc3MgY29tcG9uZW50cycpOwogIH0KCiAgaWYgKAogICAgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgIT09ICdmdW5jdGlvbicgJiYKICAgIHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgIT09ICdmdW5jdGlvbicKICApIHsKICAgIHJldHVybiBDb21wb25lbnQ7CiAgfQoKICAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsICJ1bnNhZmUiIGxpZmVjeWNsZXMgd29uJ3QgYmUgY2FsbGVkLgogIC8vIEVycm9yIGlmIGFueSBvZiB0aGVzZSBsaWZlY3ljbGVzIGFyZSBwcmVzZW50LAogIC8vIEJlY2F1c2UgdGhleSB3b3VsZCB3b3JrIGRpZmZlcmVudGx5IGJldHdlZW4gb2xkZXIgYW5kIG5ld2VyICgxNi4zKykgdmVyc2lvbnMgb2YgUmVhY3QuCiAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7CiAgdmFyIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSBudWxsOwogIHZhciBmb3VuZFdpbGxVcGRhdGVOYW1lID0gbnVsbDsKICBpZiAodHlwZW9mIHByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpIHsKICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnOwogIH0gZWxzZSBpZiAodHlwZW9mIHByb3RvdHlwZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7CiAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7CiAgfQogIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHsKICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyc7CiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvdG90eXBlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7CiAgICBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJzsKICB9CiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgZm91bmRXaWxsVXBkYXRlTmFtZSA9ICdjb21wb25lbnRXaWxsVXBkYXRlJzsKICB9IGVsc2UgaWYgKHR5cGVvZiBwcm90b3R5cGUuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHsKICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUnOwogIH0KICBpZiAoCiAgICBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgfHwKICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwgfHwKICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwKICApIHsKICAgIHZhciBjb21wb25lbnROYW1lID0gQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lOwogICAgdmFyIG5ld0FwaU5hbWUgPQogICAgICB0eXBlb2YgQ29tcG9uZW50LmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJwogICAgICAgID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJwogICAgICAgIDogJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlKCknOwoKICAgIHRocm93IEVycm9yKAogICAgICAnVW5zYWZlIGxlZ2FjeSBsaWZlY3ljbGVzIHdpbGwgbm90IGJlIGNhbGxlZCBmb3IgY29tcG9uZW50cyB1c2luZyBuZXcgY29tcG9uZW50IEFQSXMuXG5cbicgKwogICAgICAgIGNvbXBvbmVudE5hbWUgKwogICAgICAgICcgdXNlcyAnICsKICAgICAgICBuZXdBcGlOYW1lICsKICAgICAgICAnIGJ1dCBhbHNvIGNvbnRhaW5zIHRoZSBmb2xsb3dpbmcgbGVnYWN5IGxpZmVjeWNsZXM6JyArCiAgICAgICAgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCA/ICdcbiAgJyArIGZvdW5kV2lsbE1vdW50TmFtZSA6ICcnKSArCiAgICAgICAgKGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgIT09IG51bGwKICAgICAgICAgID8gJ1xuICAnICsgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZQogICAgICAgICAgOiAnJykgKwogICAgICAgIChmb3VuZFdpbGxVcGRhdGVOYW1lICE9PSBudWxsID8gJ1xuICAnICsgZm91bmRXaWxsVXBkYXRlTmFtZSA6ICcnKSArCiAgICAgICAgJ1xuXG5UaGUgYWJvdmUgbGlmZWN5Y2xlcyBzaG91bGQgYmUgcmVtb3ZlZC4gTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTpcbicgKwogICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWFzeW5jLWNvbXBvbmVudC1saWZlY3ljbGUtaG9va3MnCiAgICApOwogIH0KCiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuCiAgLy8gQXMgYSB3b3JrYXJvdW5kLCB1c2UgY1dNIGFuZCBjV1JQIHRvIGludm9rZSB0aGUgbmV3IHN0YXRpYyBsaWZlY3ljbGUuCiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhlc2UgbGlmZWN5Y2xlcyBpZiBnRFNGUCBleGlzdHMuCiAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7CiAgICBwcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gY29tcG9uZW50V2lsbE1vdW50OwogICAgcHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOwogIH0KCiAgLy8gUmVhY3QgPD0gMTYuMiBkb2VzIG5vdCBzdXBwb3J0IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlLgogIC8vIEFzIGEgd29ya2Fyb3VuZCwgdXNlIGNXVSB0byBpbnZva2UgdGhlIG5ldyBsaWZlY3ljbGUuCiAgLy8gTmV3ZXIgdmVyc2lvbnMgb2YgUmVhY3Qgd2lsbCBpZ25vcmUgdGhhdCBsaWZlY3ljbGUgaWYgZ1NCVSBleGlzdHMuCiAgaWYgKHR5cGVvZiBwcm90b3R5cGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHsKICAgIGlmICh0eXBlb2YgcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgJ0Nhbm5vdCBwb2x5ZmlsbCBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIGZvciBjb21wb25lbnRzIHRoYXQgZG8gbm90IGRlZmluZSBjb21wb25lbnREaWRVcGRhdGUoKSBvbiB0aGUgcHJvdG90eXBlJwogICAgICApOwogICAgfQoKICAgIHByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gY29tcG9uZW50V2lsbFVwZGF0ZTsKCiAgICB2YXIgY29tcG9uZW50RGlkVXBkYXRlID0gcHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZTsKCiAgICBwcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlUG9seWZpbGwoCiAgICAgIHByZXZQcm9wcywKICAgICAgcHJldlN0YXRlLAogICAgICBtYXliZVNuYXBzaG90CiAgICApIHsKICAgICAgLy8gMTYuMysgd2lsbCBub3QgZXhlY3V0ZSBvdXIgd2lsbC11cGRhdGUgbWV0aG9kOwogICAgICAvLyBJdCB3aWxsIHBhc3MgYSBzbmFwc2hvdCBub2RlIHRvIGRpZC11cGRhdGUgdGhvdWdoLgogICAgICAvLyBPbGRlciB2ZXJzaW9ucyB3aWxsIHJlcXVpcmUgb3VyIHBvbHlmaWxsZWQgd2lsbC11cGRhdGUgbm9kZS4KICAgICAgLy8gV2UgbmVlZCB0byBoYW5kbGUgYm90aCBjYXNlcywgYnV0IGNhbid0IGp1c3QgY2hlY2sgZm9yIHRoZSBwcmVzZW5jZSBvZiAibWF5YmVTbmFwc2hvdCIsCiAgICAgIC8vIEJlY2F1c2UgZm9yIDw9IDE1LnggdmVyc2lvbnMgdGhpcyBtaWdodCBiZSBhICJwcmV2Q29udGV4dCIgb2JqZWN0LgogICAgICAvLyBXZSBhbHNvIGNhbid0IGp1c3QgY2hlY2sgIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90IiwKICAgICAgLy8gQmVjYXVzZSBnZXQtc25hcHNob3QgbWlnaHQgcmV0dXJuIGEgZmFsc3kgbm9kZS4KICAgICAgLy8gU28gY2hlY2sgZm9yIHRoZSBleHBsaWNpdCBfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEZsYWcgZmxhZyB0byBkZXRlcm1pbmUgYmVoYXZpb3IuCiAgICAgIHZhciBzbmFwc2hvdCA9IHRoaXMuX19yZWFjdEludGVybmFsU25hcHNob3RGbGFnCiAgICAgICAgPyB0aGlzLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90CiAgICAgICAgOiBtYXliZVNuYXBzaG90OwoKICAgICAgY29tcG9uZW50RGlkVXBkYXRlLmNhbGwodGhpcywgcHJldlByb3BzLCBwcmV2U3RhdGUsIHNuYXBzaG90KTsKICAgIH07CiAgfQoKICByZXR1cm4gQ29tcG9uZW50Owp9CgoKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9yZWFjdC1taW5pbWFsaXN0LXBvcnRhbC9saWIvcG9ydGFsLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9yZWFjdC1taW5pbWFsaXN0LXBvcnRhbC9saWIvcG9ydGFsLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKCnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOwoKdmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpOwoKdmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9wLXR5cGVzICovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIik7Cgp2YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpOwoKdmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LWRvbSAqLyAicmVhY3QtZG9tIik7Cgp2YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikgPyBjYWxsIDogc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0KCnZhciB1c2VDcmVhdGVQb3J0YWwgPSB0eXBlb2YgX3JlYWN0RG9tMi5kZWZhdWx0LmNyZWF0ZVBvcnRhbCA9PT0gJ2Z1bmN0aW9uJzsKdmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnOwoKdmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7CiAgX2luaGVyaXRzKFBvcnRhbCwgX0NvbXBvbmVudCk7CgogIGZ1bmN0aW9uIFBvcnRhbCgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpOwoKICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUG9ydGFsLCBbewogICAga2V5OiAnY29tcG9uZW50V2lsbE1vdW50JywKICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7CiAgICAgIGlmIChpc0Jyb3dzZXIpIHsKICAgICAgICBpZiAoIXRoaXMucHJvcHMuY29udGFpbmVyKSB7CiAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNvbnRhaW5lcik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gdGhpcy5wcm9wcy5jb250YWluZXI7CiAgICAgICAgfQogICAgICAgIHRoaXMucmVuZGVyTGF5ZXIoKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkgewogICAgICB0aGlzLnJlbmRlckxheWVyKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkgewogICAgICBpZiAoIXVzZUNyZWF0ZVBvcnRhbCkgewogICAgICAgIF9yZWFjdERvbTIuZGVmYXVsdC51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuY29udGFpbmVyKTsKICAgICAgfQogICAgICBpZiAoIXRoaXMucHJvcHMuY29udGFpbmVyKSB7CiAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmNvbnRhaW5lcik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdyZW5kZXJMYXllcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGF5ZXIoKSB7CiAgICAgIGlmICghdXNlQ3JlYXRlUG9ydGFsKSB7CiAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHRoaXMsIHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMuY29udGFpbmVyKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogJ3JlbmRlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICBpZiAodXNlQ3JlYXRlUG9ydGFsKSB7CiAgICAgICAgcmV0dXJuIF9yZWFjdERvbTIuZGVmYXVsdC5jcmVhdGVQb3J0YWwodGhpcy5wcm9wcy5jaGlsZHJlbiwgdGhpcy5jb250YWluZXIpOwogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBvcnRhbDsKfShfcmVhY3QuQ29tcG9uZW50KTsKClBvcnRhbC5wcm9wVHlwZXMgPSB7CiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSwgLy8gZXNsaW50LWRpc2FibGUtbGluZQogIGNvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QgLy8gZXNsaW50LWRpc2FibGUtbGluZQp9OwoKZXhwb3J0cy5kZWZhdWx0ID0gUG9ydGFsOwoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVzcG9uc2l2ZS1tb2RhbC9saWIvaW5kZXguZXMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9yZWFjdC1yZXNwb25zaXZlLW1vZGFsL2xpYi9pbmRleC5lcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBleHBvcnRzIHByb3ZpZGVkOiBkZWZhdWx0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNsYXNzbmFtZXMgKi8gIi4vbm9kZV9tb2R1bGVzL2NsYXNzbmFtZXMvaW5kZXguanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGNsYXNzbmFtZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihjbGFzc25hbWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcHJvcC10eXBlcyAqLyAiLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9saWZlY3ljbGVzX2NvbXBhdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgKi8gIi4vbm9kZV9tb2R1bGVzL3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0L3JlYWN0LWxpZmVjeWNsZXMtY29tcGF0LmVzLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9taW5pbWFsaXN0X3BvcnRhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QtbWluaW1hbGlzdC1wb3J0YWwgKi8gIi4vbm9kZV9tb2R1bGVzL3JlYWN0LW1pbmltYWxpc3QtcG9ydGFsL2xpYi9wb3J0YWwuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X21pbmltYWxpc3RfcG9ydGFsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4ocmVhY3RfbWluaW1hbGlzdF9wb3J0YWxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF90cmFuc2l0aW9uX2dyb3VwX0NTU1RyYW5zaXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbiAqLyAiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF90cmFuc2l0aW9uX2dyb3VwX0NTU1RyYW5zaXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihyZWFjdF90cmFuc2l0aW9uX2dyb3VwX0NTU1RyYW5zaXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBub19zY3JvbGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIG5vLXNjcm9sbCAqLyAiLi9ub2RlX21vZHVsZXMvbm8tc2Nyb2xsL2luZGV4LmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBub19zY3JvbGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihub19zY3JvbGxfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyk7CgoKCgoKCgoKdmFyIENsb3NlSWNvbiA9IGZ1bmN0aW9uIENsb3NlSWNvbihfcmVmKSB7CiAgdmFyIGNsYXNzZXMgPSBfcmVmLmNsYXNzZXMsCiAgICAgIGNsYXNzTmFtZXMgPSBfcmVmLmNsYXNzTmFtZXMsCiAgICAgIHN0eWxlcyA9IF9yZWYuc3R5bGVzLAogICAgICBjbG9zZUljb25TaXplID0gX3JlZi5jbG9zZUljb25TaXplLAogICAgICBjbG9zZUljb25TdmdQYXRoID0gX3JlZi5jbG9zZUljb25TdmdQYXRoLAogICAgICBvbkNsaWNrQ2xvc2VJY29uID0gX3JlZi5vbkNsaWNrQ2xvc2VJY29uOwogIHJldHVybiByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KAogICAgJ2J1dHRvbicsCiAgICB7CiAgICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShjbGFzc2VzLmNsb3NlQnV0dG9uLCBjbGFzc05hbWVzLmNsb3NlQnV0dG9uKSwKICAgICAgc3R5bGU6IHN0eWxlcy5jbG9zZUJ1dHRvbiwKICAgICAgb25DbGljazogb25DbGlja0Nsb3NlSWNvbgogICAgfSwKICAgIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoCiAgICAgICdzdmcnLAogICAgICB7CiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKGNsYXNzZXMuY2xvc2VJY29uLCBjbGFzc05hbWVzLmNsb3NlSWNvbiksCiAgICAgICAgc3R5bGU6IHN0eWxlcy5jbG9zZUljb24sCiAgICAgICAgeG1sbnM6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsCiAgICAgICAgd2lkdGg6IGNsb3NlSWNvblNpemUsCiAgICAgICAgaGVpZ2h0OiBjbG9zZUljb25TaXplLAogICAgICAgIHZpZXdCb3g6ICcwIDAgMzYgMzYnCiAgICAgIH0sCiAgICAgIGNsb3NlSWNvblN2Z1BhdGgKICAgICkKICApOwp9OwoKQ2xvc2VJY29uLnByb3BUeXBlcyA9IHsKICBjbGFzc05hbWVzOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm9iamVjdC5pc1JlcXVpcmVkLAogIHN0eWxlczogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5vYmplY3QuaXNSZXF1aXJlZCwKICBjbGFzc2VzOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm9iamVjdC5pc1JlcXVpcmVkLAogIGNsb3NlSWNvblNpemU6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEubnVtYmVyLmlzUmVxdWlyZWQsCiAgY2xvc2VJY29uU3ZnUGF0aDogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5ub2RlLmlzUmVxdWlyZWQsCiAgb25DbGlja0Nsb3NlSWNvbjogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5mdW5jLmlzUmVxdWlyZWQKfTsKCmZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzcywgcmVmKSB7CiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9OwogIHZhciBpbnNlcnRBdCA9IHJlZi5pbnNlcnRBdDsKCiAgaWYgKCFjc3MgfHwgdHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgeyByZXR1cm47IH0KCiAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07CiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJzsKCiAgaWYgKGluc2VydEF0ID09PSAndG9wJykgewogICAgaWYgKGhlYWQuZmlyc3RDaGlsZCkgewogICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZSwgaGVhZC5maXJzdENoaWxkKTsKICAgIH0gZWxzZSB7CiAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpOwogICAgfQogIH0gZWxzZSB7CiAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTsKICB9CgogIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7CiAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7CiAgfSBlbHNlIHsKICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpOwogIH0KfQoKdmFyIGNzcyA9ICIuc3R5bGVzX292ZXJsYXlfX0NMU3EtIHtcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjc1KTtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbiAgbGVmdDogMDtcbiAgcmlnaHQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgb3ZlcmZsb3cteTogYXV0bztcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICB6LWluZGV4OiAxMDAwO1xuICBwYWRkaW5nOiAxLjJyZW07XG59XG4uc3R5bGVzX292ZXJsYXlDZW50ZXJfX1lIb083IHtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cbi5zdHlsZXNfbW9kYWxfX2dOd3ZEIHtcbiAgbWF4LXdpZHRoOiA4MDBweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiAxLjJyZW07XG4gIGJhY2tncm91bmQ6ICNmZmZmZmY7XG4gIGJhY2tncm91bmQtY2xpcDogcGFkZGluZy1ib3g7XG4gIGJveC1zaGFkb3c6IDAgMTJweCAxNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjI1KTtcbn1cbi5zdHlsZXNfY2xvc2VCdXR0b25fXzIwSUQ0IHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDE0cHg7XG4gIHJpZ2h0OiAxNHB4O1xuICBib3JkZXI6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICBkaXNwbGF5OiBmbGV4O1xufVxuLnN0eWxlc19jbG9zZUljb25fXzFRd2JJIHtcbn1cbi5zdHlsZXNfdHJhbnNpdGlvbkVudGVyX18zal8tYSB7XG4gIG9wYWNpdHk6IDAuMDE7XG59XG4uc3R5bGVzX3RyYW5zaXRpb25FbnRlckFjdGl2ZV9fX2VRczcge1xuICBvcGFjaXR5OiAxO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGN1YmljLWJlemllcigwLjIzLCAxLCAwLjMyLCAxKTtcbn1cbi5zdHlsZXNfdHJhbnNpdGlvbkV4aXRfXzFLbUVmIHtcbiAgb3BhY2l0eTogMTtcbn1cbi5zdHlsZXNfdHJhbnNpdGlvbkV4aXRBY3RpdmVfXzFuUVh3IHtcbiAgb3BhY2l0eTogMC4wMTtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSA1MDBtcyBjdWJpYy1iZXppZXIoMC4yMywgMSwgMC4zMiwgMSk7XG59XG4iOwp2YXIgY3NzQ2xhc3NlcyA9IHsgIm92ZXJsYXkiOiAic3R5bGVzX292ZXJsYXlfX0NMU3EtIiwgIm92ZXJsYXlDZW50ZXIiOiAic3R5bGVzX292ZXJsYXlDZW50ZXJfX1lIb083IiwgIm1vZGFsIjogInN0eWxlc19tb2RhbF9fZ053dkQiLCAiY2xvc2VCdXR0b24iOiAic3R5bGVzX2Nsb3NlQnV0dG9uX18yMElENCIsICJjbG9zZUljb24iOiAic3R5bGVzX2Nsb3NlSWNvbl9fMVF3YkkiLCAidHJhbnNpdGlvbkVudGVyIjogInN0eWxlc190cmFuc2l0aW9uRW50ZXJfXzNqXy1hIiwgInRyYW5zaXRpb25FbnRlckFjdGl2ZSI6ICJzdHlsZXNfdHJhbnNpdGlvbkVudGVyQWN0aXZlX19fZVFzNyIsICJ0cmFuc2l0aW9uRXhpdCI6ICJzdHlsZXNfdHJhbnNpdGlvbkV4aXRfXzFLbUVmIiwgInRyYW5zaXRpb25FeGl0QWN0aXZlIjogInN0eWxlc190cmFuc2l0aW9uRXhpdEFjdGl2ZV9fMW5RWHciIH07CnN0eWxlSW5qZWN0KGNzcywgeyAiaW5zZXJ0QXQiOiAidG9wIiB9KTsKCnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpID8gY2FsbCA6IHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9Cgp2YXIgTW9kYWwgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkgewogIF9pbmhlcml0cyhNb2RhbCwgX0NvbXBvbmVudCk7CgogIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3sKICAgIGtleTogJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcycsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7CiAgICAgIGlmICghcHJldlN0YXRlLnNob3dQb3J0YWwgJiYgbmV4dFByb3BzLm9wZW4pIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgc2hvd1BvcnRhbDogdHJ1ZQogICAgICAgIH07CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9CiAgfV0pOwoKICBmdW5jdGlvbiBNb2RhbChwcm9wcykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsKTsKCiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoTW9kYWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihNb2RhbCkpLmNhbGwodGhpcywgcHJvcHMpKTsKCiAgICBfdGhpcy5oYW5kbGVPcGVuID0gZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5ibG9ja1Njcm9sbCgpOwogICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX3RoaXMuaGFuZGxlS2V5ZG93bik7CiAgICB9OwoKICAgIF90aGlzLmhhbmRsZUNsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy51bmJsb2NrU2Nyb2xsKCk7CiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVLZXlkb3duKTsKICAgIH07CgogICAgX3RoaXMuaGFuZGxlQ2xpY2tPdmVybGF5ID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIGlmIChfdGhpcy5zaG91bGRDbG9zZSA9PT0gbnVsbCkgewogICAgICAgIF90aGlzLnNob3VsZENsb3NlID0gdHJ1ZTsKICAgICAgfQoKICAgICAgaWYgKCFfdGhpcy5zaG91bGRDbG9zZSkgewogICAgICAgIF90aGlzLnNob3VsZENsb3NlID0gbnVsbDsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbk92ZXJsYXlDbGljaykgewogICAgICAgIF90aGlzLnByb3BzLm9uT3ZlcmxheUNsaWNrKGV2ZW50KTsKICAgICAgfQoKICAgICAgaWYgKF90aGlzLnByb3BzLmNsb3NlT25PdmVybGF5Q2xpY2spIHsKICAgICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGV2ZW50KTsKICAgICAgfQoKICAgICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBudWxsOwogICAgfTsKCiAgICBfdGhpcy5oYW5kbGVDbGlja0Nsb3NlSWNvbiA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICBfdGhpcy5wcm9wcy5vbkNsb3NlKGV2ZW50KTsKICAgIH07CgogICAgX3RoaXMuaGFuZGxlS2V5ZG93biA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoZXZlbnQua2V5Q29kZSAhPT0gMjcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVzY0tleURvd24pIHsKICAgICAgICBfdGhpcy5wcm9wcy5vbkVzY0tleURvd24oZXZlbnQpOwogICAgICB9CgogICAgICBpZiAoX3RoaXMucHJvcHMuY2xvc2VPbkVzYykgewogICAgICAgIF90aGlzLnByb3BzLm9uQ2xvc2UoZXZlbnQpOwogICAgICB9CiAgICB9OwoKICAgIF90aGlzLmhhbmRsZU1vZGFsRXZlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzLnNob3VsZENsb3NlID0gZmFsc2U7CiAgICB9OwoKICAgIF90aGlzLmhhbmRsZUVudGVyZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyZWQpIHsKICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyZWQoKTsKICAgICAgfQogICAgfTsKCiAgICBfdGhpcy5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRlZCkgewogICAgICAgIF90aGlzLnByb3BzLm9uRXhpdGVkKCk7CiAgICAgIH0KCiAgICAgIF90aGlzLnNldFN0YXRlKHsgc2hvd1BvcnRhbDogZmFsc2UgfSk7CiAgICAgIF90aGlzLnVuYmxvY2tTY3JvbGwoKTsKICAgIH07CgogICAgX3RoaXMudW5ibG9ja1Njcm9sbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIG9wZW5lZE1vZGFscyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoX3RoaXMucHJvcHMuY2xhc3Nlcy5tb2RhbCk7CiAgICAgIGlmIChvcGVuZWRNb2RhbHMubGVuZ3RoID09PSAxKSB7CiAgICAgICAgbm9fc2Nyb2xsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19fZGVmYXVsdC5hLm9mZigpOwogICAgICB9CiAgICB9OwoKICAgIF90aGlzLnN0YXRlID0gewogICAgICBzaG93UG9ydGFsOiBwcm9wcy5vcGVuCiAgICB9OwogICAgX3RoaXMuc2hvdWxkQ2xvc2UgPSBudWxsOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgX2NyZWF0ZUNsYXNzKE1vZGFsLCBbewogICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgICAvLyBCbG9jayBzY3JvbGwgd2hlbiBpbml0aWFsIHByb3AgaXMgb3BlbgogICAgICBpZiAodGhpcy5wcm9wcy5vcGVuKSB7CiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkgewogICAgICBpZiAocHJldlN0YXRlLnNob3dQb3J0YWwgJiYgIXRoaXMuc3RhdGUuc2hvd1BvcnRhbCkgewogICAgICAgIHRoaXMuaGFuZGxlQ2xvc2UoKTsKICAgICAgfSBlbHNlIGlmICghcHJldlByb3BzLm9wZW4gJiYgdGhpcy5wcm9wcy5vcGVuKSB7CiAgICAgICAgdGhpcy5oYW5kbGVPcGVuKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICAgIGlmICh0aGlzLnByb3BzLm9wZW4pIHsKICAgICAgICB0aGlzLmhhbmRsZUNsb3NlKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICdibG9ja1Njcm9sbCcsCgoKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjbGFzcy1tZXRob2RzLXVzZS10aGlzCiAgICB2YWx1ZTogZnVuY3Rpb24gYmxvY2tTY3JvbGwoKSB7CiAgICAgIG5vX3Njcm9sbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fX2RlZmF1bHQuYS5vbigpOwogICAgfQogIH0sIHsKICAgIGtleTogJ3JlbmRlcicsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcywKICAgICAgICAgIG9wZW4gPSBfcHJvcHMub3BlbiwKICAgICAgICAgIGNlbnRlciA9IF9wcm9wcy5jZW50ZXIsCiAgICAgICAgICBjbGFzc2VzID0gX3Byb3BzLmNsYXNzZXMsCiAgICAgICAgICBjbGFzc05hbWVzID0gX3Byb3BzLmNsYXNzTmFtZXMsCiAgICAgICAgICBzdHlsZXMgPSBfcHJvcHMuc3R5bGVzLAogICAgICAgICAgc2hvd0Nsb3NlSWNvbiA9IF9wcm9wcy5zaG93Q2xvc2VJY29uLAogICAgICAgICAgY2xvc2VJY29uU2l6ZSA9IF9wcm9wcy5jbG9zZUljb25TaXplLAogICAgICAgICAgY2xvc2VJY29uU3ZnUGF0aCA9IF9wcm9wcy5jbG9zZUljb25TdmdQYXRoLAogICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb24gPSBfcHJvcHMuYW5pbWF0aW9uRHVyYXRpb247CiAgICAgIHZhciBzaG93UG9ydGFsID0gdGhpcy5zdGF0ZS5zaG93UG9ydGFsOwoKCiAgICAgIGlmICghc2hvd1BvcnRhbCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICByZXR1cm4gcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0LmEuY3JlYXRlRWxlbWVudCgKICAgICAgICByZWFjdF9taW5pbWFsaXN0X3BvcnRhbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQuYSwKICAgICAgICBudWxsLAogICAgICAgIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoCiAgICAgICAgICByZWFjdF90cmFuc2l0aW9uX2dyb3VwX0NTU1RyYW5zaXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfX19kZWZhdWx0LmEsCiAgICAgICAgICB7CiAgICAgICAgICAgICdpbic6IG9wZW4sCiAgICAgICAgICAgIGFwcGVhcjogdHJ1ZSwKICAgICAgICAgICAgY2xhc3NOYW1lczogewogICAgICAgICAgICAgIGFwcGVhcjogY2xhc3NOYW1lcy50cmFuc2l0aW9uRW50ZXIgfHwgY2xhc3Nlcy50cmFuc2l0aW9uRW50ZXIsCiAgICAgICAgICAgICAgYXBwZWFyQWN0aXZlOiBjbGFzc05hbWVzLnRyYW5zaXRpb25FbnRlckFjdGl2ZSB8fCBjbGFzc2VzLnRyYW5zaXRpb25FbnRlckFjdGl2ZSwKICAgICAgICAgICAgICBlbnRlcjogY2xhc3NOYW1lcy50cmFuc2l0aW9uRW50ZXIgfHwgY2xhc3Nlcy50cmFuc2l0aW9uRW50ZXIsCiAgICAgICAgICAgICAgZW50ZXJBY3RpdmU6IGNsYXNzTmFtZXMudHJhbnNpdGlvbkVudGVyQWN0aXZlIHx8IGNsYXNzZXMudHJhbnNpdGlvbkVudGVyQWN0aXZlLAogICAgICAgICAgICAgIGV4aXQ6IGNsYXNzTmFtZXMudHJhbnNpdGlvbkV4aXQgfHwgY2xhc3Nlcy50cmFuc2l0aW9uRXhpdCwKICAgICAgICAgICAgICBleGl0QWN0aXZlOiBjbGFzc05hbWVzLnRyYW5zaXRpb25FeGl0QWN0aXZlIHx8IGNsYXNzZXMudHJhbnNpdGlvbkV4aXRBY3RpdmUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGltZW91dDogYW5pbWF0aW9uRHVyYXRpb24sCiAgICAgICAgICAgIG9uRW50ZXJlZDogdGhpcy5oYW5kbGVFbnRlcmVkLAogICAgICAgICAgICBvbkV4aXRlZDogdGhpcy5oYW5kbGVFeGl0ZWQKICAgICAgICAgIH0sCiAgICAgICAgICByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KAogICAgICAgICAgICAnZGl2JywKICAgICAgICAgICAgewogICAgICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NuYW1lc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQoKShjbGFzc2VzLm92ZXJsYXksIGNlbnRlciA/IGNsYXNzZXMub3ZlcmxheUNlbnRlciA6IG51bGwsIGNsYXNzTmFtZXMub3ZlcmxheSksCiAgICAgICAgICAgICAgb25DbGljazogdGhpcy5oYW5kbGVDbGlja092ZXJsYXksCiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5vdmVybGF5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoCiAgICAgICAgICAgICAgJ2RpdicsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc25hbWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19fZGVmYXVsdCgpKGNsYXNzZXMubW9kYWwsIGNsYXNzTmFtZXMubW9kYWwpLAogICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy5tb2RhbCwKICAgICAgICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZU1vZGFsRXZlbnQsCiAgICAgICAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlTW9kYWxFdmVudCwKICAgICAgICAgICAgICAgIG9uQ2xpY2s6IHRoaXMuaGFuZGxlTW9kYWxFdmVudAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiwKICAgICAgICAgICAgICBzaG93Q2xvc2VJY29uICYmIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdC5hLmNyZWF0ZUVsZW1lbnQoQ2xvc2VJY29uLCB7CiAgICAgICAgICAgICAgICBjbGFzc2VzOiBjbGFzc2VzLAogICAgICAgICAgICAgICAgY2xhc3NOYW1lczogY2xhc3NOYW1lcywKICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLAogICAgICAgICAgICAgICAgY2xvc2VJY29uU2l6ZTogY2xvc2VJY29uU2l6ZSwKICAgICAgICAgICAgICAgIGNsb3NlSWNvblN2Z1BhdGg6IGNsb3NlSWNvblN2Z1BhdGgsCiAgICAgICAgICAgICAgICBvbkNsaWNrQ2xvc2VJY29uOiB0aGlzLmhhbmRsZUNsaWNrQ2xvc2VJY29uCiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgKQogICAgICAgICAgKQogICAgICAgICkKICAgICAgKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBNb2RhbDsKfShyZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJDb21wb25lbnQiXSk7CgpNb2RhbC5wcm9wVHlwZXMgPSB7CiAgLyoqCiAgICogSXMgdGhlIG1vZGFsIGNsb3NhYmxlIHdoZW4gdXNlciBwcmVzcyBlc2Mga2V5LgogICAqLwogIGNsb3NlT25Fc2M6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEuYm9vbCwKICAvKioKICAgKiBJcyB0aGUgbW9kYWwgY2xvc2FibGUgd2hlbiB1c2VyIGNsaWNrIG9uIG92ZXJsYXkuCiAgICovCiAgY2xvc2VPbk92ZXJsYXlDbGljazogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5ib29sLAogIC8qKgogICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1vZGFsIGlzIG9wZW4gYW5kIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQuCiAgICovCiAgb25FbnRlcmVkOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmZ1bmMsCiAgLyoqCiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgTW9kYWwgaGFzIGV4aXRlZCBhbmQgdGhlIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC4KICAgKi8KICBvbkV4aXRlZDogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5mdW5jLAogIC8qKgogICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIE1vZGFsIGlzIHJlcXVlc3RlZCB0byBiZSBjbG9zZWQgYnkgYSBjbGljayBvbiB0aGUgb3ZlcmxheSBvciB3aGVuIHVzZXIgcHJlc3MgZXNjIGtleS4KICAgKi8KICBvbkNsb3NlOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmZ1bmMuaXNSZXF1aXJlZCwKICAvKioKICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBlc2NhcGUga2V5IGlzIHByZXNzZWQuCiAgICovCiAgb25Fc2NLZXlEb3duOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmZ1bmMsCiAgLyoqCiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgb3ZlcmxheSBpcyBjbGlja2VkLgogICAqLwogIG9uT3ZlcmxheUNsaWNrOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmZ1bmMsCiAgLyoqCiAgICogQ29udHJvbCBpZiB0aGUgbW9kYWwgaXMgb3BlbiBvciBub3QuCiAgICovCiAgb3BlbjogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5ib29sLmlzUmVxdWlyZWQsCiAgLyoqCiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgY2xhc3NOYW1lcyB0byBzdHlsZSB0aGUgbW9kYWwsIGNhbiBoYXZlIHByb3BlcnRpZXMgJ292ZXJsYXknIChjbGFzc25hbWUgZm9yIG92ZXJsYXkgZGl2KSwgJ21vZGFsJyAoY2xhc3NuYW1lIGZvciBtb2RhbCBjb250ZW50IGRpdiksICdjbG9zZUJ1dHRvbicgKGNsYXNzbmFtZSBmb3IgdGhlIGJ1dHRvbiB0aGF0IGNvbnRhaW4gdGhlIGNsb3NlIGljb24pLCAnY2xvc2VJY29uJyAoY2xhc3NuYW1lIGZvciBjbG9zZSBpY29uIHN2ZykuIFlvdSBjYW4gY3VzdG9taXplIHRoZSB0cmFuc2l0aW9uIHdpdGggJ3RyYW5zaXRpb25FbnRlcicsICd0cmFuc2l0aW9uRW50ZXJBY3RpdmUnLCAndHJhbnNpdGlvbkV4aXQnLCAndHJhbnNpdGlvbkV4aXRBY3RpdmUnCiAgICovCiAgY2xhc3NOYW1lczogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5vYmplY3QsCiAgLyoqCiAgICogQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHN0eWxlcyBvYmplY3RzIHRvIHN0eWxlIHRoZSBtb2RhbCwgY2FuIGhhdmUgcHJvcGVydGllcyAnb3ZlcmxheScsICdtb2RhbCcsICdjbG9zZUJ1dHRvbicsICdjbG9zZUljb24nLgogICAqLwogIHN0eWxlczogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5vYmplY3QsCiAgLyoqCiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1vZGFsLgogICAqLwogIGNoaWxkcmVuOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm5vZGUsCiAgLyoqCiAgICogQGludGVybmFsCiAgICovCiAgY2xhc3NlczogcHJvcF90eXBlc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fX2RlZmF1bHQuYS5vYmplY3QsCiAgLyoqCiAgICogSXMgdGhlIGRpYWxvZyBjZW50ZXJlZCAoKip3aGVuIHlvdSBkb24ndCBoYXZlIGEgbG90IG9mIGNvbnRlbnQqKikuCiAgICovCiAgY2VudGVyOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmJvb2wsCiAgLyoqCiAgICogU2hvdyB0aGUgY2xvc2UgaWNvbi4KICAgKi8KICBzaG93Q2xvc2VJY29uOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLmJvb2wsCiAgLyoqCiAgICogQ2xvc2UgaWNvbiBzaXplLgogICAqLwogIGNsb3NlSWNvblNpemU6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEubnVtYmVyLAogIC8qKgogICAqIEEgdmFsaWQgc3ZnIHBhdGggdG8gc2hvdyBhcyBpY29uLgogICAqLwogIGNsb3NlSWNvblN2Z1BhdGg6IHByb3BfdHlwZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX19kZWZhdWx0LmEubm9kZSwKICAvKioKICAgKiBBbmltYXRpb24gZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzLgogICAqLwogIGFuaW1hdGlvbkR1cmF0aW9uOiBwcm9wX3R5cGVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdC5hLm51bWJlcgp9OwoKTW9kYWwuZGVmYXVsdFByb3BzID0gewogIGNsYXNzZXM6IGNzc0NsYXNzZXMsCiAgY2xvc2VPbkVzYzogdHJ1ZSwKICBjbG9zZU9uT3ZlcmxheUNsaWNrOiB0cnVlLAogIG9uRW50ZXJlZDogbnVsbCwKICBvbkV4aXRlZDogbnVsbCwKICBvbkVzY0tleURvd246IG51bGwsCiAgb25PdmVybGF5Q2xpY2s6IG51bGwsCiAgc2hvd0Nsb3NlSWNvbjogdHJ1ZSwKICBjbG9zZUljb25TaXplOiAyOCwKICBjbG9zZUljb25TdmdQYXRoOiByZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQuYS5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTI4LjUgOS42MkwyNi4zOCA3LjUgMTggMTUuODggOS42MiA3LjUgNy41IDkuNjIgMTUuODggMTggNy41IDI2LjM4bDIuMTIgMi4xMkwxOCAyMC4xMmw4LjM4IDguMzggMi4xMi0yLjEyTDIwLjEyIDE4eicgfSksCiAgY2xhc3NOYW1lczoge30sCiAgc3R5bGVzOiB7fSwKICBjaGlsZHJlbjogbnVsbCwKICBjZW50ZXI6IGZhbHNlLAogIGFuaW1hdGlvbkR1cmF0aW9uOiA1MDAKfTsKCk9iamVjdChyZWFjdF9saWZlY3ljbGVzX2NvbXBhdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fWyJwb2x5ZmlsbCJdKShNb2RhbCk7CgovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIF9fd2VicGFja19leHBvcnRzX19bImRlZmF1bHQiXSA9IChNb2RhbCk7CgoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9DU1NUcmFuc2l0aW9uLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvQ1NTVHJhbnNpdGlvbi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7Cgp2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OwoKdmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9wLXR5cGVzICovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIik7Cgp2YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3Byb3BUeXBlcyk7Cgp2YXIgX2FkZENsYXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgZG9tLWhlbHBlcnMvY2xhc3MvYWRkQ2xhc3MgKi8gIi4vbm9kZV9tb2R1bGVzL2RvbS1oZWxwZXJzL2NsYXNzL2FkZENsYXNzLmpzIik7Cgp2YXIgX2FkZENsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZENsYXNzKTsKCnZhciBfcmVtb3ZlQ2xhc3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBkb20taGVscGVycy9jbGFzcy9yZW1vdmVDbGFzcyAqLyAiLi9ub2RlX21vZHVsZXMvZG9tLWhlbHBlcnMvY2xhc3MvcmVtb3ZlQ2xhc3MuanMiKTsKCnZhciBfcmVtb3ZlQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVtb3ZlQ2xhc3MpOwoKdmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpOwoKdmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7Cgp2YXIgX1RyYW5zaXRpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1RyYW5zaXRpb24gKi8gIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyIpOwoKdmFyIF9UcmFuc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RyYW5zaXRpb24pOwoKdmFyIF9Qcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL1Byb3BUeXBlcyAqLyAiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMiKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpID8gY2FsbCA6IHNlbGY7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9Cgp2YXIgYWRkQ2xhc3MgPSBmdW5jdGlvbiBhZGRDbGFzcyhub2RlLCBjbGFzc2VzKSB7CiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgcmV0dXJuICgwLCBfYWRkQ2xhc3MyLmRlZmF1bHQpKG5vZGUsIGMpOwogIH0pOwp9Owp2YXIgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc2VzKSB7CiAgcmV0dXJuIG5vZGUgJiYgY2xhc3NlcyAmJiBjbGFzc2VzLnNwbGl0KCcgJykuZm9yRWFjaChmdW5jdGlvbiAoYykgewogICAgcmV0dXJuICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKG5vZGUsIGMpOwogIH0pOwp9OwoKdmFyIHByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBfVHJhbnNpdGlvbjIuZGVmYXVsdC5wcm9wVHlwZXMsIHsKCiAgLyoqCiAgICogVGhlIGFuaW1hdGlvbiBjbGFzc05hbWVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudCBhcyBpdCBlbnRlcnMsIGV4aXRzIG9yIGhhcyBmaW5pc2hlZCB0aGUgdHJhbnNpdGlvbi4KICAgKiBBIHNpbmdsZSBuYW1lIGNhbiBiZSBwcm92aWRlZCBhbmQgaXQgd2lsbCBiZSBzdWZmaXhlZCBmb3IgZWFjaCBzdGFnZTogZS5nLgogICAqCiAgICogYGNsYXNzTmFtZXM9ImZhZGUiYCBhcHBsaWVzIGBmYWRlLWVudGVyYCwgYGZhZGUtZW50ZXItYWN0aXZlYCwgYGZhZGUtZW50ZXItZG9uZWAsCiAgICogYGZhZGUtZXhpdGAsIGBmYWRlLWV4aXQtYWN0aXZlYCwgYGZhZGUtZXhpdC1kb25lYCwgYGZhZGUtYXBwZWFyYCwgYW5kIGBmYWRlLWFwcGVhci1hY3RpdmVgLgogICAqIEVhY2ggaW5kaXZpZHVhbCBjbGFzc05hbWVzIGNhbiBhbHNvIGJlIHNwZWNpZmllZCBpbmRlcGVuZGVudGx5IGxpa2U6CiAgICoKICAgKiBgYGBqcwogICAqIGNsYXNzTmFtZXM9e3sKICAgKiAgYXBwZWFyOiAnbXktYXBwZWFyJywKICAgKiAgYXBwZWFyQWN0aXZlOiAnbXktYWN0aXZlLWFwcGVhcicsCiAgICogIGVudGVyOiAnbXktZW50ZXInLAogICAqICBlbnRlckFjdGl2ZTogJ215LWFjdGl2ZS1lbnRlcicsCiAgICogIGVudGVyRG9uZTogJ215LWRvbmUtZW50ZXInLAogICAqICBleGl0OiAnbXktZXhpdCcsCiAgICogIGV4aXRBY3RpdmU6ICdteS1hY3RpdmUtZXhpdCcsCiAgICogIGV4aXREb25lOiAnbXktZG9uZS1leGl0JywKICAgKiB9fQogICAqIGBgYAogICAqCiAgICogQHR5cGUge3N0cmluZyB8IHsKICAgKiAgYXBwZWFyPzogc3RyaW5nLAogICAqICBhcHBlYXJBY3RpdmU/OiBzdHJpbmcsCiAgICogIGVudGVyPzogc3RyaW5nLAogICAqICBlbnRlckFjdGl2ZT86IHN0cmluZywKICAgKiAgZW50ZXJEb25lPzogc3RyaW5nLAogICAqICBleGl0Pzogc3RyaW5nLAogICAqICBleGl0QWN0aXZlPzogc3RyaW5nLAogICAqICBleGl0RG9uZT86IHN0cmluZywKICAgKiB9fQogICAqLwogIGNsYXNzTmFtZXM6IF9Qcm9wVHlwZXMuY2xhc3NOYW1lc1NoYXBlLAoKICAvKioKICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZW50ZXInIG9yICdhcHBlYXInIGNsYXNzIGlzCiAgICogYXBwbGllZC4KICAgKgogICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkKICAgKi8KICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYywKCiAgLyoqCiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyLWFjdGl2ZScgb3IKICAgKiAnYXBwZWFyLWFjdGl2ZScgY2xhc3MgaXMgYXBwbGllZC4KICAgKgogICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkKICAgKi8KICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYywKCiAgLyoqCiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2VudGVyJyBvcgogICAqICdhcHBlYXInIGNsYXNzZXMgYXJlICoqcmVtb3ZlZCoqIGFuZCB0aGUgYGRvbmVgIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBET00gbm9kZS4KICAgKgogICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkKICAgKi8KICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLAoKICAvKioKICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3MgaXMKICAgKiBhcHBsaWVkLgogICAqCiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpCiAgICovCiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYywKCiAgLyoqCiAgICogQSBgPFRyYW5zaXRpb24+YCBjYWxsYmFjayBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgJ2V4aXQtYWN0aXZlJyBpcyBhcHBsaWVkLgogICAqCiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQKICAgKi8KICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLAoKICAvKioKICAgKiBBIGA8VHJhbnNpdGlvbj5gIGNhbGxiYWNrIGZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSAnZXhpdCcgY2xhc3NlcwogICAqIGFyZSAqKnJlbW92ZWQqKiBhbmQgdGhlIGBleGl0LWRvbmVgIGNsYXNzIGlzIGFkZGVkIHRvIHRoZSBET00gbm9kZS4KICAgKgogICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KQogICAqLwogIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYwp9KTsKCi8qKgogKiBBIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgdXNpbmcgQ1NTIHRyYW5zaXRpb25zIGFuZCBhbmltYXRpb25zLgogKiBJdCdzIGluc3BpcmVkIGJ5IHRoZSBleGNlbGxlbnQgW25nLWFuaW1hdGVdKGh0dHA6Ly93d3cubmdhbmltYXRlLm9yZy8pIGxpYnJhcnkuCiAqCiAqIGBDU1NUcmFuc2l0aW9uYCBhcHBsaWVzIGEgcGFpciBvZiBjbGFzcyBuYW1lcyBkdXJpbmcgdGhlIGBhcHBlYXJgLCBgZW50ZXJgLAogKiBhbmQgYGV4aXRgIHN0YWdlcyBvZiB0aGUgdHJhbnNpdGlvbi4gVGhlIGZpcnN0IGNsYXNzIGlzIGFwcGxpZWQgYW5kIHRoZW4gYQogKiBzZWNvbmQgImFjdGl2ZSIgY2xhc3MgaW4gb3JkZXIgdG8gYWN0aXZhdGUgdGhlIGNzcyBhbmltYXRpb24uIEFmdGVyIHRoZSBhbmltYXRpb24sCiAqIG1hdGNoaW5nIGBkb25lYCBjbGFzcyBuYW1lcyBhcmUgYXBwbGllZCB0byBwZXJzaXN0IHRoZSBhbmltYXRpb24gc3RhdGUuCiAqCiAqIFdoZW4gdGhlIGBpbmAgcHJvcCBpcyB0b2dnbGVkIHRvIGB0cnVlYCB0aGUgQ29tcG9uZW50IHdpbGwgZ2V0CiAqIHRoZSBgZXhhbXBsZS1lbnRlcmAgQ1NTIGNsYXNzIGFuZCB0aGUgYGV4YW1wbGUtZW50ZXItYWN0aXZlYCBDU1MgY2xhc3MKICogYWRkZWQgaW4gdGhlIG5leHQgdGljay4gVGhpcyBpcyBhIGNvbnZlbnRpb24gYmFzZWQgb24gdGhlIGBjbGFzc05hbWVzYCBwcm9wLgogKgogKiAjIyBFeGFtcGxlCiAqCiAqIDxpZnJhbWUgc3JjPSJodHRwczovL2NvZGVzYW5kYm94LmlvL2VtYmVkL203N2wydnAwMHg/Zm9udHNpemU9MTQiIHN0eWxlPSJ3aWR0aDoxMDAlOyBoZWlnaHQ6NTAwcHg7IGJvcmRlcjowOyBib3JkZXItcmFkaXVzOiA0cHg7IG92ZXJmbG93OmhpZGRlbjsiIHNhbmRib3g9ImFsbG93LW1vZGFscyBhbGxvdy1mb3JtcyBhbGxvdy1wb3B1cHMgYWxsb3ctc2NyaXB0cyBhbGxvdy1zYW1lLW9yaWdpbiI+PC9pZnJhbWU+CiAqLwoKdmFyIENTU1RyYW5zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkgewogIF9pbmhlcml0cyhDU1NUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gQ1NTVHJhbnNpdGlvbigpIHsKICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENTU1RyYW5zaXRpb24pOwoKICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm9uRW50ZXIgPSBmdW5jdGlvbiAobm9kZSwgYXBwZWFyaW5nKSB7CiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcyhhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpLAogICAgICAgICAgY2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lcy5jbGFzc05hbWU7CgogICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7CiAgICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7CgogICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcikgewogICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXIobm9kZSk7CiAgICAgIH0KICAgIH0sIF90aGlzLm9uRW50ZXJpbmcgPSBmdW5jdGlvbiAobm9kZSwgYXBwZWFyaW5nKSB7CiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzMiA9IF90aGlzLmdldENsYXNzTmFtZXMoYXBwZWFyaW5nID8gJ2FwcGVhcicgOiAnZW50ZXInKSwKICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXMyLmFjdGl2ZUNsYXNzTmFtZTsKCiAgICAgIF90aGlzLnJlZmxvd0FuZEFkZENsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7CgogICAgICBpZiAoX3RoaXMucHJvcHMub25FbnRlcmluZykgewogICAgICAgIF90aGlzLnByb3BzLm9uRW50ZXJpbmcobm9kZSk7CiAgICAgIH0KICAgIH0sIF90aGlzLm9uRW50ZXJlZCA9IGZ1bmN0aW9uIChub2RlLCBhcHBlYXJpbmcpIHsKICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXMzID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZW50ZXInKSwKICAgICAgICAgIGRvbmVDbGFzc05hbWUgPSBfdGhpcyRnZXRDbGFzc05hbWVzMy5kb25lQ2xhc3NOYW1lOwoKICAgICAgX3RoaXMucmVtb3ZlQ2xhc3Nlcyhub2RlLCBhcHBlYXJpbmcgPyAnYXBwZWFyJyA6ICdlbnRlcicpOwogICAgICBhZGRDbGFzcyhub2RlLCBkb25lQ2xhc3NOYW1lKTsKCiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkVudGVyZWQpIHsKICAgICAgICBfdGhpcy5wcm9wcy5vbkVudGVyZWQobm9kZSk7CiAgICAgIH0KICAgIH0sIF90aGlzLm9uRXhpdCA9IGZ1bmN0aW9uIChub2RlKSB7CiAgICAgIHZhciBfdGhpcyRnZXRDbGFzc05hbWVzNCA9IF90aGlzLmdldENsYXNzTmFtZXMoJ2V4aXQnKSwKICAgICAgICAgIGNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM0LmNsYXNzTmFtZTsKCiAgICAgIF90aGlzLnJlbW92ZUNsYXNzZXMobm9kZSwgJ2FwcGVhcicpOwogICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdlbnRlcicpOwogICAgICBhZGRDbGFzcyhub2RlLCBjbGFzc05hbWUpOwoKICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdCkgewogICAgICAgIF90aGlzLnByb3BzLm9uRXhpdChub2RlKTsKICAgICAgfQogICAgfSwgX3RoaXMub25FeGl0aW5nID0gZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM1ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLAogICAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3RoaXMkZ2V0Q2xhc3NOYW1lczUuYWN0aXZlQ2xhc3NOYW1lOwoKICAgICAgX3RoaXMucmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgYWN0aXZlQ2xhc3NOYW1lKTsKCiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkV4aXRpbmcpIHsKICAgICAgICBfdGhpcy5wcm9wcy5vbkV4aXRpbmcobm9kZSk7CiAgICAgIH0KICAgIH0sIF90aGlzLm9uRXhpdGVkID0gZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgdmFyIF90aGlzJGdldENsYXNzTmFtZXM2ID0gX3RoaXMuZ2V0Q2xhc3NOYW1lcygnZXhpdCcpLAogICAgICAgICAgZG9uZUNsYXNzTmFtZSA9IF90aGlzJGdldENsYXNzTmFtZXM2LmRvbmVDbGFzc05hbWU7CgogICAgICBfdGhpcy5yZW1vdmVDbGFzc2VzKG5vZGUsICdleGl0Jyk7CiAgICAgIGFkZENsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpOwoKICAgICAgaWYgKF90aGlzLnByb3BzLm9uRXhpdGVkKSB7CiAgICAgICAgX3RoaXMucHJvcHMub25FeGl0ZWQobm9kZSk7CiAgICAgIH0KICAgIH0sIF90aGlzLmdldENsYXNzTmFtZXMgPSBmdW5jdGlvbiAodHlwZSkgewogICAgICB2YXIgY2xhc3NOYW1lcyA9IF90aGlzLnByb3BzLmNsYXNzTmFtZXM7CgoKICAgICAgdmFyIGNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVzICE9PSAnc3RyaW5nJyA/IGNsYXNzTmFtZXNbdHlwZV0gOiBjbGFzc05hbWVzICsgJy0nICsgdHlwZTsKCiAgICAgIHZhciBhY3RpdmVDbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lcyAhPT0gJ3N0cmluZycgPyBjbGFzc05hbWVzW3R5cGUgKyAnQWN0aXZlJ10gOiBjbGFzc05hbWUgKyAnLWFjdGl2ZSc7CgogICAgICB2YXIgZG9uZUNsYXNzTmFtZSA9IHR5cGVvZiBjbGFzc05hbWVzICE9PSAnc3RyaW5nJyA/IGNsYXNzTmFtZXNbdHlwZSArICdEb25lJ10gOiBjbGFzc05hbWUgKyAnLWRvbmUnOwoKICAgICAgcmV0dXJuIHsKICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSwKICAgICAgICBhY3RpdmVDbGFzc05hbWU6IGFjdGl2ZUNsYXNzTmFtZSwKICAgICAgICBkb25lQ2xhc3NOYW1lOiBkb25lQ2xhc3NOYW1lCiAgICAgIH07CiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTsKICB9CgogIENTU1RyYW5zaXRpb24ucHJvdG90eXBlLnJlbW92ZUNsYXNzZXMgPSBmdW5jdGlvbiByZW1vdmVDbGFzc2VzKG5vZGUsIHR5cGUpIHsKICAgIHZhciBfZ2V0Q2xhc3NOYW1lcyA9IHRoaXMuZ2V0Q2xhc3NOYW1lcyh0eXBlKSwKICAgICAgICBjbGFzc05hbWUgPSBfZ2V0Q2xhc3NOYW1lcy5jbGFzc05hbWUsCiAgICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX2dldENsYXNzTmFtZXMuYWN0aXZlQ2xhc3NOYW1lLAogICAgICAgIGRvbmVDbGFzc05hbWUgPSBfZ2V0Q2xhc3NOYW1lcy5kb25lQ2xhc3NOYW1lOwoKICAgIGNsYXNzTmFtZSAmJiByZW1vdmVDbGFzcyhub2RlLCBjbGFzc05hbWUpOwogICAgYWN0aXZlQ2xhc3NOYW1lICYmIHJlbW92ZUNsYXNzKG5vZGUsIGFjdGl2ZUNsYXNzTmFtZSk7CiAgICBkb25lQ2xhc3NOYW1lICYmIHJlbW92ZUNsYXNzKG5vZGUsIGRvbmVDbGFzc05hbWUpOwogIH07CgogIENTU1RyYW5zaXRpb24ucHJvdG90eXBlLnJlZmxvd0FuZEFkZENsYXNzID0gZnVuY3Rpb24gcmVmbG93QW5kQWRkQ2xhc3Mobm9kZSwgY2xhc3NOYW1lKSB7CiAgICAvLyBUaGlzIGlzIGZvciB0byBmb3JjZSBhIHJlcGFpbnQsCiAgICAvLyB3aGljaCBpcyBuZWNlc3NhcnkgaW4gb3JkZXIgdG8gdHJhbnNpdGlvbiBzdHlsZXMgd2hlbiBhZGRpbmcgYSBjbGFzcyBuYW1lLgogICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovCiAgICBub2RlICYmIG5vZGUuc2Nyb2xsVG9wOwogICAgLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi8KICAgIGFkZENsYXNzKG5vZGUsIGNsYXNzTmFtZSk7CiAgfTsKCiAgQ1NTVHJhbnNpdGlvbi5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkgewogICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIHRoaXMucHJvcHMpOwoKICAgIGRlbGV0ZSBwcm9wcy5jbGFzc05hbWVzOwoKICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfVHJhbnNpdGlvbjIuZGVmYXVsdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7CiAgICAgIG9uRW50ZXI6IHRoaXMub25FbnRlciwKICAgICAgb25FbnRlcmVkOiB0aGlzLm9uRW50ZXJlZCwKICAgICAgb25FbnRlcmluZzogdGhpcy5vbkVudGVyaW5nLAogICAgICBvbkV4aXQ6IHRoaXMub25FeGl0LAogICAgICBvbkV4aXRpbmc6IHRoaXMub25FeGl0aW5nLAogICAgICBvbkV4aXRlZDogdGhpcy5vbkV4aXRlZAogICAgfSkpOwogIH07CgogIHJldHVybiBDU1NUcmFuc2l0aW9uOwp9KF9yZWFjdDIuZGVmYXVsdC5Db21wb25lbnQpOwoKQ1NTVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSAgdHJ1ZSA/IHByb3BUeXBlcyA6IHVuZGVmaW5lZDsKCmV4cG9ydHMuZGVmYXVsdCA9IENTU1RyYW5zaXRpb247Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9UcmFuc2l0aW9uLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7CmV4cG9ydHMuRVhJVElORyA9IGV4cG9ydHMuRU5URVJFRCA9IGV4cG9ydHMuRU5URVJJTkcgPSBleHBvcnRzLkVYSVRFRCA9IGV4cG9ydHMuVU5NT1VOVEVEID0gdW5kZWZpbmVkOwoKdmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBwcm9wLXR5cGVzICovICIuL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIik7Cgp2YXIgUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX3Byb3BUeXBlcyk7Cgp2YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gInJlYWN0Iik7Cgp2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTsKCnZhciBfcmVhY3REb20gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdC1kb20gKi8gInJlYWN0LWRvbSIpOwoKdmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7Cgp2YXIgX1Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvUHJvcFR5cGVzICovICIuL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL3V0aWxzL1Byb3BUeXBlcy5qcyIpOwoKZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9CgpmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob2JqLCBrZXlzKSB7IHZhciB0YXJnZXQgPSB7fTsgZm9yICh2YXIgaSBpbiBvYmopIHsgaWYgKGtleXMuaW5kZXhPZihpKSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBpKSkgY29udGludWU7IHRhcmdldFtpXSA9IG9ialtpXTsgfSByZXR1cm4gdGFyZ2V0OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikgPyBjYWxsIDogc2VsZjsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH0KCnZhciBVTk1PVU5URUQgPSBleHBvcnRzLlVOTU9VTlRFRCA9ICd1bm1vdW50ZWQnOwp2YXIgRVhJVEVEID0gZXhwb3J0cy5FWElURUQgPSAnZXhpdGVkJzsKdmFyIEVOVEVSSU5HID0gZXhwb3J0cy5FTlRFUklORyA9ICdlbnRlcmluZyc7CnZhciBFTlRFUkVEID0gZXhwb3J0cy5FTlRFUkVEID0gJ2VudGVyZWQnOwp2YXIgRVhJVElORyA9IGV4cG9ydHMuRVhJVElORyA9ICdleGl0aW5nJzsKCi8qKgogKiBUaGUgVHJhbnNpdGlvbiBjb21wb25lbnQgbGV0cyB5b3UgZGVzY3JpYmUgYSB0cmFuc2l0aW9uIGZyb20gb25lIGNvbXBvbmVudAogKiBzdGF0ZSB0byBhbm90aGVyIF9vdmVyIHRpbWVfIHdpdGggYSBzaW1wbGUgZGVjbGFyYXRpdmUgQVBJLiBNb3N0IGNvbW1vbmx5CiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvCiAqIGJlIHVzZWQgdG8gZGVzY3JpYmUgaW4tcGxhY2UgdHJhbnNpdGlvbiBzdGF0ZXMgYXMgd2VsbC4KICoKICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlCiAqIGNvbXBvbmVudCBpdCByZW5kZXJzLCBpdCBvbmx5IHRyYWNrcyAiZW50ZXIiIGFuZCAiZXhpdCIgc3RhdGVzIGZvciB0aGUgY29tcG9uZW50cy4KICogSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3IgZXhhbXBsZSB3ZSBjYW4KICogYWRkIHN0eWxlcyB0byBhIGNvbXBvbmVudCB3aGVuIGl0IGVudGVycyBvciBleGl0czoKICoKICogYGBganN4CiAqIGltcG9ydCBUcmFuc2l0aW9uIGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvVHJhbnNpdGlvbic7CiAqCiAqIGNvbnN0IGR1cmF0aW9uID0gMzAwOwogKgogKiBjb25zdCBkZWZhdWx0U3R5bGUgPSB7CiAqICAgdHJhbnNpdGlvbjogYG9wYWNpdHkgJHtkdXJhdGlvbn1tcyBlYXNlLWluLW91dGAsCiAqICAgb3BhY2l0eTogMCwKICogfQogKgogKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0gewogKiAgIGVudGVyaW5nOiB7IG9wYWNpdHk6IDAgfSwKICogICBlbnRlcmVkOiAgeyBvcGFjaXR5OiAxIH0sCiAqIH07CiAqCiAqIGNvbnN0IEZhZGUgPSAoeyBpbjogaW5Qcm9wIH0pID0+ICgKICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+CiAqICAgICB7KHN0YXRlKSA9PiAoCiAqICAgICAgIDxkaXYgc3R5bGU9e3sKICogICAgICAgICAuLi5kZWZhdWx0U3R5bGUsCiAqICAgICAgICAgLi4udHJhbnNpdGlvblN0eWxlc1tzdGF0ZV0KICogICAgICAgfX0+CiAqICAgICAgICAgSSdtIGEgZmFkZSBUcmFuc2l0aW9uIQogKiAgICAgICA8L2Rpdj4KICogICAgICl9CiAqICAgPC9UcmFuc2l0aW9uPgogKiApOwogKiBgYGAKICoKICogQXMgbm90ZWQgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgZG9lc24ndCBfZG9fIGFueXRoaW5nIGJ5IGl0c2VsZiB0byBpdHMgY2hpbGQgY29tcG9uZW50LgogKiBXaGF0IGl0IGRvZXMgZG8gaXMgdHJhY2sgdHJhbnNpdGlvbiBzdGF0ZXMgb3ZlciB0aW1lIHNvIHlvdSBjYW4gdXBkYXRlIHRoZQogKiBjb21wb25lbnQgKHN1Y2ggYXMgYnkgYWRkaW5nIHN0eWxlcyBvciBjbGFzc2VzKSB3aGVuIGl0IGNoYW5nZXMgc3RhdGVzLgogKgogKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOgogKiAgLSBgJ2VudGVyaW5nJ2AKICogIC0gYCdlbnRlcmVkJ2AKICogIC0gYCdleGl0aW5nJ2AKICogIC0gYCdleGl0ZWQnYAogKgogKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnQgYmVnaW5zIHRoZQogKiAiRW50ZXIiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb20gaXRzIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0ZSwKICogdG8gYCdlbnRlcmluZydgIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24gYW5kIHRoZW4gdG8gdGhlIGAnZW50ZXJlZCdgIHN0YWdlIG9uY2UKICogaXQncyBjb21wbGV0ZS4gTGV0J3MgdGFrZSB0aGUgZm9sbG93aW5nIGV4YW1wbGU6CiAqCiAqIGBgYGpzeAogKiBzdGF0ZSA9IHsgaW46IGZhbHNlIH07CiAqCiAqIHRvZ2dsZUVudGVyU3RhdGUgPSAoKSA9PiB7CiAqICAgdGhpcy5zZXRTdGF0ZSh7IGluOiB0cnVlIH0pOwogKiB9CiAqCiAqIHJlbmRlcigpIHsKICogICByZXR1cm4gKAogKiAgICAgPGRpdj4KICogICAgICAgPFRyYW5zaXRpb24gaW49e3RoaXMuc3RhdGUuaW59IHRpbWVvdXQ9ezUwMH0gLz4KICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnRvZ2dsZUVudGVyU3RhdGV9PkNsaWNrIHRvIEVudGVyPC9idXR0b24+CiAqICAgICA8L2Rpdj4KICogICApOwogKiB9CiAqIGBgYAogKgogKiBXaGVuIHRoZSBidXR0b24gaXMgY2xpY2tlZCB0aGUgY29tcG9uZW50IHdpbGwgc2hpZnQgdG8gdGhlIGAnZW50ZXJpbmcnYCBzdGF0ZSBhbmQKICogc3RheSB0aGVyZSBmb3IgNTAwbXMgKHRoZSBub2RlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXMgdG8gYCdlbnRlcmVkJ2AuCiAqCiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tIGAnZXhpdGluZydgIHRvIGAnZXhpdGVkJ2AuCiAqCiAqICMjIFRpbWluZwogKgogKiBUaW1pbmcgaXMgb2Z0ZW4gdGhlIHRyaWNraWVzdCBwYXJ0IG9mIGFuaW1hdGlvbiwgbWlzdGFrZXMgY2FuIHJlc3VsdCBpbiBzbGlnaHQgZGVsYXlzCiAqIHRoYXQgYXJlIGhhcmQgdG8gcGluIGRvd24uIEEgY29tbW9uIGV4YW1wbGUgaXMgd2hlbiB5b3Ugd2FudCB0byBhZGQgYW4gZXhpdCB0cmFuc2l0aW9uLAogKiB5b3Ugc2hvdWxkIHNldCB0aGUgZGVzaXJlZCBmaW5hbCBzdHlsZXMgd2hlbiB0aGUgc3RhdGUgaXMgYCdleGl0aW5nJ2AuIFRoYXQncyB3aGVuIHRoZQogKiB0cmFuc2l0aW9uIHRvIHRob3NlIHN0eWxlcyB3aWxsIHN0YXJ0IGFuZCwgaWYgeW91IG1hdGNoZWQgdGhlIGB0aW1lb3V0YCBwcm9wIHdpdGggdGhlCiAqIENTUyBUcmFuc2l0aW9uIGR1cmF0aW9uLCBpdCB3aWxsIGVuZCBleGFjdGx5IHdoZW4gdGhlIHN0YXRlIGNoYW5nZXMgdG8gYCdleGl0ZWQnYC4KICoKICogPiAqKk5vdGUqKjogRm9yIHNpbXBsZXIgdHJhbnNpdGlvbnMgdGhlIGBUcmFuc2l0aW9uYCBjb21wb25lbnQgbWlnaHQgYmUgZW5vdWdoLCBidXQKICogPiB0YWtlIGludG8gYWNjb3VudCB0aGF0IGl0J3MgcGxhdGZvcm0tYWdub3N0aWMsIHdoaWxlIHRoZSBgQ1NTVHJhbnNpdGlvbmAgY29tcG9uZW50CiAqID4gW2ZvcmNlcyByZWZsb3dzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvNTAwNzMwM2U3MjlhNzRiZTY2YTIxYzNlMjIwNWU0OTE2ODIxNTI0Yi9zcmMvQ1NTVHJhbnNpdGlvbi5qcyNMMjA4LUwyMTUpCiAqID4gaW4gb3JkZXIgdG8gbWFrZSBtb3JlIGNvbXBsZXggdHJhbnNpdGlvbnMgbW9yZSBwcmVkaWN0YWJsZS4gRm9yIGV4YW1wbGUsIGV2ZW4gdGhvdWdoCiAqID4gY2xhc3NlcyBgZXhhbXBsZS1lbnRlcmAgYW5kIGBleGFtcGxlLWVudGVyLWFjdGl2ZWAgYXJlIGFwcGxpZWQgaW1tZWRpYXRlbHkgb25lIGFmdGVyCiAqID4gYW5vdGhlciwgeW91IGNhbiBzdGlsbCB0cmFuc2l0aW9uIGZyb20gb25lIHRvIHRoZSBvdGhlciBiZWNhdXNlIG9mIHRoZSBmb3JjZWQgcmVmbG93CiAqID4gKHJlYWQgW3RoaXMgaXNzdWVdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvaXNzdWVzLzE1OSNpc3N1ZWNvbW1lbnQtMzIyNzYxMTcxKQogKiA+IGZvciBtb3JlIGluZm8pLiBUYWtlIHRoaXMgaW50byBhY2NvdW50IHdoZW4gY2hvb3NpbmcgYmV0d2VlbiBgVHJhbnNpdGlvbmAgYW5kCiAqID4gYENTU1RyYW5zaXRpb25gLgogKgogKiAjIyBFeGFtcGxlCiAqCiAqIDxpZnJhbWUgc3JjPSJodHRwczovL2NvZGVzYW5kYm94LmlvL2VtYmVkLzc0MW9wNG1tajA/Zm9udHNpemU9MTQiIHN0eWxlPSJ3aWR0aDoxMDAlOyBoZWlnaHQ6NTAwcHg7IGJvcmRlcjowOyBib3JkZXItcmFkaXVzOiA0cHg7IG92ZXJmbG93OmhpZGRlbjsiIHNhbmRib3g9ImFsbG93LW1vZGFscyBhbGxvdy1mb3JtcyBhbGxvdy1wb3B1cHMgYWxsb3ctc2NyaXB0cyBhbGxvdy1zYW1lLW9yaWdpbiI+PC9pZnJhbWU+CiAqCiAqLwoKdmFyIFRyYW5zaXRpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkgewogIF9pbmhlcml0cyhUcmFuc2l0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTsKCiAgZnVuY3Rpb24gVHJhbnNpdGlvbihwcm9wcywgY29udGV4dCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zaXRpb24pOwoKICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpOwoKICAgIHZhciBwYXJlbnRHcm91cCA9IGNvbnRleHQudHJhbnNpdGlvbkdyb3VwOwogICAgLy8gSW4gdGhlIGNvbnRleHQgb2YgYSBUcmFuc2l0aW9uR3JvdXAgYWxsIGVudGVycyBhcmUgcmVhbGx5IGFwcGVhcnMKICAgIHZhciBhcHBlYXIgPSBwYXJlbnRHcm91cCAmJiAhcGFyZW50R3JvdXAuaXNNb3VudGluZyA/IHByb3BzLmVudGVyIDogcHJvcHMuYXBwZWFyOwoKICAgIHZhciBpbml0aWFsU3RhdHVzID0gdm9pZCAwOwogICAgX3RoaXMubmV4dFN0YXR1cyA9IG51bGw7CgogICAgaWYgKHByb3BzLmluKSB7CiAgICAgIGlmIChhcHBlYXIpIHsKICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEOwogICAgICAgIF90aGlzLm5leHRTdGF0dXMgPSBFTlRFUklORzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbml0aWFsU3RhdHVzID0gRU5URVJFRDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKHByb3BzLnVubW91bnRPbkV4aXQgfHwgcHJvcHMubW91bnRPbkVudGVyKSB7CiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEOwogICAgICB9CiAgICB9CgogICAgX3RoaXMuc3RhdGUgPSB7IHN0YXR1czogaW5pdGlhbFN0YXR1cyB9OwoKICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7CiAgICByZXR1cm4gX3RoaXM7CiAgfQoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7CiAgICByZXR1cm4geyB0cmFuc2l0aW9uR3JvdXA6IG51bGwgfTsgLy8gYWxsb3dzIGZvciBuZXN0ZWQgVHJhbnNpdGlvbnMKICB9OwoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkgewogICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSk7CiAgfTsKCiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7CiAgICB2YXIgX3JlZiA9IHRoaXMucGVuZGluZ1N0YXRlIHx8IHRoaXMuc3RhdGUsCiAgICAgICAgc3RhdHVzID0gX3JlZi5zdGF0dXM7CgogICAgaWYgKG5leHRQcm9wcy5pbikgewogICAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHsKICAgICAgICB0aGlzLnNldFN0YXRlKHsgc3RhdHVzOiBFWElURUQgfSk7CiAgICAgIH0KICAgICAgaWYgKHN0YXR1cyAhPT0gRU5URVJJTkcgJiYgc3RhdHVzICE9PSBFTlRFUkVEKSB7CiAgICAgICAgdGhpcy5uZXh0U3RhdHVzID0gRU5URVJJTkc7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkgewogICAgICAgIHRoaXMubmV4dFN0YXR1cyA9IEVYSVRJTkc7CiAgICAgIH0KICAgIH0KICB9OwoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7CiAgICB0aGlzLnVwZGF0ZVN0YXR1cygpOwogIH07CgogIFRyYW5zaXRpb24ucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7CiAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpOwogIH07CgogIFRyYW5zaXRpb24ucHJvdG90eXBlLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7CiAgICB2YXIgdGltZW91dCA9IHRoaXMucHJvcHMudGltZW91dDsKCiAgICB2YXIgZXhpdCA9IHZvaWQgMCwKICAgICAgICBlbnRlciA9IHZvaWQgMCwKICAgICAgICBhcHBlYXIgPSB2b2lkIDA7CgogICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDsKCiAgICBpZiAodGltZW91dCAhPSBudWxsICYmIHR5cGVvZiB0aW1lb3V0ICE9PSAnbnVtYmVyJykgewogICAgICBleGl0ID0gdGltZW91dC5leGl0OwogICAgICBlbnRlciA9IHRpbWVvdXQuZW50ZXI7CiAgICAgIGFwcGVhciA9IHRpbWVvdXQuYXBwZWFyOwogICAgfQogICAgcmV0dXJuIHsgZXhpdDogZXhpdCwgZW50ZXI6IGVudGVyLCBhcHBlYXI6IGFwcGVhciB9OwogIH07CgogIFRyYW5zaXRpb24ucHJvdG90eXBlLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cygpIHsKICAgIHZhciBtb3VudGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7CgogICAgdmFyIG5leHRTdGF0dXMgPSB0aGlzLm5leHRTdGF0dXM7CgogICAgaWYgKG5leHRTdGF0dXMgIT09IG51bGwpIHsKICAgICAgdGhpcy5uZXh0U3RhdHVzID0gbnVsbDsKICAgICAgLy8gbmV4dFN0YXR1cyB3aWxsIGFsd2F5cyBiZSBFTlRFUklORyBvciBFWElUSU5HLgogICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpOwogICAgICB2YXIgbm9kZSA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTsKCiAgICAgIGlmIChuZXh0U3RhdHVzID09PSBFTlRFUklORykgewogICAgICAgIHRoaXMucGVyZm9ybUVudGVyKG5vZGUsIG1vdW50aW5nKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnBlcmZvcm1FeGl0KG5vZGUpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKHRoaXMucHJvcHMudW5tb3VudE9uRXhpdCAmJiB0aGlzLnN0YXRlLnN0YXR1cyA9PT0gRVhJVEVEKSB7CiAgICAgIHRoaXMuc2V0U3RhdGUoeyBzdGF0dXM6IFVOTU9VTlRFRCB9KTsKICAgIH0KICB9OwoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobm9kZSwgbW91bnRpbmcpIHsKICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7CgogICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dC50cmFuc2l0aW9uR3JvdXAgPyB0aGlzLmNvbnRleHQudHJhbnNpdGlvbkdyb3VwLmlzTW91bnRpbmcgOiBtb3VudGluZzsKCiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7CgogICAgLy8gbm8gZW50ZXIgYW5pbWF0aW9uIHNraXAgcmlnaHQgdG8gRU5URVJFRAogICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXQKICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyKSB7CiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFTlRFUkVEIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG5vZGUpOwogICAgICB9KTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHRoaXMucHJvcHMub25FbnRlcihub2RlLCBhcHBlYXJpbmcpOwoKICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFTlRFUklORyB9LCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyaW5nKG5vZGUsIGFwcGVhcmluZyk7CgogICAgICAvLyBGSVhNRTogYXBwZWFyIHRpbWVvdXQ/CiAgICAgIF90aGlzMi5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZW50ZXIsIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFTlRFUkVEIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMi5wcm9wcy5vbkVudGVyZWQobm9kZSwgYXBwZWFyaW5nKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KG5vZGUpIHsKICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgIHZhciBleGl0ID0gdGhpcy5wcm9wcy5leGl0OwoKICAgIHZhciB0aW1lb3V0cyA9IHRoaXMuZ2V0VGltZW91dHMoKTsKCiAgICAvLyBubyBleGl0IGFuaW1hdGlvbiBza2lwIHJpZ2h0IHRvIEVYSVRFRAogICAgaWYgKCFleGl0KSB7CiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElURUQgfSwgZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRlZChub2RlKTsKICAgICAgfSk7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHRoaXMucHJvcHMub25FeGl0KG5vZGUpOwoKICAgIHRoaXMuc2FmZVNldFN0YXRlKHsgc3RhdHVzOiBFWElUSU5HIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGluZyhub2RlKTsKCiAgICAgIF90aGlzMy5vblRyYW5zaXRpb25FbmQobm9kZSwgdGltZW91dHMuZXhpdCwgZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoeyBzdGF0dXM6IEVYSVRFRCB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobm9kZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkgewogICAgaWYgKHRoaXMubmV4dENhbGxiYWNrICE9PSBudWxsKSB7CiAgICAgIHRoaXMubmV4dENhbGxiYWNrLmNhbmNlbCgpOwogICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7CiAgICB9CiAgfTsKCiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuc2FmZVNldFN0YXRlID0gZnVuY3Rpb24gc2FmZVNldFN0YXRlKG5leHRTdGF0ZSwgY2FsbGJhY2spIHsKICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgIC8vIFdlIG5lZWQgdG8gdHJhY2sgcGVuZGluZyB1cGRhdGVzIGZvciBpbnN0YW5jZXMgd2hlcmUgYSBjV1JQIGZpcmVzIHF1aWNrbHkKICAgIC8vIGFmdGVyIGNETSBhbmQgYmVmb3JlIHRoZSBzdGF0ZSBmbHVzaGVzLCB3aGljaCB3b3VsZCBkb3VibGUgdHJpZ2dlciBhCiAgICAvLyB0cmFuc2l0aW9uCiAgICB0aGlzLnBlbmRpbmdTdGF0ZSA9IG5leHRTdGF0ZTsKCiAgICAvLyBUaGlzIHNob3VsZG4ndCBiZSBuZWNlc3NhcnksIGJ1dCB0aGVyZSBhcmUgd2VpcmQgcmFjZSBjb25kaXRpb25zIHdpdGgKICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXQKICAgIC8vIHdlIGNhbiBjYW5jZWwgYW55IHBlbmRpbmcgc2V0U3RhdGUgY2FsbGJhY2tzIGFmdGVyIHdlIHVubW91bnQuCiAgICBjYWxsYmFjayA9IHRoaXMuc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKTsKICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBmdW5jdGlvbiAoKSB7CiAgICAgIF90aGlzNC5wZW5kaW5nU3RhdGUgPSBudWxsOwogICAgICBjYWxsYmFjaygpOwogICAgfSk7CiAgfTsKCiAgVHJhbnNpdGlvbi5wcm90b3R5cGUuc2V0TmV4dENhbGxiYWNrID0gZnVuY3Rpb24gc2V0TmV4dENhbGxiYWNrKGNhbGxiYWNrKSB7CiAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICB2YXIgYWN0aXZlID0gdHJ1ZTsKCiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICBpZiAoYWN0aXZlKSB7CiAgICAgICAgYWN0aXZlID0gZmFsc2U7CiAgICAgICAgX3RoaXM1Lm5leHRDYWxsYmFjayA9IG51bGw7CgogICAgICAgIGNhbGxiYWNrKGV2ZW50KTsKICAgICAgfQogICAgfTsKCiAgICB0aGlzLm5leHRDYWxsYmFjay5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGFjdGl2ZSA9IGZhbHNlOwogICAgfTsKCiAgICByZXR1cm4gdGhpcy5uZXh0Q2FsbGJhY2s7CiAgfTsKCiAgVHJhbnNpdGlvbi5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKG5vZGUsIHRpbWVvdXQsIGhhbmRsZXIpIHsKICAgIHRoaXMuc2V0TmV4dENhbGxiYWNrKGhhbmRsZXIpOwoKICAgIGlmIChub2RlKSB7CiAgICAgIGlmICh0aGlzLnByb3BzLmFkZEVuZExpc3RlbmVyKSB7CiAgICAgICAgdGhpcy5wcm9wcy5hZGRFbmRMaXN0ZW5lcihub2RlLCB0aGlzLm5leHRDYWxsYmFjayk7CiAgICAgIH0KICAgICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkgewogICAgICAgIHNldFRpbWVvdXQodGhpcy5uZXh0Q2FsbGJhY2ssIHRpbWVvdXQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBzZXRUaW1lb3V0KHRoaXMubmV4dENhbGxiYWNrLCAwKTsKICAgIH0KICB9OwoKICBUcmFuc2l0aW9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICB2YXIgc3RhdHVzID0gdGhpcy5zdGF0ZS5zdGF0dXM7CiAgICBpZiAoc3RhdHVzID09PSBVTk1PVU5URUQpIHsKICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsCiAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sCiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnY2hpbGRyZW4nXSk7CiAgICAvLyBmaWx0ZXIgcHJvcHMgZm9yIFRyYW5zdGl0aW9uCgoKICAgIGRlbGV0ZSBjaGlsZFByb3BzLmluOwogICAgZGVsZXRlIGNoaWxkUHJvcHMubW91bnRPbkVudGVyOwogICAgZGVsZXRlIGNoaWxkUHJvcHMudW5tb3VudE9uRXhpdDsKICAgIGRlbGV0ZSBjaGlsZFByb3BzLmFwcGVhcjsKICAgIGRlbGV0ZSBjaGlsZFByb3BzLmVudGVyOwogICAgZGVsZXRlIGNoaWxkUHJvcHMuZXhpdDsKICAgIGRlbGV0ZSBjaGlsZFByb3BzLnRpbWVvdXQ7CiAgICBkZWxldGUgY2hpbGRQcm9wcy5hZGRFbmRMaXN0ZW5lcjsKICAgIGRlbGV0ZSBjaGlsZFByb3BzLm9uRW50ZXI7CiAgICBkZWxldGUgY2hpbGRQcm9wcy5vbkVudGVyaW5nOwogICAgZGVsZXRlIGNoaWxkUHJvcHMub25FbnRlcmVkOwogICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0OwogICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0aW5nOwogICAgZGVsZXRlIGNoaWxkUHJvcHMub25FeGl0ZWQ7CgogICAgaWYgKHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICByZXR1cm4gY2hpbGRyZW4oc3RhdHVzLCBjaGlsZFByb3BzKTsKICAgIH0KCiAgICB2YXIgY2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7CiAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgY2hpbGRQcm9wcyk7CiAgfTsKCiAgcmV0dXJuIFRyYW5zaXRpb247Cn0oX3JlYWN0Mi5kZWZhdWx0LkNvbXBvbmVudCk7CgpUcmFuc2l0aW9uLmNvbnRleHRUeXBlcyA9IHsKICB0cmFuc2l0aW9uR3JvdXA6IFByb3BUeXBlcy5vYmplY3QKfTsKVHJhbnNpdGlvbi5jaGlsZENvbnRleHRUeXBlcyA9IHsKICB0cmFuc2l0aW9uR3JvdXA6IGZ1bmN0aW9uIHRyYW5zaXRpb25Hcm91cCgpIHt9Cn07CgoKVHJhbnNpdGlvbi5wcm9wVHlwZXMgPSAgdHJ1ZSA/IHsKICAvKioKICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuCiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB0cmFuc2l0aW9uIHN0YXR1cwogICAqICgnZW50ZXJpbmcnLCAnZW50ZXJlZCcsICdleGl0aW5nJywgJ2V4aXRlZCcsICd1bm1vdW50ZWQnKSwgd2hpY2ggY2FuIGJlIHVzZWQKICAgKiB0byBhcHBseSBjb250ZXh0IHNwZWNpZmljIHByb3BzIHRvIGEgY29tcG9uZW50LgogICAqCiAgICogYGBganN4CiAgICogPFRyYW5zaXRpb24gdGltZW91dD17MTUwfT4KICAgKiAgIHsoc3RhdHVzKSA9PiAoCiAgICogICAgIDxNeUNvbXBvbmVudCBjbGFzc05hbWU9e2BmYWRlIGZhZGUtJHtzdGF0dXN9YH0gLz4KICAgKiAgICl9CiAgICogPC9UcmFuc2l0aW9uPgogICAqIGBgYAogICAqLwogIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLCBQcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXSkuaXNSZXF1aXJlZCwKCiAgLyoqCiAgICogU2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBzdGF0ZXMKICAgKi8KICBpbjogUHJvcFR5cGVzLmJvb2wsCgogIC8qKgogICAqIEJ5IGRlZmF1bHQgdGhlIGNoaWxkIGNvbXBvbmVudCBpcyBtb3VudGVkIGltbWVkaWF0ZWx5IGFsb25nIHdpdGgKICAgKiB0aGUgcGFyZW50IGBUcmFuc2l0aW9uYCBjb21wb25lbnQuIElmIHlvdSB3YW50IHRvICJsYXp5IG1vdW50IiB0aGUgY29tcG9uZW50IG9uIHRoZQogICAqIGZpcnN0IGBpbj17dHJ1ZX1gIHlvdSBjYW4gc2V0IGBtb3VudE9uRW50ZXJgLiBBZnRlciB0aGUgZmlyc3QgZW50ZXIgdHJhbnNpdGlvbiB0aGUgY29tcG9uZW50IHdpbGwgc3RheQogICAqIG1vdW50ZWQsIGV2ZW4gb24gImV4aXRlZCIsIHVubGVzcyB5b3UgYWxzbyBzcGVjaWZ5IGB1bm1vdW50T25FeGl0YC4KICAgKi8KICBtb3VudE9uRW50ZXI6IFByb3BUeXBlcy5ib29sLAoKICAvKioKICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgc3RheXMgbW91bnRlZCBhZnRlciBpdCByZWFjaGVzIHRoZSBgJ2V4aXRlZCdgIHN0YXRlLgogICAqIFNldCBgdW5tb3VudE9uRXhpdGAgaWYgeW91J2QgcHJlZmVyIHRvIHVubW91bnQgdGhlIGNvbXBvbmVudCBhZnRlciBpdCBmaW5pc2hlcyBleGl0aW5nLgogICAqLwogIHVubW91bnRPbkV4aXQ6IFByb3BUeXBlcy5ib29sLAoKICAvKioKICAgKiBOb3JtYWxseSBhIGNvbXBvbmVudCBpcyBub3QgdHJhbnNpdGlvbmVkIGlmIGl0IGlzIHNob3duIHdoZW4gdGhlIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudCBtb3VudHMuCiAgICogSWYgeW91IHdhbnQgdG8gdHJhbnNpdGlvbiBvbiB0aGUgZmlyc3QgbW91bnQgc2V0IGBhcHBlYXJgIHRvIGB0cnVlYCwgYW5kIHRoZQogICAqIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4gYXMgc29vbiBhcyB0aGUgYDxUcmFuc2l0aW9uPmAgbW91bnRzLgogICAqCiAgICogPiBOb3RlOiB0aGVyZSBhcmUgbm8gc3BlY2lmaWMgImFwcGVhciIgc3RhdGVzLiBgYXBwZWFyYCBvbmx5IGFkZHMgYW4gYWRkaXRpb25hbCBgZW50ZXJgIHRyYW5zaXRpb24uCiAgICovCiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCwKCiAgLyoqCiAgICogRW5hYmxlIG9yIGRpc2FibGUgZW50ZXIgdHJhbnNpdGlvbnMuCiAgICovCiAgZW50ZXI6IFByb3BUeXBlcy5ib29sLAoKICAvKioKICAgKiBFbmFibGUgb3IgZGlzYWJsZSBleGl0IHRyYW5zaXRpb25zLgogICAqLwogIGV4aXQ6IFByb3BUeXBlcy5ib29sLAoKICAvKioKICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy4KICAgKiBSZXF1aXJlZCB1bmxlc3MgYGFkZEVuZExpc3RlbmVyYCBpcyBwcm92aWRlZAogICAqCiAgICogWW91IG1heSBzcGVjaWZ5IGEgc2luZ2xlIHRpbWVvdXQgZm9yIGFsbCB0cmFuc2l0aW9ucyBsaWtlOiBgdGltZW91dD17NTAwfWAsCiAgICogb3IgaW5kaXZpZHVhbGx5IGxpa2U6CiAgICoKICAgKiBgYGBqc3gKICAgKiB0aW1lb3V0PXt7CiAgICogIGVudGVyOiAzMDAsCiAgICogIGV4aXQ6IDUwMCwKICAgKiB9fQogICAqIGBgYAogICAqCiAgICogQHR5cGUge251bWJlciB8IHsgZW50ZXI/OiBudW1iZXIsIGV4aXQ/OiBudW1iZXIgfX0KICAgKi8KICB0aW1lb3V0OiBmdW5jdGlvbiB0aW1lb3V0KHByb3BzKSB7CiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07CiAgICB9CgogICAgdmFyIHB0ID0gX1Byb3BUeXBlcy50aW1lb3V0c1NoYXBlOwogICAgaWYgKCFwcm9wcy5hZGRFbmRMaXN0ZW5lcikgcHQgPSBwdC5pc1JlcXVpcmVkOwogICAgcmV0dXJuIHB0LmFwcGx5KHVuZGVmaW5lZCwgW3Byb3BzXS5jb25jYXQoYXJncykpOwogIH0sCgogIC8qKgogICAqIEFkZCBhIGN1c3RvbSB0cmFuc2l0aW9uIGVuZCB0cmlnZ2VyLiBDYWxsZWQgd2l0aCB0aGUgdHJhbnNpdGlvbmluZwogICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZAogICAqIGxvZ2ljLiAqKk5vdGU6KiogVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC4KICAgKgogICAqIGBgYGpzeAogICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4gewogICAqICAgLy8gdXNlIHRoZSBjc3MgdHJhbnNpdGlvbmVuZCBldmVudCB0byBtYXJrIHRoZSBmaW5pc2ggb2YgYSB0cmFuc2l0aW9uCiAgICogICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBkb25lLCBmYWxzZSk7CiAgICogfX0KICAgKiBgYGAKICAgKi8KICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsCgogIC8qKgogICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgImVudGVyaW5nIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyCiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50CiAgICoKICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWQKICAgKi8KICBvbkVudGVyOiBQcm9wVHlwZXMuZnVuYywKCiAgLyoqCiAgICogQ2FsbGJhY2sgZmlyZWQgYWZ0ZXIgdGhlICJlbnRlcmluZyIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlcgogICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudAogICAqCiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKQogICAqLwogIG9uRW50ZXJpbmc6IFByb3BUeXBlcy5mdW5jLAoKICAvKioKICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgImVudGVyZWQiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXIKICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnQKICAgKgogICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZAogICAqLwogIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsCgogIC8qKgogICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgImV4aXRpbmciIHN0YXR1cyBpcyBhcHBsaWVkLgogICAqCiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWQKICAgKi8KICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLAoKICAvKioKICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgImV4aXRpbmciIHN0YXR1cyBpcyBhcHBsaWVkLgogICAqCiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQpIC0+IHZvaWQKICAgKi8KICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLAoKICAvKioKICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgImV4aXRlZCIgc3RhdHVzIGlzIGFwcGxpZWQuCiAgICoKICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZAogICAqLwogIG9uRXhpdGVkOiBQcm9wVHlwZXMuZnVuYwp9IDogdW5kZWZpbmVkOwoKLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQgaXMgY2xlYXJlciBpbiB0aGUgZG9jdW1lbnRhdGlvbgpmdW5jdGlvbiBub29wKCkge30KClRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0gewogIGluOiBmYWxzZSwKICBtb3VudE9uRW50ZXI6IGZhbHNlLAogIHVubW91bnRPbkV4aXQ6IGZhbHNlLAogIGFwcGVhcjogZmFsc2UsCiAgZW50ZXI6IHRydWUsCiAgZXhpdDogdHJ1ZSwKCiAgb25FbnRlcjogbm9vcCwKICBvbkVudGVyaW5nOiBub29wLAogIG9uRW50ZXJlZDogbm9vcCwKCiAgb25FeGl0OiBub29wLAogIG9uRXhpdGluZzogbm9vcCwKICBvbkV4aXRlZDogbm9vcAp9OwoKVHJhbnNpdGlvbi5VTk1PVU5URUQgPSAwOwpUcmFuc2l0aW9uLkVYSVRFRCA9IDE7ClRyYW5zaXRpb24uRU5URVJJTkcgPSAyOwpUcmFuc2l0aW9uLkVOVEVSRUQgPSAzOwpUcmFuc2l0aW9uLkVYSVRJTkcgPSA0OwoKZXhwb3J0cy5kZWZhdWx0ID0gVHJhbnNpdGlvbjsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvdXRpbHMvUHJvcFR5cGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC91dGlscy9Qcm9wVHlwZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7CmV4cG9ydHMuY2xhc3NOYW1lc1NoYXBlID0gZXhwb3J0cy50aW1lb3V0c1NoYXBlID0gdW5kZWZpbmVkOwpleHBvcnRzLnRyYW5zaXRpb25UaW1lb3V0ID0gdHJhbnNpdGlvblRpbWVvdXQ7Cgp2YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHByb3AtdHlwZXMgKi8gIi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiKTsKCnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKZnVuY3Rpb24gdHJhbnNpdGlvblRpbWVvdXQodHJhbnNpdGlvblR5cGUpIHsKICB2YXIgdGltZW91dFByb3BOYW1lID0gJ3RyYW5zaXRpb24nICsgdHJhbnNpdGlvblR5cGUgKyAnVGltZW91dCc7CiAgdmFyIGVuYWJsZWRQcm9wTmFtZSA9ICd0cmFuc2l0aW9uJyArIHRyYW5zaXRpb25UeXBlOwoKICByZXR1cm4gZnVuY3Rpb24gKHByb3BzKSB7CiAgICAvLyBJZiB0aGUgdHJhbnNpdGlvbiBpcyBlbmFibGVkCiAgICBpZiAocHJvcHNbZW5hYmxlZFByb3BOYW1lXSkgewogICAgICAvLyBJZiBubyB0aW1lb3V0IGR1cmF0aW9uIGlzIHByb3ZpZGVkCiAgICAgIGlmIChwcm9wc1t0aW1lb3V0UHJvcE5hbWVdID09IG51bGwpIHsKICAgICAgICByZXR1cm4gbmV3IEVycm9yKHRpbWVvdXRQcm9wTmFtZSArICcgd2FzblwndCBzdXBwbGllZCB0byBDU1NUcmFuc2l0aW9uR3JvdXA6ICcgKyAndGhpcyBjYW4gY2F1c2UgdW5yZWxpYWJsZSBhbmltYXRpb25zIGFuZCB3b25cJ3QgYmUgc3VwcG9ydGVkIGluICcgKyAnYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4gU2VlICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1hbmltYXRpb24tdHJhbnNpdGlvbi1ncm91cC10aW1lb3V0IGZvciBtb3JlICcgKyAnaW5mb3JtYXRpb24uJyk7CgogICAgICAgIC8vIElmIHRoZSBkdXJhdGlvbiBpc24ndCBhIG51bWJlcgogICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wc1t0aW1lb3V0UHJvcE5hbWVdICE9PSAnbnVtYmVyJykgewogICAgICAgIHJldHVybiBuZXcgRXJyb3IodGltZW91dFByb3BOYW1lICsgJyBtdXN0IGJlIGEgbnVtYmVyIChpbiBtaWxsaXNlY29uZHMpJyk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gbnVsbDsKICB9Owp9Cgp2YXIgdGltZW91dHNTaGFwZSA9IGV4cG9ydHMudGltZW91dHNTaGFwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm51bWJlciwgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7CiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLAogIGV4aXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyCn0pLmlzUmVxdWlyZWRdKTsKCnZhciBjbGFzc05hbWVzU2hhcGUgPSBleHBvcnRzLmNsYXNzTmFtZXNTaGFwZSA9IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5zaGFwZSh7CiAgZW50ZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLAogIGV4aXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLAogIGFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcKfSksIF9wcm9wVHlwZXMyLmRlZmF1bHQuc2hhcGUoewogIGVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywKICBlbnRlckRvbmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLAogIGVudGVyQWN0aXZlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywKICBleGl0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywKICBleGl0RG9uZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsCiAgZXhpdEFjdGl2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcKfSldKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCgp2YXIgc3R5bGVzSW5Eb20gPSB7fTsKCnZhcgltZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7Cgl2YXIgbWVtbzsKCglyZXR1cm4gZnVuY3Rpb24gKCkgewoJCWlmICh0eXBlb2YgbWVtbyA9PT0gInVuZGVmaW5lZCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCXJldHVybiBtZW1vOwoJfTsKfTsKCnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7CgkvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrcwoJLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNQoJLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlcgoJLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzCgkvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzcKCXJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjsKfSk7Cgp2YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkgewogIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7Cn07Cgp2YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHsKCXZhciBtZW1vID0ge307CgoJcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkgewogICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSAiaGVhZCIgZWxlbWVudC4KICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lCiAgICAgICAgICAgICAgICAvLyB7CiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNmb28iKS5zaGFkb3dSb290IH0KICAgICAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAidW5kZWZpbmVkIikgewoJCQl2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpOwoJCQkvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZgoJCQlpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7CgkJCQl0cnkgewoJCQkJCS8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkCgkJCQkJLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnMKCQkJCQlzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkOwoJCQkJfSBjYXRjaChlKSB7CgkJCQkJc3R5bGVUYXJnZXQgPSBudWxsOwoJCQkJfQoJCQl9CgkJCW1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0OwoJCX0KCQlyZXR1cm4gbWVtb1t0YXJnZXRdCgl9Owp9KSgpOwoKdmFyIHNpbmdsZXRvbiA9IG51bGw7CnZhcglzaW5nbGV0b25Db3VudGVyID0gMDsKdmFyCXN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTsKCnZhcglmaXhVcmxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91cmxzICovICIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykgewoJaWYgKHR5cGVvZiBERUJVRyAhPT0gInVuZGVmaW5lZCIgJiYgREVCVUcpIHsKCQlpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAib2JqZWN0IikgdGhyb3cgbmV3IEVycm9yKCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQiKTsKCX0KCglvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCglvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09ICJvYmplY3QiID8gb3B0aW9ucy5hdHRycyA6IHt9OwoKCS8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPgoJLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZQoJaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICJib29sZWFuIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7CgoJLy8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnQKICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gImhlYWQiOwoKCS8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0CglpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSAiYm90dG9tIjsKCgl2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpOwoKCWFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7CgoJcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkgewoJCXZhciBtYXlSZW1vdmUgPSBbXTsKCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHsKCQkJdmFyIGl0ZW0gPSBzdHlsZXNbaV07CgkJCXZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdOwoKCQkJZG9tU3R5bGUucmVmcy0tOwoJCQltYXlSZW1vdmUucHVzaChkb21TdHlsZSk7CgkJfQoKCQlpZihuZXdMaXN0KSB7CgkJCXZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7CgkJCWFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7CgkJfQoKCQlmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykgewoJCQl2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07CgoJCQlpZihkb21TdHlsZS5yZWZzID09PSAwKSB7CgkJCQlmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpOwoKCQkJCWRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07CgkJCX0KCQl9Cgl9Owp9OwoKZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykgewoJZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHsKCQl2YXIgaXRlbSA9IHN0eWxlc1tpXTsKCQl2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTsKCgkJaWYoZG9tU3R5bGUpIHsKCQkJZG9tU3R5bGUucmVmcysrOwoKCQkJZm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7CgkJCQlkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTsKCQkJfQoKCQkJZm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHsKCQkJCWRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpOwoJCQl9CgkJfSBlbHNlIHsKCQkJdmFyIHBhcnRzID0gW107CgoJCQlmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykgewoJCQkJcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7CgkJCX0KCgkJCXN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9OwoJCX0KCX0KfQoKZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7Cgl2YXIgc3R5bGVzID0gW107Cgl2YXIgbmV3U3R5bGVzID0ge307CgoJZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7CgkJdmFyIGl0ZW0gPSBsaXN0W2ldOwoJCXZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdOwoJCXZhciBjc3MgPSBpdGVtWzFdOwoJCXZhciBtZWRpYSA9IGl0ZW1bMl07CgkJdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107CgkJdmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9OwoKCQlpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTsKCQllbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTsKCX0KCglyZXR1cm4gc3R5bGVzOwp9CgpmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7Cgl2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pCgoJaWYgKCF0YXJnZXQpIHsKCQl0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgbm9kZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC4iKTsKCX0KCgl2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07CgoJaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09ICJ0b3AiKSB7CgkJaWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkgewoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7CgkJfSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykgewoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7CgkJfSBlbHNlIHsKCQkJdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTsKCQl9CgkJc3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTsKCX0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gImJvdHRvbSIpIHsKCQl0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpOwoJfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gIm9iamVjdCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHsKCQl2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArICIgIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTsKCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7Cgl9IGVsc2UgewoJCXRocm93IG5ldyBFcnJvcigiW1N0eWxlIExvYWRlcl1cblxuIEludmFsaWQgbm9kZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXG4iKTsKCX0KfQoKZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkgewoJaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTsKCXN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpOwoKCXZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpOwoJaWYoaWR4ID49IDApIHsKCQlzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpOwoJfQp9CgpmdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHsKCXZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInN0eWxlIik7CgoJaWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHsKCQlvcHRpb25zLmF0dHJzLnR5cGUgPSAidGV4dC9jc3MiOwoJfQoKCWFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTsKCWluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7CgoJcmV0dXJuIHN0eWxlOwp9CgpmdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykgewoJdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJsaW5rIik7CgoJaWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHsKCQlvcHRpb25zLmF0dHJzLnR5cGUgPSAidGV4dC9jc3MiOwoJfQoJb3B0aW9ucy5hdHRycy5yZWwgPSAic3R5bGVzaGVldCI7CgoJYWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7CglpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgbGluayk7CgoJcmV0dXJuIGxpbms7Cn0KCmZ1bmN0aW9uIGFkZEF0dHJzIChlbCwgYXR0cnMpIHsKCU9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKCQllbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTsKCX0pOwp9CgpmdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7Cgl2YXIgc3R5bGUsIHVwZGF0ZSwgcmVtb3ZlLCByZXN1bHQ7CgoJLy8gSWYgYSB0cmFuc2Zvcm0gZnVuY3Rpb24gd2FzIGRlZmluZWQsIHJ1biBpdCBvbiB0aGUgY3NzCglpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykgewoJICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpOwoKCSAgICBpZiAocmVzdWx0KSB7CgkgICAgCS8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgbm9kZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLgoJICAgIAkvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuCgkgICAgCW9iai5jc3MgPSByZXN1bHQ7CgkgICAgfSBlbHNlIHsKCSAgICAJLy8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgbm9kZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLgoJICAgIAkvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzcwoJICAgIAlyZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgCQkvLyBub29wCgkgICAgCX07CgkgICAgfQoJfQoKCWlmIChvcHRpb25zLnNpbmdsZXRvbikgewoJCXZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrOwoKCQlzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTsKCgkJdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7CgkJcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTsKCgl9IGVsc2UgaWYgKAoJCW9iai5zb3VyY2VNYXAgJiYKCQl0eXBlb2YgVVJMID09PSAiZnVuY3Rpb24iICYmCgkJdHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09ICJmdW5jdGlvbiIgJiYKCQl0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gImZ1bmN0aW9uIiAmJgoJCXR5cGVvZiBCbG9iID09PSAiZnVuY3Rpb24iICYmCgkJdHlwZW9mIGJ0b2EgPT09ICJmdW5jdGlvbiIKCSkgewoJCXN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7CgkJdXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTsKCQlyZW1vdmUgPSBmdW5jdGlvbiAoKSB7CgkJCXJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7CgoJCQlpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpOwoJCX07Cgl9IGVsc2UgewoJCXN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpOwoJCXVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7CgkJcmVtb3ZlID0gZnVuY3Rpb24gKCkgewoJCQlyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpOwoJCX07Cgl9CgoJdXBkYXRlKG9iaik7CgoJcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHsKCQlpZiAobmV3T2JqKSB7CgkJCWlmICgKCQkJCW5ld09iai5jc3MgPT09IG9iai5jc3MgJiYKCQkJCW5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmCgkJCQluZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwCgkJCSkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl1cGRhdGUob2JqID0gbmV3T2JqKTsKCQl9IGVsc2UgewoJCQlyZW1vdmUoKTsKCQl9Cgl9Owp9Cgp2YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkgewoJdmFyIHRleHRTdG9yZSA9IFtdOwoKCXJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7CgkJdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50OwoKCQlyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcbicpOwoJfTsKfSkoKTsKCmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHsKCXZhciBjc3MgPSByZW1vdmUgPyAiIiA6IG9iai5jc3M7CgoJaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHsKCQlzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTsKCX0gZWxzZSB7CgkJdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpOwoJCXZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlczsKCgkJaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7CgoJCWlmIChjaGlsZE5vZGVzLmxlbmd0aCkgewoJCQlzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pOwoJCX0gZWxzZSB7CgkJCXN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpOwoJCX0KCX0KfQoKZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikgewoJdmFyIGNzcyA9IG9iai5jc3M7Cgl2YXIgbWVkaWEgPSBvYmoubWVkaWE7CgoJaWYobWVkaWEpIHsKCQlzdHlsZS5zZXRBdHRyaWJ1dGUoIm1lZGlhIiwgbWVkaWEpCgl9CgoJaWYoc3R5bGUuc3R5bGVTaGVldCkgewoJCXN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzczsKCX0gZWxzZSB7CgkJd2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkgewoJCQlzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTsKCQl9CgoJCXN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpOwoJfQp9CgpmdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHsKCXZhciBjc3MgPSBvYmouY3NzOwoJdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7CgoJLyoKCQlJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWQKCQlhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJscwoJCW9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvbgoJCWRpcmVjdGx5CgkqLwoJdmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7CgoJaWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7CgkJY3NzID0gZml4VXJscyhjc3MpOwoJfQoKCWlmIChzb3VyY2VNYXApIHsKCQkvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NQoJCWNzcyArPSAiXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgIiAqLyI7Cgl9CgoJdmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiAidGV4dC9jc3MiIH0pOwoKCXZhciBvbGRTcmMgPSBsaW5rLmhyZWY7CgoJbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKCglpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgovKioKICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG8KICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYQogKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLgogKgogKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS4KICoKICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiAiZml4ZXMiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLgogKgogKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC4KICoKICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHsKICAvLyBnZXQgY3VycmVudCBsb2NhdGlvbgogIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiICYmIHdpbmRvdy5sb2NhdGlvbjsKCiAgaWYgKCFsb2NhdGlvbikgewogICAgdGhyb3cgbmV3IEVycm9yKCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvbiIpOwogIH0KCgkvLyBibGFuayBvciBudWxsPwoJaWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gInN0cmluZyIpIHsKCSAgcmV0dXJuIGNzczsKICB9CgogIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24uaG9zdDsKICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cL1teXC9dKiQvLCAiLyIpOwoKCS8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKQoJLyoKCVRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluCglhIHN0cmluZy4KCgkgL3VybFxzKlwoICA9IE1hdGNoIG9uIHRoZSB3b3JkICJ1cmwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnMKCSAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXAKCSAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cAoJICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzCgkgICAgICAgICB8ICA9IE9SCgkgICAgICAgICBcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzCgkgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHMKCSAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlcwoJICAgICAgICAgICAgICAgICB8ICA9IE9SCgkgICAgICAgICAgICAgICAgIFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICAgICAgXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICApICA9IEVuZCBHcm91cAogICAgICAgICAgICAgICpcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zCiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXAKICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmcKICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwCgkgXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnMKCgkgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuCgkgKi8KCXZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxccypcKCgoPzpbXikoXXxcKCg/OlteKShdK3xcKFteKShdKlwpKSpcKSkqKVwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHsKCQkvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpCgkJdmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmwKCQkJLnRyaW0oKQoJCQkucmVwbGFjZSgvXiIoLiopIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSkKCQkJLnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pOwoKCQkvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZQoJCWlmICgvXigjfGRhdGE6fGh0dHA6XC9cL3xodHRwczpcL1wvfGZpbGU6XC9cL1wvfFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7CgkJICByZXR1cm4gZnVsbE1hdGNoOwoJCX0KCgkJLy8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmwKCQl2YXIgbmV3VXJsOwoKCQlpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoIi8vIikgPT09IDApIHsKCQkgIAkvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/CgkJCW5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDsKCQl9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKCIvIikgPT09IDApIHsKCQkJLy8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsCgkJCW5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nCgkJfSBlbHNlIHsKCQkJLy8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3RvcnkKCQkJbmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXC5cLy8sICIiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nCgkJfQoKCQkvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pCgkJcmV0dXJuICJ1cmwoIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyAiKSI7Cgl9KTsKCgkvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzcwoJcmV0dXJuIGZpeGVkQ3NzOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4vc3JjL2NvbXBvbmVudHMvQXBwLnRzeCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL3NyYy9jb21wb25lbnRzL0FwcC50c3ggKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsKICAgIHZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8CiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fAogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9OwogICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7CiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsKICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0KICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7CiAgICB9Owp9KSgpOwp2YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHsKICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgImRlZmF1bHQiOiBtb2QgfTsKfTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gInJlYWN0IikpOwp2YXIgcmVhY3RfcmVzcG9uc2l2ZV9tb2RhbF8xID0gX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LXJlc3BvbnNpdmUtbW9kYWwgKi8gIi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlc3BvbnNpdmUtbW9kYWwvbGliL2luZGV4LmVzLmpzIikpOwpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2N1c3RvbS1zdHlsaW5nLmNzcyAqLyAiLi9zcmMvY29tcG9uZW50cy9jdXN0b20tc3R5bGluZy5jc3MiKTsKdmFyIFNpbXBsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTaW1wbGUsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBTaW1wbGUoKSB7CiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7CiAgICAgICAgX3RoaXMuc3RhdGUgPSB7CiAgICAgICAgICAgIG9wZW46IGZhbHNlLAogICAgICAgIH07CiAgICAgICAgX3RoaXMub25PcGVuTW9kYWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTsKICAgICAgICB9OwogICAgICAgIF90aGlzLm9uQ2xvc2VNb2RhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBvcGVuOiBmYWxzZSB9KTsKICAgICAgICB9OwogICAgICAgIHJldHVybiBfdGhpczsKICAgIH0KICAgIFNpbXBsZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvcGVuID0gdGhpcy5zdGF0ZS5vcGVuOwogICAgICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImRpdiIsIG51bGwsCiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJidXR0b24iLCB7IG9uQ2xpY2s6IHRoaXMub25PcGVuTW9kYWwgfSwgIk9wZW4gc2ltcGxlIGNlbnRlcmVkIG1vZGFsIiksCiAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KHJlYWN0X3Jlc3BvbnNpdmVfbW9kYWxfMS5kZWZhdWx0LCB7IG9wZW46IG9wZW4sIG9uQ2xvc2U6IHRoaXMub25DbG9zZU1vZGFsLCBjZW50ZXI6IHRydWUgfSwKICAgICAgICAgICAgICAgIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJoMiIsIG51bGwsICJTaW1wbGUgY2VudGVyZWQgbW9kYWwiKSkpKTsKICAgIH07CiAgICByZXR1cm4gU2ltcGxlOwp9KHJlYWN0XzEuZGVmYXVsdC5Db21wb25lbnQpKTsKZXhwb3J0cy5TaW1wbGUgPSBTaW1wbGU7CnZhciBDdXN0b21TdHlsaW5nID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikgewogICAgX19leHRlbmRzKEN1c3RvbVN0eWxpbmcsIF9zdXBlcik7CiAgICBmdW5jdGlvbiBDdXN0b21TdHlsaW5nKCkgewogICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzOwogICAgICAgIF90aGlzLnN0YXRlID0gewogICAgICAgICAgICBvcGVuOiBmYWxzZSwKICAgICAgICB9OwogICAgICAgIF90aGlzLm9uT3Blbk1vZGFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IG9wZW46IHRydWUgfSk7CiAgICAgICAgfTsKICAgICAgICBfdGhpcy5vbkNsb3NlTW9kYWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7CiAgICAgICAgfTsKICAgICAgICByZXR1cm4gX3RoaXM7CiAgICB9CiAgICBDdXN0b21TdHlsaW5nLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9wZW4gPSB0aGlzLnN0YXRlLm9wZW47CiAgICAgICAgcmV0dXJuIChyZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiZGl2IiwgeyBjbGFzc05hbWU6ICJleGFtcGxlIiB9LAogICAgICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgiaDQiLCBudWxsLCAiQ3VzdG9tIHN0eWxpbmciKSwKICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIsIHsgY2xhc3NOYW1lOiAiYnRuIGJ0bi1hY3Rpb24iLCBvbkNsaWNrOiB0aGlzLm9uT3Blbk1vZGFsIH0sICJPcGVuIiksCiAgICAgICAgICAgICcgJywKICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImEiLCB7IGhyZWY6ICJodHRwczovL2dpdGh1Yi5jb20vcHJhZGVsL3JlYWN0LXJlc3BvbnNpdmUtbW9kYWwvYmxvYi9tYXN0ZXIvZG9jcy9zcmMvZXhhbXBsZXMvY3VzdG9tLXN0eWxpbmcuanMiLCB0YXJnZXQ6ICJfYmxhbmsiIH0sICJTZWUgc291cmNlIGNvZGUiKSwKICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQocmVhY3RfcmVzcG9uc2l2ZV9tb2RhbF8xLmRlZmF1bHQsIHsgb3Blbjogb3Blbiwgb25DbG9zZTogdGhpcy5vbkNsb3NlTW9kYWwsIGNlbnRlcjogdHJ1ZSwgY2xhc3NOYW1lczogeyBvdmVybGF5OiAnY3VzdG9tLW92ZXJsYXknLCBtb2RhbDogJ2N1c3RvbS1tb2RhbCcgfSB9LAogICAgICAgICAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoImgyIiwgbnVsbCwgIk1vZGFsIikpKSk7CiAgICB9OwogICAgcmV0dXJuIEN1c3RvbVN0eWxpbmc7Cn0ocmVhY3RfMS5kZWZhdWx0LkNvbXBvbmVudCkpOwpleHBvcnRzLkN1c3RvbVN0eWxpbmcgPSBDdXN0b21TdHlsaW5nOwpleHBvcnRzLkFwcCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCJkaXYiLCBudWxsLAogICAgIiAiLAogICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoU2ltcGxlLCBudWxsKSwKICAgICIgICIsCiAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChDdXN0b21TdHlsaW5nLCBudWxsKSwKICAgICIgIik7IH07CgoKLyoqKi8gfSksCgovKioqLyAiLi9zcmMvY29tcG9uZW50cy9jdXN0b20tc3R5bGluZy5jc3MiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL3NyYy9jb21wb25lbnRzL2N1c3RvbS1zdHlsaW5nLmNzcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoKdmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9jdXN0b20tc3R5bGluZy5jc3MgKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zcmMvY29tcG9uZW50cy9jdXN0b20tc3R5bGluZy5jc3MiKTsKCmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmksIGNvbnRlbnQsICcnXV07Cgp2YXIgdHJhbnNmb3JtOwp2YXIgaW5zZXJ0SW50bzsKCgoKdmFyIG9wdGlvbnMgPSB7ImhtciI6dHJ1ZX0KCm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtCm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDsKCnZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMgKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIikoY29udGVudCwgb3B0aW9ucyk7CgppZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FsczsKCmlmKGZhbHNlKSB7fQoKLyoqKi8gfSksCgovKioqLyAiLi9zcmMvaW5kZXgudHN4IjoKLyohKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL2luZGV4LnRzeCAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7CiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kOwogICAgdmFyIHJlc3VsdCA9IHt9OwogICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTsKICAgIHJlc3VsdFsiZGVmYXVsdCJdID0gbW9kOwogICAgcmV0dXJuIHJlc3VsdDsKfTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsKdmFyIFJlYWN0ID0gX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpKTsKdmFyIFJlYWN0RE9NID0gX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LWRvbSAqLyAicmVhY3QtZG9tIikpOwp2YXIgQXBwXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvbXBvbmVudHMvQXBwICovICIuL3NyYy9jb21wb25lbnRzL0FwcC50c3giKTsKUmVhY3RET00ucmVuZGVyKFJlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwXzEuQXBwLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcCIpKTsKCgovKioqLyB9KSwKCi8qKiovICJyZWFjdCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgIlJlYWN0IiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gUmVhY3Q7CgovKioqLyB9KSwKCi8qKiovICJyZWFjdC1kb20iOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIGV4dGVybmFsICJSZWFjdERPTSIgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOwoKLyoqKi8gfSkKCi8qKioqKiovIH0pOwovLyMgc291cmNlTWFwcGluZ1VSTD1idW5kbGUuanMubWFw\"")
	packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "bundle.js.map", "\"\"")
	packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "index.html", "\"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPg0KICAgIDx0aXRsZT7QpNGD0YLQsdC+0Ls8L3RpdGxlPg0KPC9oZWFkPg0KPGJvZHk+DQo8ZGl2IGlkPSJhcHAiPjwvZGl2Pg0KDQo8IS0tIHJlYWN0IERlcGVuZGVuY2llcyAtLT4NCjxzY3JpcHQgY3Jvc3NvcmlnaW4gc3JjPSJodHRwczovL3VucGtnLmNvbS9yZWFjdEAxNi91bWQvcmVhY3QuZGV2ZWxvcG1lbnQuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBjcm9zc29yaWdpbiBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LWRvbUAxNi91bWQvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzIj48L3NjcmlwdD4NCg0KPCEtLSByZWFjdC10YWJsZSBDU1MgLS0+DQo8IS0tPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3VucGtnLmNvbS9yZWFjdC10YWJsZUBsYXRlc3QvcmVhY3QtdGFibGUuY3NzIj4tLT4NCg0KPCEtLSByZWFjdC10YWJsZSBKUyAtLT4NCjwhLS08c2NyaXB0IHNyYz0iaHR0cHM6Ly91bnBrZy5jb20vcmVhY3QtdGFibGVAbGF0ZXN0L3JlYWN0LXRhYmxlLmpzIj48L3NjcmlwdD4tLT4NCg0KPCEtLTxzY3JpcHQ+LS0+DQogICAgPCEtLWxldCBSZWFjdFRhYmxlID0gd2luZG93LlJlYWN0VGFibGUuZGVmYXVsdC0tPg0KPCEtLTwvc2NyaXB0Pi0tPg0KDQo8IS0tIE1haW4gLS0+DQo8c2NyaXB0IHNyYz0iLi9zY3JpcHRzL21haW4uanMiPjwvc2NyaXB0Pg0KPC9ib2R5Pg0KPC9odG1sPg==\"")
	packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js", "\"\"")
	packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js.map", "\"\"")
}
