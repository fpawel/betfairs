// Code generated by github.com/gobuffalo/packr. DO NOT EDIT

package main

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "index.html", "\"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPg0KICAgIDx0aXRsZT5IZWxsbyBSZWFjdCE8L3RpdGxlPg0KPC9oZWFkPg0KPGJvZHk+DQo8ZGl2IGlkPSJhcHAiPjwvZGl2Pg0KDQo8IS0tIHJlYWN0IERlcGVuZGVuY2llcyAtLT4NCjxzY3JpcHQgY3Jvc3NvcmlnaW4gc3JjPSJodHRwczovL3VucGtnLmNvbS9yZWFjdEAxNi91bWQvcmVhY3QuZGV2ZWxvcG1lbnQuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBjcm9zc29yaWdpbiBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LWRvbUAxNi91bWQvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzIj48L3NjcmlwdD4NCg0KPCEtLSByZWFjdC10YWJsZSBDU1MgLS0+DQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LXRhYmxlQGxhdGVzdC9yZWFjdC10YWJsZS5jc3MiPg0KDQo8IS0tIHJlYWN0LXRhYmxlIEpTIC0tPg0KPHNjcmlwdCBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LXRhYmxlQGxhdGVzdC9yZWFjdC10YWJsZS5qcyI+PC9zY3JpcHQ+DQoNCjxzY3JpcHQ+DQogICAgbGV0IFJlYWN0VGFibGUgPSB3aW5kb3cuUmVhY3RUYWJsZS5kZWZhdWx0DQo8L3NjcmlwdD4NCg0KPCEtLSBNYWluIC0tPg0KPHNjcmlwdCBzcmM9Ii4vc2NyaXB0cy9tYWluLmpzIj48L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4=\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js", "\"\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js.map", "\"\"")
}
