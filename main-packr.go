// Code generated by github.com/gobuffalo/packr. DO NOT EDIT

package main

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "index.html", "\"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPg0KICAgIDx0aXRsZT7QpNGD0YLQsdC+0Ls8L3RpdGxlPg0KPC9oZWFkPg0KPGJvZHk+DQo8ZGl2IGlkPSJhcHAiPjwvZGl2Pg0KDQo8IS0tIHJlYWN0IERlcGVuZGVuY2llcyAtLT4NCjxzY3JpcHQgY3Jvc3NvcmlnaW4gc3JjPSJodHRwczovL3VucGtnLmNvbS9yZWFjdEAxNi91bWQvcmVhY3QuZGV2ZWxvcG1lbnQuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBjcm9zc29yaWdpbiBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LWRvbUAxNi91bWQvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzIj48L3NjcmlwdD4NCg0KPCEtLSByZWFjdC10YWJsZSBDU1MgLS0+DQo8IS0tPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwczovL3VucGtnLmNvbS9yZWFjdC10YWJsZUBsYXRlc3QvcmVhY3QtdGFibGUuY3NzIj4tLT4NCg0KPCEtLSByZWFjdC10YWJsZSBKUyAtLT4NCjwhLS08c2NyaXB0IHNyYz0iaHR0cHM6Ly91bnBrZy5jb20vcmVhY3QtdGFibGVAbGF0ZXN0L3JlYWN0LXRhYmxlLmpzIj48L3NjcmlwdD4tLT4NCg0KPCEtLTxzY3JpcHQ+LS0+DQogICAgPCEtLWxldCBSZWFjdFRhYmxlID0gd2luZG93LlJlYWN0VGFibGUuZGVmYXVsdC0tPg0KPCEtLTwvc2NyaXB0Pi0tPg0KDQo8IS0tIE1haW4gLS0+DQo8c2NyaXB0IHNyYz0iLi9zY3JpcHRzL21haW4uanMiPjwvc2NyaXB0Pg0KPC9ib2R5Pg0KPC9odG1sPg==\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js", "\"LyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykgewovKioqKioqLyAJCWlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdAovKioqKioqLyAJLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zCi8qKioqKiovIAkvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7Ci8qKioqKiovIAkJaWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTsKLyoqKioqKi8gCQlpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlOwovKioqKioqLyAJCXZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTsKLyoqKioqKi8gCQlPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpOwovKioqKioqLyAJCXJldHVybiBuczsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7Ci8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwovKioqKioqLyAJCXJldHVybiBnZXR0ZXI7Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07Ci8qKioqKiovCi8qKioqKiovIAkvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7Ci8qKioqKiovCi8qKioqKiovCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoewoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9mb290YmFsbC5jc3MiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9mb290YmFsbC5jc3MgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgpleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMgKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIikoZmFsc2UpOwovLyBpbXBvcnRzCgoKLy8gbW9kdWxlCmV4cG9ydHMucHVzaChbbW9kdWxlLmksICJ0YWJsZS5mb290YmFsbC10YWJsZSB7XHJcbiAgICBib3JkZXItc3BhY2luZzogMDtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG50YWJsZS5mb290YmFsbC10YWJsZSB0aCB7XHJcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gICAgdG9wOiAxcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG59XHJcbnRhYmxlLmZvb3RiYWxsLXRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNGU0O1xyXG59XHJcbnRhYmxlLmZvb3RiYWxsLXRhYmxlIHRoLCB0YWJsZS5mb290YmFsbC10YWJsZSB0ZCB7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2JhYmFiYTtcclxuXHJcbiAgICBib3JkZXItcmlnaHQ6IHNvbGlkIDFweCAjYmFiYWJhO1xyXG4gICAgYm9yZGVyLWxlZnQ6IHNvbGlkIDFweCAjYmFiYWJhO1xyXG59XHJcblxyXG50YWJsZS5mb290YmFsbC10YWJsZSB0ZCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZzogMnB4IDRweDtcclxufVxyXG5cclxudGFibGUuZm9vdGJhbGwtdGFibGUgdGg6aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZGFya2dyZXk7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuIiwgIiJdKTsKCi8vIGV4cG9ydHMKCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCi8qCglNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAoJQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYQoqLwovLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlcgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkgewoJdmFyIGxpc3QgPSBbXTsKCgkvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nCglsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7CgkJcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CgkJCXZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApOwoJCQlpZihpdGVtWzJdKSB7CgkJCQlyZXR1cm4gIkBtZWRpYSAiICsgaXRlbVsyXSArICJ7IiArIGNvbnRlbnQgKyAifSI7CgkJCX0gZWxzZSB7CgkJCQlyZXR1cm4gY29udGVudDsKCQkJfQoJCX0pLmpvaW4oIiIpOwoJfTsKCgkvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdAoJbGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkgewoJCWlmKHR5cGVvZiBtb2R1bGVzID09PSAic3RyaW5nIikKCQkJbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgIiJdXTsKCQl2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9OwoJCWZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7CgkJCXZhciBpZCA9IHRoaXNbaV1bMF07CgkJCWlmKHR5cGVvZiBpZCA9PT0gIm51bWJlciIpCgkJCQlhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7CgkJfQoJCWZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHsKCQkJdmFyIGl0ZW0gPSBtb2R1bGVzW2ldOwoJCQkvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlCgkJCS8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zCgkJCS8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuCgkJCS8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpCgkJCWlmKHR5cGVvZiBpdGVtWzBdICE9PSAibnVtYmVyIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkgewoJCQkJaWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkgewoJCQkJCWl0ZW1bMl0gPSBtZWRpYVF1ZXJ5OwoJCQkJfSBlbHNlIGlmKG1lZGlhUXVlcnkpIHsKCQkJCQlpdGVtWzJdID0gIigiICsgaXRlbVsyXSArICIpIGFuZCAoIiArIG1lZGlhUXVlcnkgKyAiKSI7CgkJCQl9CgkJCQlsaXN0LnB1c2goaXRlbSk7CgkJCX0KCQl9Cgl9OwoJcmV0dXJuIGxpc3Q7Cn07CgpmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkgewoJdmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnOwoJdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdOwoJaWYgKCFjc3NNYXBwaW5nKSB7CgkJcmV0dXJuIGNvbnRlbnQ7Cgl9CgoJaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykgewoJCXZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpOwoJCXZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7CgkJCXJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLycKCQl9KTsKCgkJcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXG4nKTsKCX0KCglyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xuJyk7Cn0KCi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVCkKZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkgewoJLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmCgl2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTsKCXZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7CgoJcmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJzsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3JlY29ubmVjdGluZ3dlYnNvY2tldC9yZWNvbm5lY3Rpbmctd2Vic29ja2V0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvcmVjb25uZWN0aW5nd2Vic29ja2V0L3JlY29ubmVjdGluZy13ZWJzb2NrZXQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKdmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXywgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187Ly8gTUlUIExpY2Vuc2U6Ci8vCi8vIENvcHlyaWdodCAoYykgMjAxMC0yMDEyLCBKb2UgV2FsbmVzCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwovLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwovLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgovLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQovLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KLy8gVEhFIFNPRlRXQVJFLgoKLyoqCiAqIFRoaXMgYmVoYXZlcyBsaWtlIGEgV2ViU29ja2V0IGluIGV2ZXJ5IHdheSwgZXhjZXB0IGlmIGl0IGZhaWxzIHRvIGNvbm5lY3QsCiAqIG9yIGl0IGdldHMgZGlzY29ubmVjdGVkLCBpdCB3aWxsIHJlcGVhdGVkbHkgcG9sbCB1bnRpbCBpdCBzdWNjZXNzZnVsbHkgY29ubmVjdHMKICogYWdhaW4uCiAqCiAqIEl0IGlzIEFQSSBjb21wYXRpYmxlLCBzbyB3aGVuIHlvdSBoYXZlOgogKiAgIHdzID0gbmV3IFdlYlNvY2tldCgnd3M6Ly8uLi4uJyk7CiAqIHlvdSBjYW4gcmVwbGFjZSB3aXRoOgogKiAgIHdzID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCgnd3M6Ly8uLi4uJyk7CiAqCiAqIFRoZSBldmVudCBzdHJlYW0gd2lsbCB0eXBpY2FsbHkgbG9vayBsaWtlOgogKiAgb25jb25uZWN0aW5nCiAqICBvbm9wZW4KICogIG9ubWVzc2FnZQogKiAgb25tZXNzYWdlCiAqICBvbmNsb3NlIC8vIGxvc3QgY29ubmVjdGlvbgogKiAgb25jb25uZWN0aW5nCiAqICBvbm9wZW4gIC8vIHNvbWV0aW1lIGxhdGVyLi4uCiAqICBvbm1lc3NhZ2UKICogIG9ubWVzc2FnZQogKiAgZXRjLi4uCiAqCiAqIEl0IGlzIEFQSSBjb21wYXRpYmxlIHdpdGggdGhlIHN0YW5kYXJkIFdlYlNvY2tldCBBUEksIGFwYXJ0IGZyb20gdGhlIGZvbGxvd2luZyBtZW1iZXJzOgogKgogKiAtIGBidWZmZXJlZEFtb3VudGAKICogLSBgZXh0ZW5zaW9uc2AKICogLSBgYmluYXJ5VHlwZWAKICoKICogTGF0ZXN0IHZlcnNpb246IGh0dHBzOi8vZ2l0aHViLmNvbS9qb2V3YWxuZXMvcmVjb25uZWN0aW5nLXdlYnNvY2tldC8KICogLSBKb2UgV2FsbmVzCiAqCiAqIFN5bnRheAogKiA9PT09PT0KICogdmFyIHNvY2tldCA9IG5ldyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpOwogKgogKiBQYXJhbWV0ZXJzCiAqID09PT09PT09PT0KICogdXJsIC0gVGhlIHVybCB5b3UgYXJlIGNvbm5lY3RpbmcgdG8uCiAqIHByb3RvY29scyAtIE9wdGlvbmFsIHN0cmluZyBvciBhcnJheSBvZiBwcm90b2NvbHMuCiAqIG9wdGlvbnMgLSBTZWUgYmVsb3cKICoKICogT3B0aW9ucwogKiA9PT09PT09CiAqIE9wdGlvbnMgY2FuIGVpdGhlciBiZSBwYXNzZWQgdXBvbiBpbnN0YW50aWF0aW9uIG9yIHNldCBhZnRlciBpbnN0YW50aWF0aW9uOgogKgogKiB2YXIgc29ja2V0ID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwsIG51bGwsIHsgZGVidWc6IHRydWUsIHJlY29ubmVjdEludGVydmFsOiA0MDAwIH0pOwogKgogKiBvcgogKgogKiB2YXIgc29ja2V0ID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwpOwogKiBzb2NrZXQuZGVidWcgPSB0cnVlOwogKiBzb2NrZXQucmVjb25uZWN0SW50ZXJ2YWwgPSA0MDAwOwogKgogKiBkZWJ1ZwogKiAtIFdoZXRoZXIgdGhpcyBpbnN0YW5jZSBzaG91bGQgbG9nIGRlYnVnIG1lc3NhZ2VzLiBBY2NlcHRzIHRydWUgb3IgZmFsc2UuIERlZmF1bHQ6IGZhbHNlLgogKgogKiBhdXRvbWF0aWNPcGVuCiAqIC0gV2hldGhlciBvciBub3QgdGhlIHdlYnNvY2tldCBzaG91bGQgYXR0ZW1wdCB0byBjb25uZWN0IGltbWVkaWF0ZWx5IHVwb24gaW5zdGFudGlhdGlvbi4gVGhlIHNvY2tldCBjYW4gYmUgbWFudWFsbHkgb3BlbmVkIG9yIGNsb3NlZCBhdCBhbnkgdGltZSB1c2luZyB3cy5vcGVuKCkgYW5kIHdzLmNsb3NlKCkuCiAqCiAqIHJlY29ubmVjdEludGVydmFsCiAqIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0LiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDEwMDAuCiAqCiAqIG1heFJlY29ubmVjdEludGVydmFsCiAqIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBhIHJlY29ubmVjdGlvbiBhdHRlbXB0LiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDMwMDAwLgogKgogKiByZWNvbm5lY3REZWNheQogKiAtIFRoZSByYXRlIG9mIGluY3JlYXNlIG9mIHRoZSByZWNvbm5lY3QgZGVsYXkuIEFsbG93cyByZWNvbm5lY3QgYXR0ZW1wdHMgdG8gYmFjayBvZmYgd2hlbiBwcm9ibGVtcyBwZXJzaXN0LiBBY2NlcHRzIGludGVnZXIgb3IgZmxvYXQuIERlZmF1bHQ6IDEuNS4KICoKICogdGltZW91dEludGVydmFsCiAqIC0gVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQgYmVmb3JlIGNsb3NpbmcgYW5kIHJldHJ5aW5nLiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDIwMDAuCiAqCiAqLwooZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkgewogICAgaWYgKHRydWUpIHsKICAgICAgICAhKF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18gPSBbXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLAoJCQkJX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/CgkJCQkoX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLmFwcGx5KGV4cG9ydHMsIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18pKSA6IF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyksCgkJCQlfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7CiAgICB9IGVsc2Uge30KfSkodGhpcywgZnVuY3Rpb24gKCkgewoKICAgIGlmICghKCdXZWJTb2NrZXQnIGluIHdpbmRvdykpIHsKICAgICAgICByZXR1cm47CiAgICB9CgogICAgZnVuY3Rpb24gUmVjb25uZWN0aW5nV2ViU29ja2V0KHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKSB7CgogICAgICAgIC8vIERlZmF1bHQgc2V0dGluZ3MKICAgICAgICB2YXIgc2V0dGluZ3MgPSB7CgogICAgICAgICAgICAvKiogV2hldGhlciB0aGlzIGluc3RhbmNlIHNob3VsZCBsb2cgZGVidWcgbWVzc2FnZXMuICovCiAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKCiAgICAgICAgICAgIC8qKiBXaGV0aGVyIG9yIG5vdCB0aGUgd2Vic29ja2V0IHNob3VsZCBhdHRlbXB0IHRvIGNvbm5lY3QgaW1tZWRpYXRlbHkgdXBvbiBpbnN0YW50aWF0aW9uLiAqLwogICAgICAgICAgICBhdXRvbWF0aWNPcGVuOiB0cnVlLAoKICAgICAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGJlZm9yZSBhdHRlbXB0aW5nIHRvIHJlY29ubmVjdC4gKi8KICAgICAgICAgICAgcmVjb25uZWN0SW50ZXJ2YWw6IDEwMDAsCiAgICAgICAgICAgIC8qKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGEgcmVjb25uZWN0aW9uIGF0dGVtcHQuICovCiAgICAgICAgICAgIG1heFJlY29ubmVjdEludGVydmFsOiAzMDAwMCwKICAgICAgICAgICAgLyoqIFRoZSByYXRlIG9mIGluY3JlYXNlIG9mIHRoZSByZWNvbm5lY3QgZGVsYXkuIEFsbG93cyByZWNvbm5lY3QgYXR0ZW1wdHMgdG8gYmFjayBvZmYgd2hlbiBwcm9ibGVtcyBwZXJzaXN0LiAqLwogICAgICAgICAgICByZWNvbm5lY3REZWNheTogMS41LAoKICAgICAgICAgICAgLyoqIFRoZSBtYXhpbXVtIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHRvIHdhaXQgZm9yIGEgY29ubmVjdGlvbiB0byBzdWNjZWVkIGJlZm9yZSBjbG9zaW5nIGFuZCByZXRyeWluZy4gKi8KICAgICAgICAgICAgdGltZW91dEludGVydmFsOiAyMDAwLAoKICAgICAgICAgICAgLyoqIFRoZSBtYXhpbXVtIG51bWJlciBvZiByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgdG8gbWFrZS4gVW5saW1pdGVkIGlmIG51bGwuICovCiAgICAgICAgICAgIG1heFJlY29ubmVjdEF0dGVtcHRzOiBudWxsCiAgICAgICAgfQogICAgICAgIGlmICghb3B0aW9ucykgeyBvcHRpb25zID0ge307IH0KCiAgICAgICAgLy8gT3ZlcndyaXRlIGFuZCBkZWZpbmUgc2V0dGluZ3Mgd2l0aCBvcHRpb25zIGlmIHRoZXkgZXhpc3QuCiAgICAgICAgZm9yICh2YXIga2V5IGluIHNldHRpbmdzKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1trZXldICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgdGhpc1trZXldID0gb3B0aW9uc1trZXldOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpc1trZXldID0gc2V0dGluZ3Nba2V5XTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gVGhlc2Ugc2hvdWxkIGJlIHRyZWF0ZWQgYXMgcmVhZC1vbmx5IHByb3BlcnRpZXMKCiAgICAgICAgLyoqIFRoZSBVUkwgYXMgcmVzb2x2ZWQgYnkgdGhlIGNvbnN0cnVjdG9yLiBUaGlzIGlzIGFsd2F5cyBhbiBhYnNvbHV0ZSBVUkwuIFJlYWQgb25seS4gKi8KICAgICAgICB0aGlzLnVybCA9IHVybDsKCiAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgYXR0ZW1wdGVkIHJlY29ubmVjdHMgc2luY2Ugc3RhcnRpbmcsIG9yIHRoZSBsYXN0IHN1Y2Nlc3NmdWwgY29ubmVjdGlvbi4gUmVhZCBvbmx5LiAqLwogICAgICAgIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPSAwOwoKICAgICAgICAvKioKICAgICAgICAgKiBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29ubmVjdGlvbi4KICAgICAgICAgKiBDYW4gYmUgb25lIG9mOiBXZWJTb2NrZXQuQ09OTkVDVElORywgV2ViU29ja2V0Lk9QRU4sIFdlYlNvY2tldC5DTE9TSU5HLCBXZWJTb2NrZXQuQ0xPU0VECiAgICAgICAgICogUmVhZCBvbmx5LgogICAgICAgICAqLwogICAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DT05ORUNUSU5HOwoKICAgICAgICAvKioKICAgICAgICAgKiBBIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBuYW1lIG9mIHRoZSBzdWItcHJvdG9jb2wgdGhlIHNlcnZlciBzZWxlY3RlZDsgdGhpcyB3aWxsIGJlIG9uZSBvZgogICAgICAgICAqIHRoZSBzdHJpbmdzIHNwZWNpZmllZCBpbiB0aGUgcHJvdG9jb2xzIHBhcmFtZXRlciB3aGVuIGNyZWF0aW5nIHRoZSBXZWJTb2NrZXQgb2JqZWN0LgogICAgICAgICAqIFJlYWQgb25seS4KICAgICAgICAgKi8KICAgICAgICB0aGlzLnByb3RvY29sID0gbnVsbDsKCiAgICAgICAgLy8gUHJpdmF0ZSBzdGF0ZSB2YXJpYWJsZXMKCiAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgIHZhciB3czsKICAgICAgICB2YXIgZm9yY2VkQ2xvc2UgPSBmYWxzZTsKICAgICAgICB2YXIgdGltZWRPdXQgPSBmYWxzZTsKICAgICAgICB2YXIgZXZlbnRUYXJnZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgLy8gV2lyZSB1cCAib24qIiBwcm9wZXJ0aWVzIGFzIGV2ZW50IGhhbmRsZXJzCgogICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAgICAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9ub3BlbihldmVudCk7IH0pOwogICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgICAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9uY2xvc2UoZXZlbnQpOyB9KTsKICAgICAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0aW5nJywgZnVuY3Rpb24oZXZlbnQpIHsgc2VsZi5vbmNvbm5lY3RpbmcoZXZlbnQpOyB9KTsKICAgICAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgICAgZnVuY3Rpb24oZXZlbnQpIHsgc2VsZi5vbm1lc3NhZ2UoZXZlbnQpOyB9KTsKICAgICAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICAgICAgZnVuY3Rpb24oZXZlbnQpIHsgc2VsZi5vbmVycm9yKGV2ZW50KTsgfSk7CgogICAgICAgIC8vIEV4cG9zZSB0aGUgQVBJIHJlcXVpcmVkIGJ5IEV2ZW50VGFyZ2V0CgogICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lciA9IGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIuYmluZChldmVudFRhcmdldCk7CiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyID0gZXZlbnRUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKGV2ZW50VGFyZ2V0KTsKICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQgPSBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50LmJpbmQoZXZlbnRUYXJnZXQpOwoKICAgICAgICAvKioKICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBhbiBldmVudCB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCBzdGFuZGFyZAogICAgICAgICAqIGNvbXBsaWFudCBicm93c2VycyBhbmQgSUU5IC0gSUUxMQogICAgICAgICAqCiAgICAgICAgICogVGhpcyB3aWxsIHByZXZlbnQgdGhlIGVycm9yOgogICAgICAgICAqIE9iamVjdCBkb2Vzbid0IHN1cHBvcnQgdGhpcyBhY3Rpb24KICAgICAgICAgKgogICAgICAgICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTkzNDUzOTIvd2h5LWFyZW50LW15LXBhcmFtZXRlcnMtZ2V0dGluZy1wYXNzZWQtdGhyb3VnaC10by1hLWRpc3BhdGNoZWQtZXZlbnQvMTkzNDU1NjMjMTkzNDU1NjMKICAgICAgICAgKiBAcGFyYW0gcyBTdHJpbmcgVGhlIG5hbWUgdGhhdCB0aGUgZXZlbnQgc2hvdWxkIHVzZQogICAgICAgICAqIEBwYXJhbSBhcmdzIE9iamVjdCBhbiBvcHRpb25hbCBvYmplY3QgdGhhdCB0aGUgZXZlbnQgd2lsbCB1c2UKICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZUV2ZW50KHMsIGFyZ3MpIHsKICAgICAgICAJdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCJDdXN0b21FdmVudCIpOwogICAgICAgIAlldnQuaW5pdEN1c3RvbUV2ZW50KHMsIGZhbHNlLCBmYWxzZSwgYXJncyk7CiAgICAgICAgCXJldHVybiBldnQ7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5vcGVuID0gZnVuY3Rpb24gKHJlY29ubmVjdEF0dGVtcHQpIHsKICAgICAgICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KHNlbGYudXJsLCBwcm90b2NvbHMgfHwgW10pOwoKICAgICAgICAgICAgaWYgKHJlY29ubmVjdEF0dGVtcHQpIHsKICAgICAgICAgICAgICAgIGlmICh0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzICYmIHRoaXMucmVjb25uZWN0QXR0ZW1wdHMgPiB0aGlzLm1heFJlY29ubmVjdEF0dGVtcHRzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChnZW5lcmF0ZUV2ZW50KCdjb25uZWN0aW5nJykpOwogICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ2F0dGVtcHQtY29ubmVjdCcsIHNlbGYudXJsKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGxvY2FsV3MgPSB3czsKICAgICAgICAgICAgdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ2Nvbm5lY3Rpb24tdGltZW91dCcsIHNlbGYudXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHRpbWVkT3V0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGxvY2FsV3MuY2xvc2UoKTsKICAgICAgICAgICAgICAgIHRpbWVkT3V0ID0gZmFsc2U7CiAgICAgICAgICAgIH0sIHNlbGYudGltZW91dEludGVydmFsKTsKCiAgICAgICAgICAgIHdzLm9ub3BlbiA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZWJ1ZyB8fCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdSZWNvbm5lY3RpbmdXZWJTb2NrZXQnLCAnb25vcGVuJywgc2VsZi51cmwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2VsZi5wcm90b2NvbCA9IHdzLnByb3RvY29sOwogICAgICAgICAgICAgICAgc2VsZi5yZWFkeVN0YXRlID0gV2ViU29ja2V0Lk9QRU47CiAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdEF0dGVtcHRzID0gMDsKICAgICAgICAgICAgICAgIHZhciBlID0gZ2VuZXJhdGVFdmVudCgnb3BlbicpOwogICAgICAgICAgICAgICAgZS5pc1JlY29ubmVjdCA9IHJlY29ubmVjdEF0dGVtcHQ7CiAgICAgICAgICAgICAgICByZWNvbm5lY3RBdHRlbXB0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGUpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgd3Mub25jbG9zZSA9IGZ1bmN0aW9uKGV2ZW50KSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICB3cyA9IG51bGw7CiAgICAgICAgICAgICAgICBpZiAoZm9yY2VkQ2xvc2UpIHsKICAgICAgICAgICAgICAgICAgICBzZWxmLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuQ0xPU0VEOwogICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VuZXJhdGVFdmVudCgnY2xvc2UnKSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGYucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DT05ORUNUSU5HOwogICAgICAgICAgICAgICAgICAgIHZhciBlID0gZ2VuZXJhdGVFdmVudCgnY29ubmVjdGluZycpOwogICAgICAgICAgICAgICAgICAgIGUuY29kZSA9IGV2ZW50LmNvZGU7CiAgICAgICAgICAgICAgICAgICAgZS5yZWFzb24gPSBldmVudC5yZWFzb247CiAgICAgICAgICAgICAgICAgICAgZS53YXNDbGVhbiA9IGV2ZW50Lndhc0NsZWFuOwogICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWNvbm5lY3RBdHRlbXB0ICYmICF0aW1lZE91dCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZWJ1ZyB8fCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbmNsb3NlJywgc2VsZi51cmwpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VuZXJhdGVFdmVudCgnY2xvc2UnKSk7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IHNlbGYucmVjb25uZWN0SW50ZXJ2YWwgKiBNYXRoLnBvdyhzZWxmLnJlY29ubmVjdERlY2F5LCBzZWxmLnJlY29ubmVjdEF0dGVtcHRzKTsKICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdEF0dGVtcHRzKys7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3Blbih0cnVlKTsKICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0ID4gc2VsZi5tYXhSZWNvbm5lY3RJbnRlcnZhbCA/IHNlbGYubWF4UmVjb25uZWN0SW50ZXJ2YWwgOiB0aW1lb3V0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgd3Mub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbm1lc3NhZ2UnLCBzZWxmLnVybCwgZXZlbnQuZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB2YXIgZSA9IGdlbmVyYXRlRXZlbnQoJ21lc3NhZ2UnKTsKICAgICAgICAgICAgICAgIGUuZGF0YSA9IGV2ZW50LmRhdGE7CiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGUpOwogICAgICAgICAgICB9OwogICAgICAgICAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbmVycm9yJywgc2VsZi51cmwsIGV2ZW50KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VuZXJhdGVFdmVudCgnZXJyb3InKSk7CiAgICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICAvLyBXaGV0aGVyIG9yIG5vdCB0byBjcmVhdGUgYSB3ZWJzb2NrZXQgdXBvbiBpbnN0YW50aWF0aW9uCiAgICAgICAgaWYgKHRoaXMuYXV0b21hdGljT3BlbiA9PSB0cnVlKSB7CiAgICAgICAgICAgIHRoaXMub3BlbihmYWxzZSk7CiAgICAgICAgfQoKICAgICAgICAvKioKICAgICAgICAgKiBUcmFuc21pdHMgZGF0YSB0byB0aGUgc2VydmVyIG92ZXIgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uLgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIGRhdGEgYSB0ZXh0IHN0cmluZywgQXJyYXlCdWZmZXIgb3IgQmxvYiB0byBzZW5kIHRvIHRoZSBzZXJ2ZXIuCiAgICAgICAgICovCiAgICAgICAgdGhpcy5zZW5kID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBpZiAod3MpIHsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdzZW5kJywgc2VsZi51cmwsIGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHdzLnNlbmQoZGF0YSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyAnSU5WQUxJRF9TVEFURV9FUlIgOiBQYXVzaW5nIHRvIHJlY29ubmVjdCB3ZWJzb2NrZXQnOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQ2xvc2VzIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBvciBjb25uZWN0aW9uIGF0dGVtcHQsIGlmIGFueS4KICAgICAgICAgKiBJZiB0aGUgY29ubmVjdGlvbiBpcyBhbHJlYWR5IENMT1NFRCwgdGhpcyBtZXRob2QgZG9lcyBub3RoaW5nLgogICAgICAgICAqLwogICAgICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHsKICAgICAgICAgICAgLy8gRGVmYXVsdCBDTE9TRV9OT1JNQUwgY29kZQogICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIGNvZGUgPSAxMDAwOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvcmNlZENsb3NlID0gdHJ1ZTsKICAgICAgICAgICAgaWYgKHdzKSB7CiAgICAgICAgICAgICAgICB3cy5jbG9zZShjb2RlLCByZWFzb24pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgLyoqCiAgICAgICAgICogQWRkaXRpb25hbCBwdWJsaWMgQVBJIG1ldGhvZCB0byByZWZyZXNoIHRoZSBjb25uZWN0aW9uIGlmIHN0aWxsIG9wZW4gKGNsb3NlLCByZS1vcGVuKS4KICAgICAgICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIGFwcCBzdXNwZWN0cyBiYWQgZGF0YSAvIG1pc3NlZCBoZWFydCBiZWF0cywgaXQgY2FuIHRyeSB0byByZWZyZXNoLgogICAgICAgICAqLwogICAgICAgIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAod3MpIHsKICAgICAgICAgICAgICAgIHdzLmNsb3NlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfQoKICAgIC8qKgogICAgICogQW4gZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uJ3MgcmVhZHlTdGF0ZSBjaGFuZ2VzIHRvIE9QRU47CiAgICAgKiB0aGlzIGluZGljYXRlcyB0aGF0IHRoZSBjb25uZWN0aW9uIGlzIHJlYWR5IHRvIHNlbmQgYW5kIHJlY2VpdmUgZGF0YS4KICAgICAqLwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbihldmVudCkge307CiAgICAvKiogQW4gZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uJ3MgcmVhZHlTdGF0ZSBjaGFuZ2VzIHRvIENMT1NFRC4gKi8KICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25jbG9zZSA9IGZ1bmN0aW9uKGV2ZW50KSB7fTsKICAgIC8qKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiBhIGNvbm5lY3Rpb24gYmVnaW5zIGJlaW5nIGF0dGVtcHRlZC4gKi8KICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25jb25uZWN0aW5nID0gZnVuY3Rpb24oZXZlbnQpIHt9OwogICAgLyoqIEFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGNhbGxlZCB3aGVuIGEgbWVzc2FnZSBpcyByZWNlaXZlZCBmcm9tIHRoZSBzZXJ2ZXIuICovCiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7fTsKICAgIC8qKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovCiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudCkge307CgogICAgLyoqCiAgICAgKiBXaGV0aGVyIGFsbCBpbnN0YW5jZXMgb2YgUmVjb25uZWN0aW5nV2ViU29ja2V0IHNob3VsZCBsb2cgZGVidWcgbWVzc2FnZXMuCiAgICAgKiBTZXR0aW5nIHRoaXMgdG8gdHJ1ZSBpcyB0aGUgZXF1aXZhbGVudCBvZiBzZXR0aW5nIGFsbCBpbnN0YW5jZXMgb2YgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnIHRvIHRydWUuCiAgICAgKi8KICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCA9IGZhbHNlOwoKICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5DT05ORUNUSU5HID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7CiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuT1BFTiA9IFdlYlNvY2tldC5PUEVOOwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LkNMT1NJTkcgPSBXZWJTb2NrZXQuQ0xPU0lORzsKICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5DTE9TRUQgPSBXZWJTb2NrZXQuQ0xPU0VEOwoKICAgIHJldHVybiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQ7Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCgp2YXIgc3R5bGVzSW5Eb20gPSB7fTsKCnZhcgltZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7Cgl2YXIgbWVtbzsKCglyZXR1cm4gZnVuY3Rpb24gKCkgewoJCWlmICh0eXBlb2YgbWVtbyA9PT0gInVuZGVmaW5lZCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJCXJldHVybiBtZW1vOwoJfTsKfTsKCnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7CgkvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrcwoJLy8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNQoJLy8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlcgoJLy8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzCgkvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzcKCXJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjsKfSk7Cgp2YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkgewogIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7Cn07Cgp2YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHsKCXZhciBtZW1vID0ge307CgoJcmV0dXJuIGZ1bmN0aW9uKHRhcmdldCkgewogICAgICAgICAgICAgICAgLy8gSWYgcGFzc2luZyBmdW5jdGlvbiBpbiBvcHRpb25zLCB0aGVuIHVzZSBpdCBmb3IgcmVzb2x2ZSAiaGVhZCIgZWxlbWVudC4KICAgICAgICAgICAgICAgIC8vIFVzZWZ1bCBmb3IgU2hhZG93IFJvb3Qgc3R5bGUgaS5lCiAgICAgICAgICAgICAgICAvLyB7CiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNmb28iKS5zaGFkb3dSb290IH0KICAgICAgICAgICAgICAgIC8vIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSAidW5kZWZpbmVkIikgewoJCQl2YXIgc3R5bGVUYXJnZXQgPSBnZXRUYXJnZXQuY2FsbCh0aGlzLCB0YXJnZXQpOwoJCQkvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZgoJCQlpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7CgkJCQl0cnkgewoJCQkJCS8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkCgkJCQkJLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnMKCQkJCQlzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkOwoJCQkJfSBjYXRjaChlKSB7CgkJCQkJc3R5bGVUYXJnZXQgPSBudWxsOwoJCQkJfQoJCQl9CgkJCW1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0OwoJCX0KCQlyZXR1cm4gbWVtb1t0YXJnZXRdCgl9Owp9KSgpOwoKdmFyIHNpbmdsZXRvbiA9IG51bGw7CnZhcglzaW5nbGV0b25Db3VudGVyID0gMDsKdmFyCXN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTsKCnZhcglmaXhVcmxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91cmxzICovICIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykgewoJaWYgKHR5cGVvZiBERUJVRyAhPT0gInVuZGVmaW5lZCIgJiYgREVCVUcpIHsKCQlpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAib2JqZWN0IikgdGhyb3cgbmV3IEVycm9yKCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnQiKTsKCX0KCglvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCglvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09ICJvYmplY3QiID8gb3B0aW9ucy5hdHRycyA6IHt9OwoKCS8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPgoJLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZQoJaWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09ICJib29sZWFuIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7CgoJLy8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnQKICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gImhlYWQiOwoKCS8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0CglpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSAiYm90dG9tIjsKCgl2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpOwoKCWFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7CgoJcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkgewoJCXZhciBtYXlSZW1vdmUgPSBbXTsKCgkJZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHsKCQkJdmFyIGl0ZW0gPSBzdHlsZXNbaV07CgkJCXZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdOwoKCQkJZG9tU3R5bGUucmVmcy0tOwoJCQltYXlSZW1vdmUucHVzaChkb21TdHlsZSk7CgkJfQoKCQlpZihuZXdMaXN0KSB7CgkJCXZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7CgkJCWFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7CgkJfQoKCQlmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykgewoJCQl2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07CgoJCQlpZihkb21TdHlsZS5yZWZzID09PSAwKSB7CgkJCQlmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpOwoKCQkJCWRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07CgkJCX0KCQl9Cgl9Owp9OwoKZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykgewoJZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHsKCQl2YXIgaXRlbSA9IHN0eWxlc1tpXTsKCQl2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTsKCgkJaWYoZG9tU3R5bGUpIHsKCQkJZG9tU3R5bGUucmVmcysrOwoKCQkJZm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7CgkJCQlkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTsKCQkJfQoKCQkJZm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHsKCQkJCWRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpOwoJCQl9CgkJfSBlbHNlIHsKCQkJdmFyIHBhcnRzID0gW107CgoJCQlmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykgewoJCQkJcGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7CgkJCX0KCgkJCXN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9OwoJCX0KCX0KfQoKZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7Cgl2YXIgc3R5bGVzID0gW107Cgl2YXIgbmV3U3R5bGVzID0ge307CgoJZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7CgkJdmFyIGl0ZW0gPSBsaXN0W2ldOwoJCXZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdOwoJCXZhciBjc3MgPSBpdGVtWzFdOwoJCXZhciBtZWRpYSA9IGl0ZW1bMl07CgkJdmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107CgkJdmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9OwoKCQlpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTsKCQllbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTsKCX0KCglyZXR1cm4gc3R5bGVzOwp9CgpmdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7Cgl2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pCgoJaWYgKCF0YXJnZXQpIHsKCQl0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuIik7Cgl9CgoJdmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdOwoKCWlmIChvcHRpb25zLmluc2VydEF0ID09PSAidG9wIikgewoJCWlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHsKCQkJdGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpOwoJCX0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHsKCQkJdGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpOwoJCX0gZWxzZSB7CgkJCXRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7CgkJfQoJCXN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7Cgl9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09ICJib3R0b20iKSB7CgkJdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTsKCX0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09ICJvYmplY3QiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7CgkJdmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8gKyAiICIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7CgkJdGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpOwoJfSBlbHNlIHsKCQl0aHJvdyBuZXcgRXJyb3IoIltTdHlsZSBMb2FkZXJdXG5cbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcbiIpOwoJfQp9CgpmdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7CglpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlOwoJc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7CgoJdmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7CglpZihpZHggPj0gMCkgewoJCXN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7Cgl9Cn0KCmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykgewoJdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKCglpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkgewoJCW9wdGlvbnMuYXR0cnMudHlwZSA9ICJ0ZXh0L2NzcyI7Cgl9CgoJYWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpOwoJaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTsKCglyZXR1cm4gc3R5bGU7Cn0KCmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7Cgl2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImxpbmsiKTsKCglpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkgewoJCW9wdGlvbnMuYXR0cnMudHlwZSA9ICJ0ZXh0L2NzcyI7Cgl9CglvcHRpb25zLmF0dHJzLnJlbCA9ICJzdHlsZXNoZWV0IjsKCglhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTsKCWluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTsKCglyZXR1cm4gbGluazsKfQoKZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykgewoJT2JqZWN0LmtleXMoYXR0cnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewoJCWVsLnNldEF0dHJpYnV0ZShrZXksIGF0dHJzW2tleV0pOwoJfSk7Cn0KCmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHsKCXZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDsKCgkvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3MKCWlmIChvcHRpb25zLnRyYW5zZm9ybSAmJiBvYmouY3NzKSB7CgkgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7CgoJICAgIGlmIChyZXN1bHQpIHsKCSAgICAJLy8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLgoJICAgIAkvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuCgkgICAgCW9iai5jc3MgPSByZXN1bHQ7CgkgICAgfSBlbHNlIHsKCSAgICAJLy8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy4KCSAgICAJLy8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3MKCSAgICAJcmV0dXJuIGZ1bmN0aW9uKCkgewoJICAgIAkJLy8gbm9vcAoJICAgIAl9OwoJICAgIH0KCX0KCglpZiAob3B0aW9ucy5zaW5nbGV0b24pIHsKCQl2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKzsKCgkJc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7CgoJCXVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpOwoJCXJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7CgoJfSBlbHNlIGlmICgKCQlvYmouc291cmNlTWFwICYmCgkJdHlwZW9mIFVSTCA9PT0gImZ1bmN0aW9uIiAmJgoJCXR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSAiZnVuY3Rpb24iICYmCgkJdHlwZW9mIFVSTC5yZXZva2VPYmplY3RVUkwgPT09ICJmdW5jdGlvbiIgJiYKCQl0eXBlb2YgQmxvYiA9PT0gImZ1bmN0aW9uIiAmJgoJCXR5cGVvZiBidG9hID09PSAiZnVuY3Rpb24iCgkpIHsKCQlzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpOwoJCXVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7CgkJcmVtb3ZlID0gZnVuY3Rpb24gKCkgewoJCQlyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpOwoKCQkJaWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTsKCQl9OwoJfSBlbHNlIHsKCQlzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTsKCQl1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpOwoJCXJlbW92ZSA9IGZ1bmN0aW9uICgpIHsKCQkJcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTsKCQl9OwoJfQoKCXVwZGF0ZShvYmopOwoKCXJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7CgkJaWYgKG5ld09iaikgewoJCQlpZiAoCgkJCQluZXdPYmouY3NzID09PSBvYmouY3NzICYmCgkJCQluZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJgoJCQkJbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcAoJCQkpIHsKCQkJCXJldHVybjsKCQkJfQoKCQkJdXBkYXRlKG9iaiA9IG5ld09iaik7CgkJfSBlbHNlIHsKCQkJcmVtb3ZlKCk7CgkJfQoJfTsKfQoKdmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHsKCXZhciB0ZXh0U3RvcmUgPSBbXTsKCglyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkgewoJCXRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDsKCgkJcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXG4nKTsKCX07Cn0pKCk7CgpmdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7Cgl2YXIgY3NzID0gcmVtb3ZlID8gIiIgOiBvYmouY3NzOwoKCWlmIChzdHlsZS5zdHlsZVNoZWV0KSB7CgkJc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7Cgl9IGVsc2UgewoJCXZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTsKCQl2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7CgoJCWlmIChjaGlsZE5vZGVzW2luZGV4XSkgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pOwoKCQlpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHsKCQkJc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTsKCQl9IGVsc2UgewoJCQlzdHlsZS5hcHBlbmRDaGlsZChjc3NOb2RlKTsKCQl9Cgl9Cn0KCmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHsKCXZhciBjc3MgPSBvYmouY3NzOwoJdmFyIG1lZGlhID0gb2JqLm1lZGlhOwoKCWlmKG1lZGlhKSB7CgkJc3R5bGUuc2V0QXR0cmlidXRlKCJtZWRpYSIsIG1lZGlhKQoJfQoKCWlmKHN0eWxlLnN0eWxlU2hlZXQpIHsKCQlzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7Cgl9IGVsc2UgewoJCXdoaWxlKHN0eWxlLmZpcnN0Q2hpbGQpIHsKCQkJc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7CgkJfQoKCQlzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTsKCX0KfQoKZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7Cgl2YXIgY3NzID0gb2JqLmNzczsKCXZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwOwoKCS8qCgkJSWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkCgkJYW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMKCQlvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb24KCQlkaXJlY3RseQoJKi8KCXZhciBhdXRvRml4VXJscyA9IG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzID09PSB1bmRlZmluZWQgJiYgc291cmNlTWFwOwoKCWlmIChvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyB8fCBhdXRvRml4VXJscykgewoJCWNzcyA9IGZpeFVybHMoY3NzKTsKCX0KCglpZiAoc291cmNlTWFwKSB7CgkJLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzUKCQljc3MgKz0gIlxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArICIgKi8iOwoJfQoKCXZhciBibG9iID0gbmV3IEJsb2IoW2Nzc10sIHsgdHlwZTogInRleHQvY3NzIiB9KTsKCgl2YXIgb2xkU3JjID0gbGluay5ocmVmOwoKCWxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CgoJaWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7Cn0KCgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoKLyoqCiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvCiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGEKICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS4KICoKICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuCiAqCiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gImZpeGVzIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi4KICoKICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuCiAqCiAqLwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7CiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb24KICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiAmJiB3aW5kb3cubG9jYXRpb247CgogIGlmICghbG9jYXRpb24pIHsKICAgIHRocm93IG5ldyBFcnJvcigiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb24iKTsKICB9CgoJLy8gYmxhbmsgb3IgbnVsbD8KCWlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09ICJzdHJpbmciKSB7CgkgIHJldHVybiBjc3M7CiAgfQoKICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgIi8vIiArIGxvY2F0aW9uLmhvc3Q7CiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXC9bXlwvXSokLywgIi8iKTsKCgkvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLikKCS8qCglUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpbgoJYSBzdHJpbmcuCgoJIC91cmxccypcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCAidXJsIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zCgkgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwCgkgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXAKCSAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlcwoJICAgICAgICAgfCAgPSBPUgoJICAgICAgICAgXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlcwoJICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzCgkgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICAgICAgfCAgPSBPUgoJICAgICAgICAgICAgICAgICBcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzCgkgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzCgkgICAgICAgICAgICAgICAgIFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzCgkgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXAKICAgICAgICAgICAgICAqXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVucwogICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwCiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nCiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cAoJIFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zCgoJIC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLgoJICovCgl2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXHMqXCgoKD86W14pKF18XCgoPzpbXikoXSt8XChbXikoXSpcKSkqXCkpKilcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7CgkJLy8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KQoJCXZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsCgkJCS50cmltKCkKCQkJLnJlcGxhY2UoL14iKC4qKSIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pCgkJCS5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTsKCgkJLy8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2UKCQlpZiAoL14oI3xkYXRhOnxodHRwOlwvXC98aHR0cHM6XC9cL3xmaWxlOlwvXC9cL3xccyokKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkgewoJCSAgcmV0dXJuIGZ1bGxNYXRjaDsKCQl9CgoJCS8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsCgkJdmFyIG5ld1VybDsKCgkJaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKCIvLyIpID09PSAwKSB7CgkJICAJLy9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sPwoJCQluZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7CgkJfSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZigiLyIpID09PSAwKSB7CgkJCS8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybAoJCQluZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJwoJCX0gZWxzZSB7CgkJCS8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5CgkJCW5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlwuXC8vLCAiIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJwoJCX0KCgkJLy8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKQoJCXJldHVybiAidXJsKCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgIikiOwoJfSk7CgoJLy8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3MKCXJldHVybiBmaXhlZENzczsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL0Zvb3RiYWxsLnRzeCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwudHN4ICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKDQp2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7DQogICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwNCiAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fA0KICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTsNCiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHsNCiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTsNCiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9DQogICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTsNCiAgICB9Ow0KfSkoKTsNCnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkgew0KICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykgew0KICAgICAgICBzID0gYXJndW1lbnRzW2ldOw0KICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpDQogICAgICAgICAgICB0W3BdID0gc1twXTsNCiAgICB9DQogICAgcmV0dXJuIHQ7DQp9Ow0KdmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7DQogICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDsNCiAgICB2YXIgcmVzdWx0ID0ge307DQogICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTsNCiAgICByZXN1bHRbImRlZmF1bHQiXSA9IG1vZDsNCiAgICByZXR1cm4gcmVzdWx0Ow0KfTsNCnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkgew0KICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgImRlZmF1bHQiOiBtb2QgfTsNCn07DQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KdmFyIFJlYWN0ID0gX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpKTsNCnZhciBnYW1lXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2dhbWUgKi8gIi4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvZ2FtZS50cyIpOw0KdmFyIHJlY29ubmVjdGluZ3dlYnNvY2tldF8xID0gX19pbXBvcnREZWZhdWx0KF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlY29ubmVjdGluZ3dlYnNvY2tldCAqLyAiLi9ub2RlX21vZHVsZXMvcmVjb25uZWN0aW5nd2Vic29ja2V0L3JlY29ubmVjdGluZy13ZWJzb2NrZXQuanMiKSk7DQp2YXIgdXRpbHNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uL3V0aWxzL3V0aWxzICovICIuL3NyYy91dGlscy91dGlscy50cyIpOw0KX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9mb290YmFsbC5jc3MgKi8gIi4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvZm9vdGJhbGwuY3NzIik7DQp2YXIgQ29sOw0KKGZ1bmN0aW9uIChDb2wpIHsNCiAgICBDb2xbIm9yZGVyIl0gPSAib3JkZXIiOw0KICAgIENvbFsiaG9tZSJdID0gImhvbWUiOw0KICAgIENvbFsic2NvcmUiXSA9ICJzY29yZSI7DQogICAgQ29sWyJhd2F5Il0gPSAiYXdheSI7DQogICAgQ29sWyJ0aW1lIl0gPSAidGltZSI7DQogICAgQ29sWyJjb21wZXRpdGlvbiJdID0gImNvbXBldGl0aW9uIjsNCiAgICBDb2xbImNvdW50cnkiXSA9ICJjb3VudHJ5IjsNCiAgICBDb2xbInRvdGFsX21hdGNoZWQiXSA9ICJ0b3RhbF9tYXRjaGVkIjsNCiAgICBDb2xbInRvdGFsX2F2YWlsYWJsZSJdID0gInRvdGFsX2F2YWlsYWJsZSI7DQogICAgQ29sWyJ3aW5fYmFjayJdID0gIndpbl9iYWNrIjsNCiAgICBDb2xbIndpbl9sYXkiXSA9ICJ3aW5fbGF5IjsNCiAgICBDb2xbImRyYXdfYmFjayJdID0gImRyYXdfYmFjayI7DQogICAgQ29sWyJkcmF3X2xheSJdID0gImRyYXdfbGF5IjsNCiAgICBDb2xbImxvc2VfYmFjayJdID0gImxvc2VfYmFjayI7DQogICAgQ29sWyJsb3NlX2xheSJdID0gImxvc2VfbGF5IjsNCn0pKENvbCB8fCAoQ29sID0ge30pKTsNCnZhciBjb2xzID0gT2JqZWN0LmtleXMoQ29sKS5tYXAoZnVuY3Rpb24gKGspIHsgcmV0dXJuIGs7IH0pOw0KdmFyIHJlbmRlckNvZWZmaWNpZW50ID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgPyAiIiArIHYgOiAnJzsgfTsNCnZhciByZW5kZXJEb2xsYXIgPSBmdW5jdGlvbiAodikgeyByZXR1cm4gdiA/IHYgKyAiJCIgOiAnJzsgfTsNCnZhciBsZWZ0QWxpZ25JdGFsaWMgPSB7DQogICAgdGV4dEFsaWduOiAicmlnaHQiLA0KICAgIGZvbnRTdHlsZTogIml0YWxpYyIsDQp9Ow0KdmFyIGNvbF9pbmZvID0gZnVuY3Rpb24gKHgpIHsNCiAgICBzd2l0Y2ggKHgpIHsNCiAgICAgICAgY2FzZSBDb2wub3JkZXI6DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgIHRpdGxlOiAn4oSWJywNCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgub3JkZXIgKyAxOyB9LA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wuaG9tZToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQlNC+0LzQsCcsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmhvbWU7IH0sDQogICAgICAgICAgICAgICAgc3R5bGU6IHsgdGV4dEFsaWduOiAiY2VudGVyIiB9DQogICAgICAgICAgICB9Ow0KICAgICAgICBjYXNlIENvbC5hd2F5Og0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICB0aXRsZTogJ9CSINCz0L7RgdGC0Y/RhScsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmF3YXk7IH0sDQogICAgICAgICAgICAgICAgc3R5bGU6IHsgdGV4dEFsaWduOiAiY2VudGVyIiB9DQogICAgICAgICAgICB9Ow0KICAgICAgICBjYXNlIENvbC5zY29yZToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQodGH0ZHRgicsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmluX3BsYXkgPyB4LnNjb3JlX2hvbWUgKyAiIC0gIiArIHguc2NvcmVfYXdheSA6ICcnOyB9LA0KICAgICAgICAgICAgICAgIHN0eWxlOiB7IHRleHRBbGlnbjogImNlbnRlciIgfQ0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wudGltZToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQktGA0LXQvNGPJywNCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudGltZTsgfSwNCiAgICAgICAgICAgICAgICBzdHlsZTogeyB0ZXh0QWxpZ246ICJjZW50ZXIiIH0NCiAgICAgICAgICAgIH07DQogICAgICAgIGNhc2UgQ29sLmNvbXBldGl0aW9uOg0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cn0LXQvNC/0LjQvtC90LDRgicsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LmNvbXBldGl0aW9uOyB9LA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wuY291bnRyeToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQodGC0YDQsNC90LAnLA0KICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5jb3VudHJ5OyB9LA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wudG90YWxfbWF0Y2hlZDoNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQkiDQv9Cw0YDQtScsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiByZW5kZXJEb2xsYXIoeC50b3RhbF9tYXRjaGVkKTsgfSwNCiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wudG90YWxfYXZhaWxhYmxlOg0KICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cd0LUg0LIg0L/QsNGA0LUnLA0KICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gcmVuZGVyRG9sbGFyKHgudG90YWxfYXZhaWxhYmxlKTsgfSwNCiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wud2luX2JhY2s6DQogICAgICAgICAgICByZXR1cm4gew0KICAgICAgICAgICAgICAgIHRpdGxlOiAn0J8xKycsDQogICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh4KSB7IHJldHVybiByZW5kZXJDb2VmZmljaWVudCh4Lndpbl9iYWNrKTsgfSwNCiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLA0KICAgICAgICAgICAgfTsNCiAgICAgICAgY2FzZSBDb2wud2luX2xheToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQnzEtJywNCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHJlbmRlckNvZWZmaWNpZW50KHgud2luX2xheSk7IH0sDQogICAgICAgICAgICAgICAgc3R5bGU6IGxlZnRBbGlnbkl0YWxpYywNCiAgICAgICAgICAgIH07DQogICAgICAgIGNhc2UgQ29sLmRyYXdfYmFjazoNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQnSsnLA0KICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gcmVuZGVyQ29lZmZpY2llbnQoeC5kcmF3X2JhY2spOyB9LA0KICAgICAgICAgICAgICAgIHN0eWxlOiBsZWZ0QWxpZ25JdGFsaWMsDQogICAgICAgICAgICB9Ow0KICAgICAgICBjYXNlIENvbC5kcmF3X2xheToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQnS0nLA0KICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAoeCkgeyByZXR1cm4gcmVuZGVyQ29lZmZpY2llbnQoeC5kcmF3X2xheSk7IH0sDQogICAgICAgICAgICAgICAgc3R5bGU6IGxlZnRBbGlnbkl0YWxpYywNCiAgICAgICAgICAgIH07DQogICAgICAgIGNhc2UgQ29sLmxvc2VfYmFjazoNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQnzIrJywNCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHJlbmRlckNvZWZmaWNpZW50KHgubG9zZV9sYXkpOyB9LA0KICAgICAgICAgICAgICAgIHN0eWxlOiBsZWZ0QWxpZ25JdGFsaWMsDQogICAgICAgICAgICB9Ow0KICAgICAgICBjYXNlIENvbC5sb3NlX2xheToNCiAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgdGl0bGU6ICfQnzItJywNCiAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHJlbmRlckNvZWZmaWNpZW50KHgubG9zZV9sYXkpOyB9LA0KICAgICAgICAgICAgICAgIHN0eWxlOiBsZWZ0QWxpZ25JdGFsaWMsDQogICAgICAgICAgICB9Ow0KICAgIH0NCn07DQp2YXIgRm9vdGJhbGwgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7DQogICAgX19leHRlbmRzKEZvb3RiYWxsLCBfc3VwZXIpOw0KICAgIGZ1bmN0aW9uIEZvb3RiYWxsKHByb3BzKSB7DQogICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzOw0KICAgICAgICBfdGhpcy5pbml0KCk7DQogICAgICAgIF90aGlzLnJlbmRlckhlYWRDZWxsID0gX3RoaXMucmVuZGVySGVhZENlbGwuYmluZChfdGhpcyk7DQogICAgICAgIHJldHVybiBfdGhpczsNCiAgICB9DQogICAgRm9vdGJhbGwucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICAgIHZhciB3cyA9IG5ldyByZWNvbm5lY3Rpbmd3ZWJzb2NrZXRfMS5kZWZhdWx0KHV0aWxzXzEud2ViU29ja2V0VVJMKCcvZm9vdGJhbGwnKSwgW10sIHsNCiAgICAgICAgICAgIGRlYnVnOiB0cnVlLA0KICAgICAgICAgICAgYXV0b21hdGljT3BlbjogZmFsc2UsDQogICAgICAgIH0pOw0KICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uICh4KSB7DQogICAgICAgICAgICAgICAgdmFyIHYgPSBnYW1lXzEuYXBwbHlfZ2FtZXNfY2hhbmdlcyh4LmdhbWVzLCBuZXcgZ2FtZV8xLkdhbWVzQ2hhbmdlcyhKU09OLnBhcnNlKGV2ZW50LmRhdGEpKSk7DQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2ID09PSAnc3RyaW5nJykgew0KICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHYpOw0KICAgICAgICAgICAgICAgICAgICBfdGhpcy5zdGF0ZS53cy5jbG9zZSgpOw0KICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbml0KCk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zdGF0ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCB4LCB7IGdhbWVzOiB2IH0pOw0KICAgICAgICAgICAgfSk7DQogICAgICAgIH07DQogICAgICAgIHdzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBjb25zb2xlLmxvZygid3M6IGNsb3NlZCIpOw0KICAgICAgICB9Ow0KICAgICAgICB3cy5vbmNvbm5lY3RpbmcgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBjb25zb2xlLmxvZygid3M6IGNvbm5lY3RpbmciKTsNCiAgICAgICAgfTsNCiAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coIndzOiBjb25uZWN0ZWQiKTsNCiAgICAgICAgfTsNCiAgICAgICAgd3Mub3BlbigpOw0KICAgICAgICB0aGlzLnN0YXRlID0gew0KICAgICAgICAgICAgd3M6IHdzLA0KICAgICAgICAgICAgZ2FtZXM6IFtdLA0KICAgICAgICAgICAgc29ydF9jb2w6IENvbC5vcmRlciwNCiAgICAgICAgICAgIHNvcnRfZGlyOiAnYXNjJywNCiAgICAgICAgfTsNCiAgICB9Ow0KICAgIEZvb3RiYWxsLnJlbmRlckNlbGwgPSBmdW5jdGlvbiAoYywgeCkgew0KICAgICAgICB2YXIgYSA9IGNvbF9pbmZvKGMpOw0KICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCB7IGtleTogYywgc3R5bGU6IF9fYXNzaWduKHt9LCBhLnN0eWxlKSB9LCBhLnZhbHVlKHgpKTsNCiAgICB9Ow0KICAgIEZvb3RiYWxsLnByb3RvdHlwZS5yZW5kZXJIZWFkQ2VsbCA9IGZ1bmN0aW9uIChjKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICAgIHZhciBhID0gY29sX2luZm8oYyk7DQogICAgICAgIHZhciBfYSA9IHRoaXMuc3RhdGUuc29ydF9jb2wgPT09IGMNCiAgICAgICAgICAgID8gW3RoaXMuc3RhdGUuc29ydF9kaXIgPT09ICdhc2MnID8gJ+KGkycgOiAn4oaRJywgJ3JnYig4NSwgODUsIDg1KSddDQogICAgICAgICAgICA6IFsn4oaVJywgJ3JnYigyMDQsIDIwNCwgMjA0KSddLCBjaCA9IF9hWzBdLCBjb2xvciA9IF9hWzFdOw0KICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgidGgiLCB7IGtleTogYywgb25DbGljazogZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoX19hc3NpZ24oe30sIF90aGlzLnN0YXRlLCB7IHNvcnRfY29sOiBjLCBzb3J0X2RpcjogX3RoaXMuc3RhdGUuc29ydF9kaXIgPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYycgfSkpOw0KICAgICAgICAgICAgfSwgc3R5bGU6IHsgY3Vyc29yOiAncG9pbnRlcicgfSB9LA0KICAgICAgICAgICAgYS50aXRsZSwNCiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInNwYW4iLCB7IHN0eWxlOiB7DQogICAgICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvciwNCiAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLA0KICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogMTYsDQogICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdjYWxpYnJpLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmJw0KICAgICAgICAgICAgICAgIH0gfSwgY2gpKTsNCiAgICB9Ow0KICAgIEZvb3RiYWxsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICAgIHZhciBzb3J0RnVuID0gY29sX2luZm8odGhpcy5zdGF0ZS5zb3J0X2NvbCkudmFsdWU7DQogICAgICAgIHZhciBnYW1lcyA9IHRoaXMuc3RhdGUuZ2FtZXMuc2xpY2UoKTsNCiAgICAgICAgZ2FtZXMuc29ydChmdW5jdGlvbiAoeCwgeSkgew0KICAgICAgICAgICAgdmFyIGEgPSBzb3J0RnVuKHgpOw0KICAgICAgICAgICAgdmFyIGIgPSBzb3J0RnVuKHkpOw0KICAgICAgICAgICAgcmV0dXJuICgoYSA8IGIpID8gLTEgOiAoYSA+IGIpID8gMSA6IDApICogKF90aGlzLnN0YXRlLnNvcnRfZGlyID09PSAnYXNjJyA/IDEgOiAtMSk7DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgidGFibGUiLCB7IGNsYXNzTmFtZTogJ2Zvb3RiYWxsLXRhYmxlJyB9LA0KICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidGhlYWQiLCBudWxsLA0KICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRyIiwgbnVsbCwgY29scy5tYXAodGhpcy5yZW5kZXJIZWFkQ2VsbCkpKSwNCiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRib2R5IiwgbnVsbCwgZ2FtZXMubWFwKGZ1bmN0aW9uICh4KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRyIiwgeyBrZXk6IHguaWQgfSwgY29scy5tYXAoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIEZvb3RiYWxsLnJlbmRlckNlbGwoYywgeCk7IH0pKTsNCiAgICAgICAgICAgIH0pKSk7DQogICAgfTsNCiAgICByZXR1cm4gRm9vdGJhbGw7DQp9KFJlYWN0LkNvbXBvbmVudCkpOw0KZXhwb3J0cy5Gb290YmFsbCA9IEZvb3RiYWxsOw0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2Zvb3RiYWxsLmNzcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvZm9vdGJhbGwuY3NzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgp2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohICEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL2Zvb3RiYWxsLmNzcyAqLyAiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2Zvb3RiYWxsLmNzcyIpOwoKaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTsKCnZhciB0cmFuc2Zvcm07CnZhciBpbnNlcnRJbnRvOwoKCgp2YXIgb3B0aW9ucyA9IHsiaG1yIjp0cnVlfQoKb3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0Kb3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkOwoKdmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyAqLyAiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiKShjb250ZW50LCBvcHRpb25zKTsKCmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzOwoKaWYoZmFsc2UpIHt9CgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2dhbWUudHMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9nYW1lLnRzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsNCnZhciBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi91dGlscy9nb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzICovICIuL3NyYy91dGlscy9nb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzLnRzIik7DQovLyBzdHJ1Y3QydHM6Z2l0aHViLmNvbS9mcGF3ZWwvYmV0ZmFpcnMvZm9vdGJhbGwvZm9vdGJhbGwyLkdhbWUNCnZhciBHYW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgew0KICAgIGZ1bmN0aW9uIEdhbWUoZGF0YSkgew0KICAgICAgICB2YXIgZCA9IChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QoZGF0YSkgOiB7fTsNCiAgICAgICAgdGhpcy5pZCA9ICgnaWQnIGluIGQpID8gZC5pZCA6IDA7DQogICAgICAgIHRoaXMub3JkZXIgPSAoJ29yZGVyJyBpbiBkKSA/IGQub3JkZXIgOiAwOw0KICAgICAgICB0aGlzLmhvbWUgPSAoJ2hvbWUnIGluIGQpID8gZC5ob21lIDogJyc7DQogICAgICAgIHRoaXMuYXdheSA9ICgnYXdheScgaW4gZCkgPyBkLmF3YXkgOiAnJzsNCiAgICAgICAgdGhpcy5zY29yZV9ob21lID0gKCdzY29yZV9ob21lJyBpbiBkKSA/IGQuc2NvcmVfaG9tZSA6IDA7DQogICAgICAgIHRoaXMuc2NvcmVfYXdheSA9ICgnc2NvcmVfYXdheScgaW4gZCkgPyBkLnNjb3JlX2F3YXkgOiAwOw0KICAgICAgICB0aGlzLmluX3BsYXkgPSAoJ2luX3BsYXknIGluIGQpID8gZC5pbl9wbGF5IDogZmFsc2U7DQogICAgICAgIHRoaXMudGltZSA9ICgndGltZScgaW4gZCkgPyBkLnRpbWUgOiAnJzsNCiAgICAgICAgdGhpcy5jb21wZXRpdGlvbiA9ICgnY29tcGV0aXRpb24nIGluIGQpID8gZC5jb21wZXRpdGlvbiA6ICcnOw0KICAgICAgICB0aGlzLmNvdW50cnkgPSAoJ2NvdW50cnknIGluIGQpID8gZC5jb3VudHJ5IDogJyc7DQogICAgICAgIHRoaXMub3Blbl9kYXRlID0gKCdvcGVuX2RhdGUnIGluIGQpID8gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlBhcnNlRGF0ZShkLm9wZW5fZGF0ZSkgOiBuZXcgRGF0ZSgpOw0KICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIDogMDsNCiAgICAgICAgdGhpcy53aW5fbGF5ID0gKCd3aW5fbGF5JyBpbiBkKSA/IGQud2luX2xheSA6IDA7DQogICAgICAgIHRoaXMubG9zZV9iYWNrID0gKCdsb3NlX2JhY2snIGluIGQpID8gZC5sb3NlX2JhY2sgOiAwOw0KICAgICAgICB0aGlzLmxvc2VfbGF5ID0gKCdsb3NlX2xheScgaW4gZCkgPyBkLmxvc2VfbGF5IDogMDsNCiAgICAgICAgdGhpcy5kcmF3X2JhY2sgPSAoJ2RyYXdfYmFjaycgaW4gZCkgPyBkLmRyYXdfYmFjayA6IDA7DQogICAgICAgIHRoaXMuZHJhd19sYXkgPSAoJ2RyYXdfbGF5JyBpbiBkKSA/IGQuZHJhd19sYXkgOiAwOw0KICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIDogMDsNCiAgICAgICAgdGhpcy50b3RhbF9hdmFpbGFibGUgPSAoJ3RvdGFsX2F2YWlsYWJsZScgaW4gZCkgPyBkLnRvdGFsX2F2YWlsYWJsZSA6IDA7DQogICAgICAgIHRoaXMuZXJyb3IgPSAoJ2Vycm9yJyBpbiBkKSA/IGQuZXJyb3IgOiAnJzsNCiAgICB9DQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEdhbWUucHJvdG90eXBlLCAiU2NvcmUiLCB7DQogICAgICAgIGdldDogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5fcGxheSA/IHRoaXMuc2NvcmVfaG9tZSArICIgLSAiICsgdGhpcy5zY29yZV9hd2F5IDogJyc7DQogICAgICAgIH0sDQogICAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQ0KICAgIH0pOw0KICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShHYW1lLnByb3RvdHlwZSwgIk9yZGVyIiwgew0KICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLm9yZGVyICsgMTsNCiAgICAgICAgfSwNCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlDQogICAgfSk7DQogICAgR2FtZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBjZmcgPSB7fTsNCiAgICAgICAgY2ZnLmlkID0gJ251bWJlcic7DQogICAgICAgIGNmZy5vcmRlciA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfaG9tZSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfYXdheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcub3Blbl9kYXRlID0gJ3N0cmluZyc7DQogICAgICAgIGNmZy53aW5fYmFjayA9ICdudW1iZXInOw0KICAgICAgICBjZmcud2luX2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcubG9zZV9iYWNrID0gJ251bWJlcic7DQogICAgICAgIGNmZy5sb3NlX2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuZHJhd19iYWNrID0gJ251bWJlcic7DQogICAgICAgIGNmZy5kcmF3X2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcudG90YWxfbWF0Y2hlZCA9ICdudW1iZXInOw0KICAgICAgICBjZmcudG90YWxfYXZhaWxhYmxlID0gJ251bWJlcic7DQogICAgICAgIHJldHVybiBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QodGhpcywgY2ZnKTsNCiAgICB9Ow0KICAgIEdhbWUucHJvdG90eXBlLmFwcGx5R2FtZUNoYW5nZXMgPSBmdW5jdGlvbiAoYSkgew0KICAgICAgICBpZiAoYS5vcmRlcikNCiAgICAgICAgICAgIHRoaXMub3JkZXIgPSBhLm9yZGVyOw0KICAgICAgICBpZiAoYS5zY29yZV9ob21lKQ0KICAgICAgICAgICAgdGhpcy5zY29yZV9ob21lID0gYS5zY29yZV9ob21lOw0KICAgICAgICBpZiAoYS5zY29yZV9hd2F5KQ0KICAgICAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gYS5zY29yZV9hd2F5Ow0KICAgICAgICBpZiAoYS5pbl9wbGF5KQ0KICAgICAgICAgICAgdGhpcy5pbl9wbGF5ID0gYS5pbl9wbGF5Ow0KICAgICAgICBpZiAoYS50aW1lKQ0KICAgICAgICAgICAgdGhpcy50aW1lID0gYS50aW1lOw0KICAgICAgICBpZiAoYS5jb21wZXRpdGlvbikNCiAgICAgICAgICAgIHRoaXMuY29tcGV0aXRpb24gPSBhLmNvbXBldGl0aW9uOw0KICAgICAgICBpZiAoYS5jb3VudHJ5KQ0KICAgICAgICAgICAgdGhpcy5jb3VudHJ5ID0gYS5jb3VudHJ5Ow0KICAgICAgICBpZiAoYS53aW5fYmFjaykNCiAgICAgICAgICAgIHRoaXMud2luX2JhY2sgPSBhLndpbl9iYWNrOw0KICAgICAgICBpZiAoYS53aW5fbGF5KQ0KICAgICAgICAgICAgdGhpcy53aW5fbGF5ID0gYS53aW5fbGF5Ow0KICAgICAgICBpZiAoYS5kcmF3X2JhY2spDQogICAgICAgICAgICB0aGlzLmRyYXdfYmFjayA9IGEuZHJhd19iYWNrOw0KICAgICAgICBpZiAoYS5kcmF3X2xheSkNCiAgICAgICAgICAgIHRoaXMuZHJhd19sYXkgPSBhLmRyYXdfbGF5Ow0KICAgICAgICBpZiAoYS5sb3NlX2JhY2spDQogICAgICAgICAgICB0aGlzLmxvc2VfYmFjayA9IGEubG9zZV9iYWNrOw0KICAgICAgICBpZiAoYS5sb3NlX2xheSkNCiAgICAgICAgICAgIHRoaXMubG9zZV9sYXkgPSBhLmxvc2VfbGF5Ow0KICAgICAgICBpZiAoYS50b3RhbF9tYXRjaGVkKQ0KICAgICAgICAgICAgdGhpcy50b3RhbF9tYXRjaGVkID0gYS50b3RhbF9tYXRjaGVkOw0KICAgICAgICBpZiAoYS50b3RhbF9hdmFpbGFibGUpDQogICAgICAgICAgICB0aGlzLnRvdGFsX2F2YWlsYWJsZSA9IGEudG90YWxfYXZhaWxhYmxlOw0KICAgICAgICBpZiAoYS5lcnJvcikNCiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBhLmVycm9yOw0KICAgIH07DQogICAgOw0KICAgIHJldHVybiBHYW1lOw0KfSgpKTsNCmV4cG9ydHMuR2FtZSA9IEdhbWU7DQovLyBzdHJ1Y3QydHM6Z2l0aHViLmNvbS9mcGF3ZWwvYmV0ZmFpcnMvZm9vdGJhbGwvZm9vdGJhbGwyLkdhbWVDaGFuZ2VzDQp2YXIgR2FtZUNoYW5nZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7DQogICAgZnVuY3Rpb24gR2FtZUNoYW5nZXMoZGF0YSkgew0KICAgICAgICB2YXIgZCA9IChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QoZGF0YSkgOiB7fTsNCiAgICAgICAgdGhpcy5pZCA9ICgnaWQnIGluIGQpID8gZC5pZCA6IDA7DQogICAgICAgIHRoaXMub3JkZXIgPSAoJ29yZGVyJyBpbiBkKSA/IGQub3JkZXIgOiBudWxsOw0KICAgICAgICB0aGlzLnNjb3JlX2hvbWUgPSAoJ3Njb3JlX2hvbWUnIGluIGQpID8gZC5zY29yZV9ob21lIDogbnVsbDsNCiAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gKCdzY29yZV9hd2F5JyBpbiBkKSA/IGQuc2NvcmVfYXdheSA6IG51bGw7DQogICAgICAgIHRoaXMuaW5fcGxheSA9ICgnaW5fcGxheScgaW4gZCkgPyBkLmluX3BsYXkgOiBudWxsOw0KICAgICAgICB0aGlzLnRpbWUgPSAoJ3RpbWUnIGluIGQpID8gZC50aW1lIDogbnVsbDsNCiAgICAgICAgdGhpcy5jb21wZXRpdGlvbiA9ICgnY29tcGV0aXRpb24nIGluIGQpID8gZC5jb21wZXRpdGlvbiA6IG51bGw7DQogICAgICAgIHRoaXMuY291bnRyeSA9ICgnY291bnRyeScgaW4gZCkgPyBkLmNvdW50cnkgOiBudWxsOw0KICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIDogbnVsbDsNCiAgICAgICAgdGhpcy53aW5fbGF5ID0gKCd3aW5fbGF5JyBpbiBkKSA/IGQud2luX2xheSA6IG51bGw7DQogICAgICAgIHRoaXMuZHJhd19sYXkgPSAoJ2RyYXdfbGF5JyBpbiBkKSA/IGQuZHJhd19sYXkgOiBudWxsOw0KICAgICAgICB0aGlzLmRyYXdfYmFjayA9ICgnZHJhd19iYWNrJyBpbiBkKSA/IGQuZHJhd19iYWNrIDogbnVsbDsNCiAgICAgICAgdGhpcy5sb3NlX2xheSA9ICgnbG9zZV9sYXknIGluIGQpID8gZC5sb3NlX2xheSA6IG51bGw7DQogICAgICAgIHRoaXMubG9zZV9iYWNrID0gKCdsb3NlX2JhY2snIGluIGQpID8gZC5sb3NlX2JhY2sgOiBudWxsOw0KICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIDogbnVsbDsNCiAgICAgICAgdGhpcy50b3RhbF9hdmFpbGFibGUgPSAoJ3RvdGFsX2F2YWlsYWJsZScgaW4gZCkgPyBkLnRvdGFsX2F2YWlsYWJsZSA6IG51bGw7DQogICAgICAgIHRoaXMuZXJyb3IgPSAoJ2Vycm9yJyBpbiBkKSA/IGQuZXJyb3IgOiBudWxsOw0KICAgIH0NCiAgICBHYW1lQ2hhbmdlcy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBjZmcgPSB7fTsNCiAgICAgICAgY2ZnLmlkID0gJ251bWJlcic7DQogICAgICAgIGNmZy5vcmRlciA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfaG9tZSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfYXdheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcud2luX2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLndpbl9sYXkgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLmRyYXdfbGF5ID0gJ251bWJlcic7DQogICAgICAgIGNmZy5kcmF3X2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLmxvc2VfbGF5ID0gJ251bWJlcic7DQogICAgICAgIGNmZy5sb3NlX2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLnRvdGFsX21hdGNoZWQgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLnRvdGFsX2F2YWlsYWJsZSA9ICdudW1iZXInOw0KICAgICAgICByZXR1cm4gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlRvT2JqZWN0KHRoaXMsIGNmZyk7DQogICAgfTsNCiAgICByZXR1cm4gR2FtZUNoYW5nZXM7DQp9KCkpOw0KZXhwb3J0cy5HYW1lQ2hhbmdlcyA9IEdhbWVDaGFuZ2VzOw0KLy8gc3RydWN0MnRzOmdpdGh1Yi5jb20vZnBhd2VsL2JldGZhaXJzL2Zvb3RiYWxsL2Zvb3RiYWxsMi5HYW1lc0NoYW5nZXMNCnZhciBHYW1lc0NoYW5nZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7DQogICAgZnVuY3Rpb24gR2FtZXNDaGFuZ2VzKGRhdGEpIHsNCiAgICAgICAgdmFyIGQgPSAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpID8gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlRvT2JqZWN0KGRhdGEpIDoge307DQogICAgICAgIHRoaXMucmVzZXQgPSAoJ3Jlc2V0JyBpbiBkKSA/IGQucmVzZXQgOiBmYWxzZTsNCiAgICAgICAgdGhpcy5uZXcgPSBBcnJheS5pc0FycmF5KGQubmV3KSA/IGQubmV3Lm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IEdhbWUodik7IH0pIDogW107DQogICAgICAgIHRoaXMub3V0ID0gKCdvdXQnIGluIGQpID8gZC5vdXQgOiBbXTsNCiAgICAgICAgdGhpcy51cGQgPSBBcnJheS5pc0FycmF5KGQudXBkKSA/IGQudXBkLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IEdhbWVDaGFuZ2VzKHYpOyB9KSA6IFtdOw0KICAgIH0NCiAgICBHYW1lc0NoYW5nZXMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgICB2YXIgY2ZnID0ge307DQogICAgICAgIHJldHVybiBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QodGhpcywgY2ZnKTsNCiAgICB9Ow0KICAgIHJldHVybiBHYW1lc0NoYW5nZXM7DQp9KCkpOw0KZXhwb3J0cy5HYW1lc0NoYW5nZXMgPSBHYW1lc0NoYW5nZXM7DQpmdW5jdGlvbiBhcHBseV9nYW1lc19jaGFuZ2VzKGdhbWVzLCBnYW1lc0NoYW5nZXMpIHsNCiAgICBpZiAoZ2FtZXNDaGFuZ2VzLnJlc2V0KSB7DQogICAgICAgIHJldHVybiBnYW1lc0NoYW5nZXMubmV3Ow0KICAgIH0NCiAgICB2YXIgdSA9IGdldEdhbWVzQ2hhbmdlcyhnYW1lc0NoYW5nZXMpOw0KICAgIHZhciBuZXh0R2FtZXMgPSBnYW1lc0NoYW5nZXMubmV3Ow0KICAgIGdhbWVzLmZpbHRlcihmdW5jdGlvbiAoZ2FtZSkgew0KICAgICAgICByZXR1cm4gISh1Lm91dC5oYXMoZ2FtZS5pZCkgfHwgdS5uZXcuaGFzKGdhbWUuaWQpKTsNCiAgICB9KS5tYXAoZnVuY3Rpb24gKGdhbWUpIHsNCiAgICAgICAgdmFyIGdhbWVDaGFuZ2VzID0gdS51cGQuZ2V0KGdhbWUuaWQpOw0KICAgICAgICBpZiAoZ2FtZUNoYW5nZXMpIHsNCiAgICAgICAgICAgIGdhbWUuYXBwbHlHYW1lQ2hhbmdlcyhnYW1lQ2hhbmdlcyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGdhbWU7DQogICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZ2FtZSkgeyByZXR1cm4gbmV4dEdhbWVzLnB1c2goZ2FtZSk7IH0pOw0KICAgIG5leHRHYW1lcy5zb3J0KGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4Lm9yZGVyIC0geS5vcmRlcjsgfSk7DQogICAgdmFyIGlkX2dhbWUgPSBuZXcgTWFwKCk7DQogICAgdmFyIG9yZGVyX2dhbWUgPSBuZXcgTWFwKCk7DQogICAgZm9yICh2YXIgX2kgPSAwLCBuZXh0R2FtZXNfMSA9IG5leHRHYW1lczsgX2kgPCBuZXh0R2FtZXNfMS5sZW5ndGg7IF9pKyspIHsNCiAgICAgICAgdmFyIHggPSBuZXh0R2FtZXNfMVtfaV07DQogICAgICAgIHZhciBmb3JtYXRHYW1lID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgub3JkZXIgKyAiICIgKyB4LmhvbWUgKyAiICIgKyB4LmF3YXk7IH07DQogICAgICAgIHZhciB5ID0gaWRfZ2FtZS5nZXQoeC5pZCk7DQogICAgICAgIGlmICh5KSB7DQogICAgICAgICAgICByZXR1cm4gImFzc2VydCB1bmlxdWUgZ2FtZSBpZDogIiArIGZvcm1hdEdhbWUoeCkgKyAiIGFuZCAiICsgZm9ybWF0R2FtZSh5KTsNCiAgICAgICAgfQ0KICAgICAgICBpZF9nYW1lLnNldCh4LmlkLCB4KTsNCiAgICAgICAgdmFyIHogPSBvcmRlcl9nYW1lLmdldCh4Lm9yZGVyKTsNCiAgICAgICAgaWYgKHopIHsNCiAgICAgICAgICAgIHJldHVybiAiYXNzZXJ0IHVuaXF1ZSBnYW1lIG9yZGVyOiAiICsgZm9ybWF0R2FtZSh4KSArICIgYW5kICIgKyBmb3JtYXRHYW1lKHopOw0KICAgICAgICB9DQogICAgICAgIG9yZGVyX2dhbWUuc2V0KHgub3JkZXIsIHgpOw0KICAgIH0NCiAgICByZXR1cm4gbmV4dEdhbWVzOw0KfQ0KZXhwb3J0cy5hcHBseV9nYW1lc19jaGFuZ2VzID0gYXBwbHlfZ2FtZXNfY2hhbmdlczsNCmZ1bmN0aW9uIGdldEdhbWVzQ2hhbmdlcyh4KSB7DQogICAgdmFyIHIgPSB7DQogICAgICAgIG91dDogbmV3IFNldCgpLA0KICAgICAgICBuZXc6IG5ldyBNYXAoKSwNCiAgICAgICAgdXBkOiBuZXcgTWFwKCksDQogICAgfTsNCiAgICBpZiAoeC5vdXQpIHsNCiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHgub3V0OyBfaSA8IF9hLmxlbmd0aDsgX2krKykgew0KICAgICAgICAgICAgdmFyIHZhbHVlID0gX2FbX2ldOw0KICAgICAgICAgICAgci5vdXQuYWRkKHZhbHVlKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoeC5uZXcpIHsNCiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHgubmV3OyBfYiA8IF9jLmxlbmd0aDsgX2IrKykgew0KICAgICAgICAgICAgdmFyIHZhbHVlID0gX2NbX2JdOw0KICAgICAgICAgICAgci5uZXcuc2V0KHZhbHVlLmlkLCB2YWx1ZSk7DQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKHgudXBkKSB7DQogICAgICAgIGZvciAodmFyIF9kID0gMCwgX2UgPSB4LnVwZDsgX2QgPCBfZS5sZW5ndGg7IF9kKyspIHsNCiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9lW19kXTsNCiAgICAgICAgICAgIHIudXBkLnNldCh2YWx1ZS5pZCwgdmFsdWUpOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiByOw0KfQ0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9pbmRleC50c3giOgovKiEqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvaW5kZXgudHN4ICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cg0KdmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7DQogICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDsNCiAgICB2YXIgcmVzdWx0ID0ge307DQogICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTsNCiAgICByZXN1bHRbImRlZmF1bHQiXSA9IG1vZDsNCiAgICByZXR1cm4gcmVzdWx0Ow0KfTsNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7DQp2YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gInJlYWN0IikpOw0KdmFyIFJlYWN0RE9NID0gX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LWRvbSAqLyAicmVhY3QtZG9tIikpOw0KdmFyIEZvb3RiYWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwgKi8gIi4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwudHN4Iik7DQpSZWFjdERPTS5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChGb290YmFsbF8xLkZvb3RiYWxsLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcCIpKTsNCgoKLyoqKi8gfSksCgovKioqLyAiLi9zcmMvdXRpbHMvZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVycy50cyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvdXRpbHMvZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVycy50cyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KLy8gaGVscGVycw0KdmFyIG1heFVuaXhUU0luU2Vjb25kcyA9IDk5OTk5OTk5OTk7DQpleHBvcnRzLm1heFVuaXhUU0luU2Vjb25kcyA9IG1heFVuaXhUU0luU2Vjb25kczsNCmZ1bmN0aW9uIFBhcnNlRGF0ZShkKSB7DQogICAgaWYgKGQgaW5zdGFuY2VvZiBEYXRlKQ0KICAgICAgICByZXR1cm4gZDsNCiAgICBpZiAodHlwZW9mIGQgPT09ICdudW1iZXInKSB7DQogICAgICAgIGlmIChkID4gbWF4VW5peFRTSW5TZWNvbmRzKQ0KICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGQpOw0KICAgICAgICByZXR1cm4gbmV3IERhdGUoZCAqIDEwMDApOyAvLyBnbyB0cw0KICAgIH0NCiAgICByZXR1cm4gbmV3IERhdGUoZCk7DQp9DQpleHBvcnRzLlBhcnNlRGF0ZSA9IFBhcnNlRGF0ZTsNCmZ1bmN0aW9uIFBhcnNlTnVtYmVyKHYsIGlzSW50KSB7DQogICAgaWYgKGlzSW50ID09PSB2b2lkIDApIHsgaXNJbnQgPSBmYWxzZTsgfQ0KICAgIGlmICghdikNCiAgICAgICAgcmV0dXJuIDA7DQogICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykNCiAgICAgICAgcmV0dXJuIHY7DQogICAgcmV0dXJuIChpc0ludCA/IHBhcnNlSW50KHYpIDogcGFyc2VGbG9hdCh2KSkgfHwgMDsNCn0NCmV4cG9ydHMuUGFyc2VOdW1iZXIgPSBQYXJzZU51bWJlcjsNCmZ1bmN0aW9uIEZyb21BcnJheShDdG9yLCBkYXRhLCBkZWYpIHsNCiAgICBpZiAoZGVmID09PSB2b2lkIDApIHsgZGVmID0gbnVsbDsgfQ0KICAgIGlmICghZGF0YSB8fCAhT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoKQ0KICAgICAgICByZXR1cm4gZGVmOw0KICAgIHZhciBkID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07DQogICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgQ3Rvcih2KTsgfSk7DQp9DQpleHBvcnRzLkZyb21BcnJheSA9IEZyb21BcnJheTsNCmZ1bmN0aW9uIFRvT2JqZWN0KG8sIHR5cGVPckNmZywgY2hpbGQpIHsNCiAgICBpZiAodHlwZU9yQ2ZnID09PSB2b2lkIDApIHsgdHlwZU9yQ2ZnID0ge307IH0NCiAgICBpZiAoY2hpbGQgPT09IHZvaWQgMCkgeyBjaGlsZCA9IGZhbHNlOyB9DQogICAgaWYgKCFvKQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICBpZiAodHlwZW9mIG8udG9PYmplY3QgPT09ICdmdW5jdGlvbicgJiYgY2hpbGQpDQogICAgICAgIHJldHVybiBvLnRvT2JqZWN0KCk7DQogICAgc3dpdGNoICh0eXBlb2Ygbykgew0KICAgICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgICAgICAgcmV0dXJuIHR5cGVPckNmZyA9PT0gJ251bWJlcicgPyBQYXJzZU51bWJlcihvKSA6IG87DQogICAgICAgIGNhc2UgJ2Jvb2xlYW4nOg0KICAgICAgICBjYXNlICdudW1iZXInOg0KICAgICAgICAgICAgcmV0dXJuIG87DQogICAgfQ0KICAgIGlmIChvIGluc3RhbmNlb2YgRGF0ZSkgew0KICAgICAgICByZXR1cm4gdHlwZU9yQ2ZnID09PSAnc3RyaW5nJyA/IG8udG9JU09TdHJpbmcoKSA6IE1hdGguZmxvb3Ioby5nZXRUaW1lKCkgLyAxMDAwKTsNCiAgICB9DQogICAgaWYgKEFycmF5LmlzQXJyYXkobykpDQogICAgICAgIHJldHVybiBvLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gVG9PYmplY3QodiwgdHlwZU9yQ2ZnLCB0cnVlKTsgfSk7DQogICAgdmFyIGQgPSB7fTsNCiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMobyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7DQogICAgICAgIHZhciBrID0gX2FbX2ldOw0KICAgICAgICB2YXIgdiA9IG9ba107DQogICAgICAgIGlmICghdikNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICBkW2tdID0gVG9PYmplY3QodiwgdHlwZU9yQ2ZnW2tdIHx8IHt9LCB0cnVlKTsNCiAgICB9DQogICAgcmV0dXJuIGQ7DQp9DQpleHBvcnRzLlRvT2JqZWN0ID0gVG9PYmplY3Q7DQovL2ltcG9ydCB7bWF4VW5peFRTSW5TZWNvbmRzLCBQYXJzZURhdGUsIFBhcnNlTnVtYmVyLCBGcm9tQXJyYXksIFRvT2JqZWN0fSBmcm9tICIuL2dvbGFuZ190eXBlc2NyaXB0aWZ5X2hlbHBlcnMiOw0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy91dGlscy91dGlscy50cyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL3V0aWxzL3V0aWxzLnRzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KZnVuY3Rpb24gd2ViU29ja2V0VVJMKHVyaSkgew0KICAgIHZhciBwcm90byA9IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sLnJlcGxhY2UoImh0dHAiLCAid3MiKTsNCiAgICByZXR1cm4gcHJvdG8gKyAiLy8iICsgZG9jdW1lbnQubG9jYXRpb24uaG9zdCArIHVyaTsNCn0NCmV4cG9ydHMud2ViU29ja2V0VVJMID0gd2ViU29ja2V0VVJMOw0KCgovKioqLyB9KSwKCi8qKiovIDA6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBtdWx0aSAuL3NyYy9pbmRleC50c3ggKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaW5kZXgudHN4ICovIi4vc3JjL2luZGV4LnRzeCIpOwoKCi8qKiovIH0pLAoKLyoqKi8gInJlYWN0IjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBleHRlcm5hbCAiUmVhY3QiICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsKCi8qKiovIH0pLAoKLyoqKi8gInJlYWN0LWRvbSI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgIlJlYWN0RE9NIiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007CgovKioqLyB9KQoKLyoqKioqKi8gfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFw\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js.map", "\"eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvZm9vdGJhbGwuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVjb25uZWN0aW5nd2Vic29ja2V0L3JlY29ubmVjdGluZy13ZWJzb2NrZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2Zvb3RiYWxsLmNzcz8wNWNlIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2dhbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVycy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdXRpbHMudHMiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiUmVhY3RcIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJSZWFjdERPTVwiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFF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QTtBQUNBO0FBQ0EsY0FBYzs7QUFFZCxrREFBa0Qsc0JBQXNCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7O0FBRUEsNkJBQTZCLG1CQUFtQjs7QUFFaEQ7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7Ozs7Ozs7OztBQzFYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVyxFQUFFO0FBQ3JELHdDQUF3QyxXQUFXLEVBQUU7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esc0NBQXNDO0FBQ3RDLEdBQUc7QUFDSDtBQUNBLDhEQUE4RDtBQUM5RDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN4RkEsb0VBQStCO0FBQy9CLG9GQUErRDtBQUMvRCxrS0FBMEQ7QUFDMUQsbUZBQStDO0FBQy9DLG9GQUF3QjtBQUV4QixJQUFLLEdBZ0JKO0FBaEJELFdBQUssR0FBRztJQUNKLHNCQUFlO0lBQ2Ysb0JBQWE7SUFDYixzQkFBZTtJQUNmLG9CQUFhO0lBQ2Isb0JBQWE7SUFDYixrQ0FBMkI7SUFDM0IsMEJBQW1CO0lBQ25CLHNDQUErQjtJQUMvQiwwQ0FBbUM7SUFDbkMsNEJBQXFCO0lBQ3JCLDBCQUFtQjtJQUNuQiw4QkFBdUI7SUFDdkIsNEJBQXFCO0lBQ3JCLDhCQUF1QjtJQUN2Qiw0QkFBcUI7QUFDekIsQ0FBQyxFQWhCSSxHQUFHLEtBQUgsR0FBRyxRQWdCUDtBQUVELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFFLFVBQUMsQ0FBQyxJQUFLLFFBQWUsRUFBZixDQUFlLENBQUMsQ0FBQztBQUkzRCxJQUFNLGlCQUFpQixHQUFHLFVBQUMsQ0FBUSxJQUF1QixRQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUcsQ0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQWYsQ0FBZSxDQUFDO0FBQzFFLElBQU0sWUFBWSxHQUFHLFVBQUMsQ0FBUSxJQUF1QixRQUFDLENBQUMsQ0FBQyxDQUFJLENBQUMsTUFBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQWhCLENBQWdCLENBQUM7QUFDdEUsSUFBTSxlQUFlLEdBQXlCO0lBQzFDLFNBQVMsRUFBQyxPQUFPO0lBQ2pCLFNBQVMsRUFBQyxRQUFRO0NBQ3JCLENBQUM7QUFFRixJQUFNLFFBQVEsR0FBRyxVQUFDLENBQU07SUFLcEIsUUFBUSxDQUFDLEVBQUU7UUFDUCxLQUFLLEdBQUcsQ0FBQyxLQUFLO1lBQ1YsT0FBTztnQkFDSCxLQUFLLEVBQUUsR0FBRztnQkFDVixLQUFLLEVBQUUsVUFBQyxDQUFDLElBQU0sUUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQVgsQ0FBVzthQUM3QixDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsSUFBSTtZQUNULE9BQU87Z0JBQ0gsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsS0FBSyxFQUFFLFVBQUMsQ0FBQyxJQUFLLFFBQUMsQ0FBQyxJQUFJLEVBQU4sQ0FBTTtnQkFDcEIsS0FBSyxFQUFFLEVBQUUsU0FBUyxFQUFDLFFBQVEsRUFBRTthQUNoQyxDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsSUFBSTtZQUNULE9BQU87Z0JBQ0gsS0FBSyxFQUFFLFVBQVU7Z0JBQ2pCLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTSxRQUFDLENBQUMsSUFBSSxFQUFOLENBQU07Z0JBQ3JCLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBQyxRQUFRLEVBQUU7YUFDaEMsQ0FBQztRQUVOLEtBQUssR0FBRyxDQUFDLEtBQUs7WUFDVixPQUFPO2dCQUNILEtBQUssRUFBRSxNQUFNO2dCQUNiLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTyxRQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBSyxDQUFDLENBQUMsVUFBVSxXQUFNLENBQUMsQ0FBQyxVQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBckQsQ0FBcUQ7Z0JBQ3JFLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBQyxRQUFRLEVBQUU7YUFDaEMsQ0FBQztRQUVOLEtBQUssR0FBRyxDQUFDLElBQUk7WUFDVCxPQUFPO2dCQUNILEtBQUssRUFBRSxPQUFPO2dCQUNkLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTyxRQUFDLENBQUMsSUFBSSxFQUFOLENBQU07Z0JBQ3RCLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBQyxRQUFRLEVBQUU7YUFDaEMsQ0FBQztRQUVOLEtBQUssR0FBRyxDQUFDLFdBQVc7WUFDaEIsT0FBTztnQkFDSCxLQUFLLEVBQUUsV0FBVztnQkFDbEIsS0FBSyxFQUFFLFVBQUMsQ0FBQyxJQUFNLFFBQUMsQ0FBQyxXQUFXLEVBQWIsQ0FBYTthQUMvQixDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsT0FBTztZQUNaLE9BQU87Z0JBQ0gsS0FBSyxFQUFFLFFBQVE7Z0JBQ2YsS0FBSyxFQUFFLFVBQUMsQ0FBQyxJQUFNLFFBQUMsQ0FBQyxPQUFPLEVBQVQsQ0FBUzthQUMzQixDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsYUFBYTtZQUNsQixPQUFPO2dCQUNILEtBQUssRUFBRSxRQUFRO2dCQUNmLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTSxtQkFBWSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsRUFBN0IsQ0FBNkI7Z0JBQzVDLEtBQUssRUFBRSxlQUFlO2FBQ3pCLENBQUM7UUFFTixLQUFLLEdBQUcsQ0FBQyxlQUFlO1lBQ3BCLE9BQU87Z0JBQ0gsS0FBSyxFQUFFLFdBQVc7Z0JBQ2xCLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTSxtQkFBWSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsRUFBL0IsQ0FBK0I7Z0JBQzlDLEtBQUssRUFBRSxlQUFlO2FBQ3pCLENBQUM7UUFFTixLQUFLLEdBQUcsQ0FBQyxRQUFRO1lBQ2IsT0FBTztnQkFDSCxLQUFLLEVBQUUsS0FBSztnQkFDWixLQUFLLEVBQUUsVUFBQyxDQUFDLElBQU0sd0JBQWlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUE3QixDQUE2QjtnQkFDNUMsS0FBSyxFQUFFLGVBQWU7YUFDekIsQ0FBQztRQUVOLEtBQUssR0FBRyxDQUFDLE9BQU87WUFDWixPQUFPO2dCQUNILEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTSx3QkFBaUIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQTVCLENBQTRCO2dCQUMzQyxLQUFLLEVBQUUsZUFBZTthQUN6QixDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsU0FBUztZQUNkLE9BQU87Z0JBQ0gsS0FBSyxFQUFFLElBQUk7Z0JBQ1gsS0FBSyxFQUFFLFVBQUMsQ0FBQyxJQUFNLHdCQUFpQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBOUIsQ0FBOEI7Z0JBQzdDLEtBQUssRUFBRSxlQUFlO2FBQ3pCLENBQUM7UUFFTixLQUFLLEdBQUcsQ0FBQyxRQUFRO1lBQ2IsT0FBTztnQkFDSCxLQUFLLEVBQUUsSUFBSTtnQkFDWCxLQUFLLEVBQUUsVUFBQyxDQUFDLElBQU0sd0JBQWlCLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUE3QixDQUE2QjtnQkFDNUMsS0FBSyxFQUFFLGVBQWU7YUFDekIsQ0FBQztRQUVOLEtBQUssR0FBRyxDQUFDLFNBQVM7WUFDZCxPQUFPO2dCQUNILEtBQUssRUFBRSxLQUFLO2dCQUNaLEtBQUssRUFBRSxVQUFDLENBQUMsSUFBTSx3QkFBaUIsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQTdCLENBQTZCO2dCQUM1QyxLQUFLLEVBQUUsZUFBZTthQUN6QixDQUFDO1FBRU4sS0FBSyxHQUFHLENBQUMsUUFBUTtZQUNiLE9BQU87Z0JBQ0gsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osS0FBSyxFQUFFLFVBQUMsQ0FBQyxJQUFNLHdCQUFpQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBN0IsQ0FBNkI7Z0JBQzVDLEtBQUssRUFBRSxlQUFlO2FBQ3pCLENBQUM7S0FDVDtBQUNMLENBQUMsQ0FBQztBQVdGO0lBQThCLDRCQUEwQjtJQUVwRCxrQkFBWSxLQUFTO1FBQXJCLFlBQ0ksa0JBQU0sS0FBSyxDQUFDLFNBR2Y7UUFGRyxLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDWixLQUFJLENBQUMsY0FBYyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxDQUFDOztJQUN6RCxDQUFDO0lBRUQsdUJBQUksR0FBSjtRQUFBLGlCQWlDQztRQWhDRyxJQUFNLEVBQUUsR0FBRyxJQUFJLCtCQUFxQixDQUFDLG9CQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFO1lBQ2hFLEtBQUssRUFBRSxJQUFJO1lBQ1gsYUFBYSxFQUFFLEtBQUs7U0FDdkIsQ0FBQyxDQUFDO1FBQ0gsRUFBRSxDQUFDLFNBQVMsR0FBRyxVQUFDLEtBQUs7WUFDakIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxVQUFDLENBQVE7Z0JBQ25CLElBQU0sQ0FBQyxHQUFHLDBCQUFtQixDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxtQkFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakYsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2pCLEtBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxDQUFDO29CQUN0QixLQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ1osT0FBTyxLQUFJLENBQUMsS0FBSyxDQUFDO2lCQUNyQjtnQkFDRCxvQkFBWSxDQUFDLElBQUUsS0FBSyxFQUFFLENBQUMsSUFBSTtZQUMvQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQztRQUNGLEVBQUUsQ0FBQyxPQUFPLEdBQUc7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQztRQUNGLEVBQUUsQ0FBQyxZQUFZLEdBQUc7WUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDO1FBQ0YsRUFBRSxDQUFDLE1BQU0sR0FBRztZQUNSLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDakMsQ0FBQyxDQUFDO1FBQ0YsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNULEVBQUUsRUFBRSxFQUFFO1lBQ04sS0FBSyxFQUFFLEVBQUU7WUFDVCxRQUFRLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDbkIsUUFBUSxFQUFFLEtBQUs7U0FDbEI7SUFDTCxDQUFDO0lBR00sbUJBQVUsR0FBakIsVUFBbUIsQ0FBSyxFQUFFLENBQU07UUFDNUIsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLE9BQU8sNEJBQUksR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLGVBQU0sQ0FBQyxDQUFDLEtBQUssS0FDaEMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDVixDQUFDO0lBQ1YsQ0FBQztJQUVELGlDQUFjLEdBQWQsVUFBZ0IsQ0FBSztRQUFyQixpQkF3QkM7UUF2QkcsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2Q7O3lDQUcrQixFQUg5QixVQUFFLEVBQUUsYUFBSyxDQUdzQjtRQUN0QyxPQUFPLDRCQUNILEdBQUcsRUFBRSxDQUFDLEVBRU4sT0FBTyxFQUFHLFVBQUMsS0FBSztnQkFDWixLQUFJLENBQUMsUUFBUSxjQUFLLEtBQUksQ0FBQyxLQUFLLElBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBRSxDQUFDO1lBQzFHLENBQUMsRUFDRCxLQUFLLEVBQUUsRUFBQyxNQUFNLEVBQUMsU0FBUyxFQUFDO1lBQ3hCLENBQUMsQ0FBQyxLQUFLO1lBQ1IsOEJBQ0ksS0FBSyxFQUFFO29CQUNILEtBQUssRUFBRyxLQUFLO29CQUNiLFVBQVUsRUFBQyxNQUFNO29CQUNqQixRQUFRLEVBQUMsRUFBRTtvQkFDWCxVQUFVLEVBQUUsdUNBQXVDO2lCQUN0RCxJQUNBLEVBQUUsQ0FDQSxDQUNOLENBQUM7SUFDVixDQUFDO0lBRUQseUJBQU0sR0FBTjtRQUFBLGlCQXNCQztRQXJCRyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDcEQsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckMsS0FBSyxDQUFDLElBQUksQ0FBRSxVQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2IsSUFBTSxDQUFDLEdBQVEsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFCLElBQU0sQ0FBQyxHQUFRLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxQixPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZGLENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTywrQkFBTyxTQUFTLEVBQUUsZ0JBQWdCO1lBQ3JDO2dCQUNBLGdDQUNLLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUM3QixDQUNHO1lBQ1IsbUNBQ0MsS0FBSyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUM7Z0JBQ1QsbUNBQUksR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLElBQ1AsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQUMsSUFBSyxlQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBeEIsQ0FBd0IsQ0FBRSxDQUMzQztZQUZMLENBRUssQ0FDUixDQUNPLENBQ0o7SUFDWixDQUFDO0lBQ0wsZUFBQztBQUFELENBQUMsQ0FwRzZCLEtBQUssQ0FBQyxTQUFTLEdBb0c1QztBQXBHWSw0QkFBUTs7Ozs7Ozs7Ozs7OztBQ3pKckI7O0FBRUE7O0FBRUE7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxZOzs7Ozs7Ozs7Ozs7OztBQ25CQSx3SkFBNkU7QUFFN0UsK0RBQStEO0FBQy9EO0lBOEJJLGNBQVksSUFBVTtRQUVsQixJQUFNLENBQUMsR0FBUSxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsdUNBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNsRCxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxZQUFZLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFvQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQWtCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUMvRCxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLGFBQWEsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQXFCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsU0FBUyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBaUIsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzNELElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLHdDQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzFFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDNUUsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLGlCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBeUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN6RCxDQUFDO0lBL0JELHNCQUFJLHVCQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFJLElBQUksQ0FBQyxVQUFVLFdBQU0sSUFBSSxDQUFDLFVBQVksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pFLENBQUM7OztPQUFBO0lBRUQsc0JBQUksdUJBQUs7YUFBVDtZQUNJLE9BQU8sSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7UUFDMUIsQ0FBQzs7O09BQUE7SUEyQkQsdUJBQVEsR0FBUjtRQUNJLElBQU0sR0FBRyxHQUFRLEVBQUUsQ0FBQztRQUNwQixHQUFHLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUNsQixHQUFHLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUNyQixHQUFHLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUMxQixHQUFHLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztRQUMxQixHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUN6QixHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN4QixHQUFHLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN2QixHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUN6QixHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN4QixHQUFHLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztRQUN6QixHQUFHLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN4QixHQUFHLENBQUMsYUFBYSxHQUFHLFFBQVEsQ0FBQztRQUM3QixHQUFHLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztRQUMvQixPQUFPLHVDQUFRLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRCwrQkFBZ0IsR0FBaEIsVUFBaUIsQ0FBYztRQUMzQixJQUFJLENBQUMsQ0FBQyxLQUFLO1lBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxDQUFDLFVBQVU7WUFDWixJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxDQUFDLENBQUMsVUFBVTtZQUNaLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsQ0FBQyxPQUFPO1lBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxDQUFDLElBQUk7WUFDTixJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLENBQUMsV0FBVztZQUNiLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNyQyxJQUFJLENBQUMsQ0FBQyxPQUFPO1lBQ1QsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxDQUFDLFFBQVE7WUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLENBQUMsT0FBTztZQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsQ0FBQyxTQUFTO1lBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxDQUFDLFFBQVE7WUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDL0IsSUFBSSxDQUFDLENBQUMsU0FBUztZQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsQ0FBQyxRQUFRO1lBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQy9CLElBQUksQ0FBQyxDQUFDLGFBQWE7WUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDekMsSUFBSSxDQUFDLENBQUMsZUFBZTtZQUNqQixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQyxlQUFlLENBQUM7UUFDN0MsSUFBSSxDQUFDLENBQUMsS0FBSztZQUNQLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBQUEsQ0FBQztJQUNOLFdBQUM7QUFBRCxDQUFDO0FBM0dZLG9CQUFJO0FBOEdqQixzRUFBc0U7QUFDdEU7SUFtQkkscUJBQVksSUFBVTtRQUNsQixJQUFNLENBQUMsR0FBUSxDQUFDLElBQUksSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsdUNBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hFLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDdkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLFlBQVksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQW9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN0RSxJQUFJLENBQUMsVUFBVSxHQUFHLENBQUMsWUFBWSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBb0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDOUQsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3BELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFxQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLFNBQVMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQWlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3RCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ2hFLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFpQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDN0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLFVBQVUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNoRSxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBbUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxVQUFVLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDaEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLFdBQVcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQW1CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNuRSxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsZUFBZSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBdUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9FLElBQUksQ0FBQyxlQUFlLEdBQUcsQ0FBQyxpQkFBaUIsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQXlCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyRixJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBZSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDM0QsQ0FBQztJQUVELDhCQUFRLEdBQVI7UUFDSSxJQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxRQUFRLENBQUM7UUFDbEIsR0FBRyxDQUFDLEtBQUssR0FBRyxRQUFRLENBQUM7UUFDckIsR0FBRyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDMUIsR0FBRyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUM7UUFDMUIsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDeEIsR0FBRyxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFDdkIsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDeEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDekIsR0FBRyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDeEIsR0FBRyxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7UUFDekIsR0FBRyxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUM7UUFDN0IsR0FBRyxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUM7UUFDL0IsT0FBTyx1Q0FBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0wsa0JBQUM7QUFBRCxDQUFDO0FBeERZLGtDQUFXO0FBMkR4Qix1RUFBdUU7QUFDdkU7SUFNSSxzQkFBWSxJQUFVO1FBQ2xCLElBQU0sQ0FBQyxHQUFRLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyx1Q0FBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDeEUsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQWdCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUN6RCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQU0sSUFBSyxXQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBWCxDQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzFFLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNqRCxJQUFJLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQU0sSUFBSyxXQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDckYsQ0FBQztJQUVELCtCQUFRLEdBQVI7UUFDSSxJQUFNLEdBQUcsR0FBUSxFQUFFLENBQUM7UUFDcEIsT0FBTyx1Q0FBUSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDO0FBbEJZLG9DQUFZO0FBb0J6Qiw2QkFBb0MsS0FBYSxFQUFFLFlBQTBCO0lBRXpFLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtRQUNwQixPQUFPLFlBQVksQ0FBQyxHQUFHLENBQUM7S0FDM0I7SUFFRCxJQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7SUFFeEMsSUFBSSxTQUFTLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztJQUVqQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSTtRQUNkLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJO1FBQ1IsSUFBTSxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsSUFBSSxJQUFLLGdCQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFwQixDQUFvQixDQUFDLENBQUM7SUFDM0MsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssUUFBQyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFqQixDQUFpQixDQUFDLENBQUM7SUFFNUMsSUFBSSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFDdEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFFekMsS0FBYyxVQUFTLEVBQVQsdUJBQVMsRUFBVCx1QkFBUyxFQUFULElBQVMsRUFBRTtRQUFwQixJQUFJLENBQUM7UUFDTixJQUFNLFVBQVUsR0FBRyxVQUFDLENBQU8sSUFBSyxPQUFHLENBQUMsQ0FBQyxLQUFLLFNBQUksQ0FBQyxDQUFDLElBQUksU0FBSSxDQUFDLENBQUMsSUFBTSxFQUFoQyxDQUFnQyxDQUFDO1FBRWpFLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxFQUFFO1lBQ0gsT0FBTyw0QkFBMEIsVUFBVSxDQUFDLENBQUMsQ0FBQyxhQUFRLFVBQVUsQ0FBQyxDQUFDLENBQUcsQ0FBQztTQUN6RTtRQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUVyQixJQUFNLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsRUFBRTtZQUNILE9BQU8sK0JBQTZCLFVBQVUsQ0FBQyxDQUFDLENBQUMsYUFBUSxVQUFVLENBQUMsQ0FBQyxDQUFHLENBQUM7U0FDNUU7UUFDRCxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDOUI7SUFFRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBekNELGtEQXlDQztBQUdELHlCQUF5QixDQUFlO0lBQ3BDLElBQUksQ0FBQyxHQUFHO1FBQ0osR0FBRyxFQUFFLElBQUksR0FBRyxFQUFVO1FBQ3RCLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBZ0I7UUFDNUIsR0FBRyxFQUFFLElBQUksR0FBRyxFQUF1QjtLQUN0QyxDQUFDO0lBR0YsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFO1FBQ1AsS0FBa0IsVUFBSyxFQUFMLE1BQUMsQ0FBQyxHQUFHLEVBQUwsY0FBSyxFQUFMLElBQUssRUFBRTtZQUFwQixJQUFJLEtBQUs7WUFDVixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNwQjtLQUNKO0lBRUQsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFO1FBQ1AsS0FBa0IsVUFBSyxFQUFMLE1BQUMsQ0FBQyxHQUFHLEVBQUwsY0FBSyxFQUFMLElBQUssRUFBRTtZQUFwQixJQUFJLEtBQUs7WUFDVixDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQzlCO0tBQ0o7SUFFRCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUU7UUFDUCxLQUFrQixVQUFLLEVBQUwsTUFBQyxDQUFDLEdBQUcsRUFBTCxjQUFLLEVBQUwsSUFBSyxFQUFFO1lBQXBCLElBQUksS0FBSztZQUNWLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDOUI7S0FDSjtJQUNELE9BQU8sQ0FBQyxDQUFDO0FBQ2IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3hRRCxvRUFBK0I7QUFDL0IsK0VBQXNDO0FBQ3RDLHFIQUEwRDtBQUUxRCxRQUFRLENBQUMsTUFBTSxDQUNYLG9CQUFDLG1CQUFRLE9BQUksRUFDYixRQUFRLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUNqQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7QUNORixVQUFVO0FBQ1YsSUFBTSxrQkFBa0IsR0FBRyxVQUFVLENBQUM7QUF1RGxDLGdEQUFrQjtBQXJEdEIsbUJBQW1CLENBQXlCO0lBQzNDLElBQUksQ0FBQyxZQUFZLElBQUk7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNoQyxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUMxQixJQUFJLENBQUMsR0FBRyxrQkFBa0I7WUFBRSxPQUFPLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUTtLQUNuQztJQUNELE9BQU8sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQStDQSw4QkFBUztBQTdDVixxQkFBcUIsQ0FBa0IsRUFBRSxLQUFhO0lBQWIscUNBQWE7SUFDckQsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQixJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVE7UUFBRSxPQUFPLENBQUMsQ0FBQztJQUNwQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBMENBLGtDQUFXO0FBeENaLG1CQUFzQixJQUF3QixFQUFFLElBQWtCLEVBQUUsR0FBVTtJQUFWLGdDQUFVO0lBQzdFLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUNuRCxJQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUMsQ0FBTSxJQUFLLFdBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO0FBQ3ZDLENBQUM7QUFxQ0EsOEJBQVM7QUFuQ1Ysa0JBQWtCLENBQU0sRUFBRSxTQUFtQixFQUFFLEtBQWE7SUFBbEMsMENBQW1CO0lBQUUscUNBQWE7SUFDM0QsSUFBSSxDQUFDLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUNwQixJQUFJLE9BQU8sQ0FBQyxDQUFDLFFBQVEsS0FBSyxVQUFVLElBQUksS0FBSztRQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBRW5FLFFBQVEsT0FBTyxDQUFDLEVBQUU7UUFDakIsS0FBSyxRQUFRO1lBQ1osT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRCxLQUFLLFNBQVMsQ0FBQztRQUNmLEtBQUssUUFBUTtZQUNaLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7SUFFRCxJQUFJLENBQUMsWUFBWSxJQUFJLEVBQUU7UUFDdEIsT0FBTyxTQUFTLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ2pGO0lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUFFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFDLENBQU0sSUFBSyxlQUFRLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQyxDQUFDO0lBRTdFLElBQU0sQ0FBQyxHQUFRLEVBQUUsQ0FBQztJQUVsQixLQUFnQixVQUFjLEVBQWQsV0FBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBZCxjQUFjLEVBQWQsSUFBYyxFQUFFO1FBQTNCLElBQU0sQ0FBQztRQUNYLElBQU0sQ0FBQyxHQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwQixJQUFJLENBQUMsQ0FBQztZQUFFLFNBQVM7UUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM3QztJQUVELE9BQU8sQ0FBQyxDQUFDO0FBQ1YsQ0FBQztBQVNBLDRCQUFRO0FBR1QsaUhBQWlIOzs7Ozs7Ozs7Ozs7Ozs7QUNoRWpILHNCQUE4QixHQUFZO0lBQ3RDLElBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDL0QsT0FBVSxLQUFLLFVBQUssUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsR0FBSyxDQUFDO0FBQ3ZELENBQUM7QUFIRCxvQ0FHQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSEQsdUI7Ozs7Ozs7Ozs7O0FDQUEsMEIiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwidGFibGUuZm9vdGJhbGwtdGFibGUge1xcclxcbiAgICBib3JkZXItc3BhY2luZzogMDtcXHJcXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxufVxcclxcbnRhYmxlLmZvb3RiYWxsLXRhYmxlIHRoIHtcXHJcXG4gICAgcG9zaXRpb246IHN0aWNreTtcXHJcXG4gICAgdG9wOiAxcHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7XFxyXFxuICAgIGhlaWdodDogNDBweDtcXHJcXG59XFxyXFxudGFibGUuZm9vdGJhbGwtdGFibGUgdHI6bnRoLWNoaWxkKGV2ZW4pIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2U0ZTRlNDtcXHJcXG59XFxyXFxudGFibGUuZm9vdGJhbGwtdGFibGUgdGgsIHRhYmxlLmZvb3RiYWxsLXRhYmxlIHRkIHtcXHJcXG4gICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNiYWJhYmE7XFxyXFxuXFxyXFxuICAgIGJvcmRlci1yaWdodDogc29saWQgMXB4ICNiYWJhYmE7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiBzb2xpZCAxcHggI2JhYmFiYTtcXHJcXG59XFxyXFxuXFxyXFxudGFibGUuZm9vdGJhbGwtdGFibGUgdGQge1xcclxcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xcclxcbiAgICBwYWRkaW5nOiAycHggNHB4O1xcclxcbn1cXHJcXG5cXHJcXG50YWJsZS5mb290YmFsbC10YWJsZSB0aDpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IGRhcmtncmV5O1xcclxcbiAgICBjb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8vIE1JVCBMaWNlbnNlOlxuLy9cbi8vIENvcHlyaWdodCAoYykgMjAxMC0yMDEyLCBKb2UgV2FsbmVzXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuLyoqXG4gKiBUaGlzIGJlaGF2ZXMgbGlrZSBhIFdlYlNvY2tldCBpbiBldmVyeSB3YXksIGV4Y2VwdCBpZiBpdCBmYWlscyB0byBjb25uZWN0LFxuICogb3IgaXQgZ2V0cyBkaXNjb25uZWN0ZWQsIGl0IHdpbGwgcmVwZWF0ZWRseSBwb2xsIHVudGlsIGl0IHN1Y2Nlc3NmdWxseSBjb25uZWN0c1xuICogYWdhaW4uXG4gKlxuICogSXQgaXMgQVBJIGNvbXBhdGlibGUsIHNvIHdoZW4geW91IGhhdmU6XG4gKiAgIHdzID0gbmV3IFdlYlNvY2tldCgnd3M6Ly8uLi4uJyk7XG4gKiB5b3UgY2FuIHJlcGxhY2Ugd2l0aDpcbiAqICAgd3MgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KCd3czovLy4uLi4nKTtcbiAqXG4gKiBUaGUgZXZlbnQgc3RyZWFtIHdpbGwgdHlwaWNhbGx5IGxvb2sgbGlrZTpcbiAqICBvbmNvbm5lY3RpbmdcbiAqICBvbm9wZW5cbiAqICBvbm1lc3NhZ2VcbiAqICBvbm1lc3NhZ2VcbiAqICBvbmNsb3NlIC8vIGxvc3QgY29ubmVjdGlvblxuICogIG9uY29ubmVjdGluZ1xuICogIG9ub3BlbiAgLy8gc29tZXRpbWUgbGF0ZXIuLi5cbiAqICBvbm1lc3NhZ2VcbiAqICBvbm1lc3NhZ2VcbiAqICBldGMuLi5cbiAqXG4gKiBJdCBpcyBBUEkgY29tcGF0aWJsZSB3aXRoIHRoZSBzdGFuZGFyZCBXZWJTb2NrZXQgQVBJLCBhcGFydCBmcm9tIHRoZSBmb2xsb3dpbmcgbWVtYmVyczpcbiAqXG4gKiAtIGBidWZmZXJlZEFtb3VudGBcbiAqIC0gYGV4dGVuc2lvbnNgXG4gKiAtIGBiaW5hcnlUeXBlYFxuICpcbiAqIExhdGVzdCB2ZXJzaW9uOiBodHRwczovL2dpdGh1Yi5jb20vam9ld2FsbmVzL3JlY29ubmVjdGluZy13ZWJzb2NrZXQvXG4gKiAtIEpvZSBXYWxuZXNcbiAqXG4gKiBTeW50YXhcbiAqID09PT09PVxuICogdmFyIHNvY2tldCA9IG5ldyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpO1xuICpcbiAqIFBhcmFtZXRlcnNcbiAqID09PT09PT09PT1cbiAqIHVybCAtIFRoZSB1cmwgeW91IGFyZSBjb25uZWN0aW5nIHRvLlxuICogcHJvdG9jb2xzIC0gT3B0aW9uYWwgc3RyaW5nIG9yIGFycmF5IG9mIHByb3RvY29scy5cbiAqIG9wdGlvbnMgLSBTZWUgYmVsb3dcbiAqXG4gKiBPcHRpb25zXG4gKiA9PT09PT09XG4gKiBPcHRpb25zIGNhbiBlaXRoZXIgYmUgcGFzc2VkIHVwb24gaW5zdGFudGlhdGlvbiBvciBzZXQgYWZ0ZXIgaW5zdGFudGlhdGlvbjpcbiAqXG4gKiB2YXIgc29ja2V0ID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwsIG51bGwsIHsgZGVidWc6IHRydWUsIHJlY29ubmVjdEludGVydmFsOiA0MDAwIH0pO1xuICpcbiAqIG9yXG4gKlxuICogdmFyIHNvY2tldCA9IG5ldyBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsKTtcbiAqIHNvY2tldC5kZWJ1ZyA9IHRydWU7XG4gKiBzb2NrZXQucmVjb25uZWN0SW50ZXJ2YWwgPSA0MDAwO1xuICpcbiAqIGRlYnVnXG4gKiAtIFdoZXRoZXIgdGhpcyBpbnN0YW5jZSBzaG91bGQgbG9nIGRlYnVnIG1lc3NhZ2VzLiBBY2NlcHRzIHRydWUgb3IgZmFsc2UuIERlZmF1bHQ6IGZhbHNlLlxuICpcbiAqIGF1dG9tYXRpY09wZW5cbiAqIC0gV2hldGhlciBvciBub3QgdGhlIHdlYnNvY2tldCBzaG91bGQgYXR0ZW1wdCB0byBjb25uZWN0IGltbWVkaWF0ZWx5IHVwb24gaW5zdGFudGlhdGlvbi4gVGhlIHNvY2tldCBjYW4gYmUgbWFudWFsbHkgb3BlbmVkIG9yIGNsb3NlZCBhdCBhbnkgdGltZSB1c2luZyB3cy5vcGVuKCkgYW5kIHdzLmNsb3NlKCkuXG4gKlxuICogcmVjb25uZWN0SW50ZXJ2YWxcbiAqIC0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0LiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDEwMDAuXG4gKlxuICogbWF4UmVjb25uZWN0SW50ZXJ2YWxcbiAqIC0gVGhlIG1heGltdW0gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBhIHJlY29ubmVjdGlvbiBhdHRlbXB0LiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDMwMDAwLlxuICpcbiAqIHJlY29ubmVjdERlY2F5XG4gKiAtIFRoZSByYXRlIG9mIGluY3JlYXNlIG9mIHRoZSByZWNvbm5lY3QgZGVsYXkuIEFsbG93cyByZWNvbm5lY3QgYXR0ZW1wdHMgdG8gYmFjayBvZmYgd2hlbiBwcm9ibGVtcyBwZXJzaXN0LiBBY2NlcHRzIGludGVnZXIgb3IgZmxvYXQuIERlZmF1bHQ6IDEuNS5cbiAqXG4gKiB0aW1lb3V0SW50ZXJ2YWxcbiAqIC0gVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQgYmVmb3JlIGNsb3NpbmcgYW5kIHJldHJ5aW5nLiBBY2NlcHRzIGludGVnZXIuIERlZmF1bHQ6IDIwMDAuXG4gKlxuICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKXtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2xvYmFsLlJlY29ubmVjdGluZ1dlYlNvY2tldCA9IGZhY3RvcnkoKTtcbiAgICB9XG59KSh0aGlzLCBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAoISgnV2ViU29ja2V0JyBpbiB3aW5kb3cpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpIHtcblxuICAgICAgICAvLyBEZWZhdWx0IHNldHRpbmdzXG4gICAgICAgIHZhciBzZXR0aW5ncyA9IHtcblxuICAgICAgICAgICAgLyoqIFdoZXRoZXIgdGhpcyBpbnN0YW5jZSBzaG91bGQgbG9nIGRlYnVnIG1lc3NhZ2VzLiAqL1xuICAgICAgICAgICAgZGVidWc6IGZhbHNlLFxuXG4gICAgICAgICAgICAvKiogV2hldGhlciBvciBub3QgdGhlIHdlYnNvY2tldCBzaG91bGQgYXR0ZW1wdCB0byBjb25uZWN0IGltbWVkaWF0ZWx5IHVwb24gaW5zdGFudGlhdGlvbi4gKi9cbiAgICAgICAgICAgIGF1dG9tYXRpY09wZW46IHRydWUsXG5cbiAgICAgICAgICAgIC8qKiBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBiZWZvcmUgYXR0ZW1wdGluZyB0byByZWNvbm5lY3QuICovXG4gICAgICAgICAgICByZWNvbm5lY3RJbnRlcnZhbDogMTAwMCxcbiAgICAgICAgICAgIC8qKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGEgcmVjb25uZWN0aW9uIGF0dGVtcHQuICovXG4gICAgICAgICAgICBtYXhSZWNvbm5lY3RJbnRlcnZhbDogMzAwMDAsXG4gICAgICAgICAgICAvKiogVGhlIHJhdGUgb2YgaW5jcmVhc2Ugb2YgdGhlIHJlY29ubmVjdCBkZWxheS4gQWxsb3dzIHJlY29ubmVjdCBhdHRlbXB0cyB0byBiYWNrIG9mZiB3aGVuIHByb2JsZW1zIHBlcnNpc3QuICovXG4gICAgICAgICAgICByZWNvbm5lY3REZWNheTogMS41LFxuXG4gICAgICAgICAgICAvKiogVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQgYmVmb3JlIGNsb3NpbmcgYW5kIHJldHJ5aW5nLiAqL1xuICAgICAgICAgICAgdGltZW91dEludGVydmFsOiAyMDAwLFxuXG4gICAgICAgICAgICAvKiogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlY29ubmVjdGlvbiBhdHRlbXB0cyB0byBtYWtlLiBVbmxpbWl0ZWQgaWYgbnVsbC4gKi9cbiAgICAgICAgICAgIG1heFJlY29ubmVjdEF0dGVtcHRzOiBudWxsXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfVxuXG4gICAgICAgIC8vIE92ZXJ3cml0ZSBhbmQgZGVmaW5lIHNldHRpbmdzIHdpdGggb3B0aW9ucyBpZiB0aGV5IGV4aXN0LlxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9uc1trZXldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gc2V0dGluZ3Nba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZXNlIHNob3VsZCBiZSB0cmVhdGVkIGFzIHJlYWQtb25seSBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLyoqIFRoZSBVUkwgYXMgcmVzb2x2ZWQgYnkgdGhlIGNvbnN0cnVjdG9yLiBUaGlzIGlzIGFsd2F5cyBhbiBhYnNvbHV0ZSBVUkwuIFJlYWQgb25seS4gKi9cbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG5cbiAgICAgICAgLyoqIFRoZSBudW1iZXIgb2YgYXR0ZW1wdGVkIHJlY29ubmVjdHMgc2luY2Ugc3RhcnRpbmcsIG9yIHRoZSBsYXN0IHN1Y2Nlc3NmdWwgY29ubmVjdGlvbi4gUmVhZCBvbmx5LiAqL1xuICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbm5lY3Rpb24uXG4gICAgICAgICAqIENhbiBiZSBvbmUgb2Y6IFdlYlNvY2tldC5DT05ORUNUSU5HLCBXZWJTb2NrZXQuT1BFTiwgV2ViU29ja2V0LkNMT1NJTkcsIFdlYlNvY2tldC5DTE9TRURcbiAgICAgICAgICogUmVhZCBvbmx5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgc3RyaW5nIGluZGljYXRpbmcgdGhlIG5hbWUgb2YgdGhlIHN1Yi1wcm90b2NvbCB0aGUgc2VydmVyIHNlbGVjdGVkOyB0aGlzIHdpbGwgYmUgb25lIG9mXG4gICAgICAgICAqIHRoZSBzdHJpbmdzIHNwZWNpZmllZCBpbiB0aGUgcHJvdG9jb2xzIHBhcmFtZXRlciB3aGVuIGNyZWF0aW5nIHRoZSBXZWJTb2NrZXQgb2JqZWN0LlxuICAgICAgICAgKiBSZWFkIG9ubHkuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnByb3RvY29sID0gbnVsbDtcblxuICAgICAgICAvLyBQcml2YXRlIHN0YXRlIHZhcmlhYmxlc1xuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHdzO1xuICAgICAgICB2YXIgZm9yY2VkQ2xvc2UgPSBmYWxzZTtcbiAgICAgICAgdmFyIHRpbWVkT3V0ID0gZmFsc2U7XG4gICAgICAgIHZhciBldmVudFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgIC8vIFdpcmUgdXAgXCJvbipcIiBwcm9wZXJ0aWVzIGFzIGV2ZW50IGhhbmRsZXJzXG5cbiAgICAgICAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICAgICAgIGZ1bmN0aW9uKGV2ZW50KSB7IHNlbGYub25vcGVuKGV2ZW50KTsgfSk7XG4gICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgICAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9uY2xvc2UoZXZlbnQpOyB9KTtcbiAgICAgICAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY29ubmVjdGluZycsIGZ1bmN0aW9uKGV2ZW50KSB7IHNlbGYub25jb25uZWN0aW5nKGV2ZW50KTsgfSk7XG4gICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9ubWVzc2FnZShldmVudCk7IH0pO1xuICAgICAgICBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICAgICAgZnVuY3Rpb24oZXZlbnQpIHsgc2VsZi5vbmVycm9yKGV2ZW50KTsgfSk7XG5cbiAgICAgICAgLy8gRXhwb3NlIHRoZSBBUEkgcmVxdWlyZWQgYnkgRXZlbnRUYXJnZXRcblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIgPSBldmVudFRhcmdldC5hZGRFdmVudExpc3RlbmVyLmJpbmQoZXZlbnRUYXJnZXQpO1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBldmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQoZXZlbnRUYXJnZXQpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQgPSBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50LmJpbmQoZXZlbnRUYXJnZXQpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBhbiBldmVudCB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCBzdGFuZGFyZFxuICAgICAgICAgKiBjb21wbGlhbnQgYnJvd3NlcnMgYW5kIElFOSAtIElFMTFcbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyB3aWxsIHByZXZlbnQgdGhlIGVycm9yOlxuICAgICAgICAgKiBPYmplY3QgZG9lc24ndCBzdXBwb3J0IHRoaXMgYWN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTkzNDUzOTIvd2h5LWFyZW50LW15LXBhcmFtZXRlcnMtZ2V0dGluZy1wYXNzZWQtdGhyb3VnaC10by1hLWRpc3BhdGNoZWQtZXZlbnQvMTkzNDU1NjMjMTkzNDU1NjNcbiAgICAgICAgICogQHBhcmFtIHMgU3RyaW5nIFRoZSBuYW1lIHRoYXQgdGhlIGV2ZW50IHNob3VsZCB1c2VcbiAgICAgICAgICogQHBhcmFtIGFyZ3MgT2JqZWN0IGFuIG9wdGlvbmFsIG9iamVjdCB0aGF0IHRoZSBldmVudCB3aWxsIHVzZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVFdmVudChzLCBhcmdzKSB7XG4gICAgICAgIFx0dmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgIFx0ZXZ0LmluaXRDdXN0b21FdmVudChzLCBmYWxzZSwgZmFsc2UsIGFyZ3MpO1xuICAgICAgICBcdHJldHVybiBldnQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5vcGVuID0gZnVuY3Rpb24gKHJlY29ubmVjdEF0dGVtcHQpIHtcbiAgICAgICAgICAgIHdzID0gbmV3IFdlYlNvY2tldChzZWxmLnVybCwgcHJvdG9jb2xzIHx8IFtdKTtcblxuICAgICAgICAgICAgaWYgKHJlY29ubmVjdEF0dGVtcHQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cyAmJiB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID4gdGhpcy5tYXhSZWNvbm5lY3RBdHRlbXB0cykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGdlbmVyYXRlRXZlbnQoJ2Nvbm5lY3RpbmcnKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdhdHRlbXB0LWNvbm5lY3QnLCBzZWxmLnVybCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsb2NhbFdzID0gd3M7XG4gICAgICAgICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdjb25uZWN0aW9uLXRpbWVvdXQnLCBzZWxmLnVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRpbWVkT3V0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBsb2NhbFdzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgdGltZWRPdXQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0sIHNlbGYudGltZW91dEludGVydmFsKTtcblxuICAgICAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbm9wZW4nLCBzZWxmLnVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbGYucHJvdG9jb2wgPSB3cy5wcm90b2NvbDtcbiAgICAgICAgICAgICAgICBzZWxmLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuT1BFTjtcbiAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdEF0dGVtcHRzID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IGdlbmVyYXRlRXZlbnQoJ29wZW4nKTtcbiAgICAgICAgICAgICAgICBlLmlzUmVjb25uZWN0ID0gcmVjb25uZWN0QXR0ZW1wdDtcbiAgICAgICAgICAgICAgICByZWNvbm5lY3RBdHRlbXB0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChlKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHdzLm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICB3cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlZENsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TRUQ7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VuZXJhdGVFdmVudCgnY2xvc2UnKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gZ2VuZXJhdGVFdmVudCgnY29ubmVjdGluZycpO1xuICAgICAgICAgICAgICAgICAgICBlLmNvZGUgPSBldmVudC5jb2RlO1xuICAgICAgICAgICAgICAgICAgICBlLnJlYXNvbiA9IGV2ZW50LnJlYXNvbjtcbiAgICAgICAgICAgICAgICAgICAgZS53YXNDbGVhbiA9IGV2ZW50Lndhc0NsZWFuO1xuICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29ubmVjdEF0dGVtcHQgJiYgIXRpbWVkT3V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZWJ1ZyB8fCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdSZWNvbm5lY3RpbmdXZWJTb2NrZXQnLCAnb25jbG9zZScsIHNlbGYudXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZ2VuZXJhdGVFdmVudCgnY2xvc2UnKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGltZW91dCA9IHNlbGYucmVjb25uZWN0SW50ZXJ2YWwgKiBNYXRoLnBvdyhzZWxmLnJlY29ubmVjdERlY2F5LCBzZWxmLnJlY29ubmVjdEF0dGVtcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0QXR0ZW1wdHMrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3Blbih0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgdGltZW91dCA+IHNlbGYubWF4UmVjb25uZWN0SW50ZXJ2YWwgPyBzZWxmLm1heFJlY29ubmVjdEludGVydmFsIDogdGltZW91dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHdzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbm1lc3NhZ2UnLCBzZWxmLnVybCwgZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBlID0gZ2VuZXJhdGVFdmVudCgnbWVzc2FnZScpO1xuICAgICAgICAgICAgICAgIGUuZGF0YSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChlKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3cy5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZWJ1ZyB8fCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ29uZXJyb3InLCBzZWxmLnVybCwgZXZlbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGdlbmVyYXRlRXZlbnQoJ2Vycm9yJykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdoZXRoZXIgb3Igbm90IHRvIGNyZWF0ZSBhIHdlYnNvY2tldCB1cG9uIGluc3RhbnRpYXRpb25cbiAgICAgICAgaWYgKHRoaXMuYXV0b21hdGljT3BlbiA9PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW4oZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYW5zbWl0cyBkYXRhIHRvIHRoZSBzZXJ2ZXIgb3ZlciB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwYXJhbSBkYXRhIGEgdGV4dCBzdHJpbmcsIEFycmF5QnVmZmVyIG9yIEJsb2IgdG8gc2VuZCB0byB0aGUgc2VydmVyLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zZW5kID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgaWYgKHdzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdzZW5kJywgc2VsZi51cmwsIGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gd3Muc2VuZChkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgJ0lOVkFMSURfU1RBVEVfRVJSIDogUGF1c2luZyB0byByZWNvbm5lY3Qgd2Vic29ja2V0JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ2xvc2VzIHRoZSBXZWJTb2NrZXQgY29ubmVjdGlvbiBvciBjb25uZWN0aW9uIGF0dGVtcHQsIGlmIGFueS5cbiAgICAgICAgICogSWYgdGhlIGNvbm5lY3Rpb24gaXMgYWxyZWFkeSBDTE9TRUQsIHRoaXMgbWV0aG9kIGRvZXMgbm90aGluZy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgQ0xPU0VfTk9STUFMIGNvZGVcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvZGUgPSAxMDAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yY2VkQ2xvc2UgPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHdzKSB7XG4gICAgICAgICAgICAgICAgd3MuY2xvc2UoY29kZSwgcmVhc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQWRkaXRpb25hbCBwdWJsaWMgQVBJIG1ldGhvZCB0byByZWZyZXNoIHRoZSBjb25uZWN0aW9uIGlmIHN0aWxsIG9wZW4gKGNsb3NlLCByZS1vcGVuKS5cbiAgICAgICAgICogRm9yIGV4YW1wbGUsIGlmIHRoZSBhcHAgc3VzcGVjdHMgYmFkIGRhdGEgLyBtaXNzZWQgaGVhcnQgYmVhdHMsIGl0IGNhbiB0cnkgdG8gcmVmcmVzaC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVmcmVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHdzKSB7XG4gICAgICAgICAgICAgICAgd3MuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gT1BFTjtcbiAgICAgKiB0aGlzIGluZGljYXRlcyB0aGF0IHRoZSBjb25uZWN0aW9uIGlzIHJlYWR5IHRvIHNlbmQgYW5kIHJlY2VpdmUgZGF0YS5cbiAgICAgKi9cbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uKGV2ZW50KSB7fTtcbiAgICAvKiogQW4gZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uJ3MgcmVhZHlTdGF0ZSBjaGFuZ2VzIHRvIENMT1NFRC4gKi9cbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbihldmVudCkge307XG4gICAgLyoqIEFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGNhbGxlZCB3aGVuIGEgY29ubmVjdGlvbiBiZWdpbnMgYmVpbmcgYXR0ZW1wdGVkLiAqL1xuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25jb25uZWN0aW5nID0gZnVuY3Rpb24oZXZlbnQpIHt9O1xuICAgIC8qKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiBhIG1lc3NhZ2UgaXMgcmVjZWl2ZWQgZnJvbSB0aGUgc2VydmVyLiAqL1xuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHt9O1xuICAgIC8qKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuICovXG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHt9O1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbGwgaW5zdGFuY2VzIG9mIFJlY29ubmVjdGluZ1dlYlNvY2tldCBzaG91bGQgbG9nIGRlYnVnIG1lc3NhZ2VzLlxuICAgICAqIFNldHRpbmcgdGhpcyB0byB0cnVlIGlzIHRoZSBlcXVpdmFsZW50IG9mIHNldHRpbmcgYWxsIGluc3RhbmNlcyBvZiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWcgdG8gdHJ1ZS5cbiAgICAgKi9cbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwgPSBmYWxzZTtcblxuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5DT05ORUNUSU5HID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7XG4gICAgUmVjb25uZWN0aW5nV2ViU29ja2V0Lk9QRU4gPSBXZWJTb2NrZXQuT1BFTjtcbiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuQ0xPU0lORyA9IFdlYlNvY2tldC5DTE9TSU5HO1xuICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5DTE9TRUQgPSBXZWJTb2NrZXQuQ0xPU0VEO1xuXG4gICAgcmV0dXJuIFJlY29ubmVjdGluZ1dlYlNvY2tldDtcbn0pO1xuIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cblxudmFyIHN0eWxlc0luRG9tID0ge307XG5cbnZhclx0bWVtb2l6ZSA9IGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbztcblxuXHRyZXR1cm4gZnVuY3Rpb24gKCkge1xuXHRcdGlmICh0eXBlb2YgbWVtbyA9PT0gXCJ1bmRlZmluZWRcIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0cmV0dXJuIG1lbW87XG5cdH07XG59O1xuXG52YXIgaXNPbGRJRSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuXHQvLyBUZXN0IGZvciBJRSA8PSA5IGFzIHByb3Bvc2VkIGJ5IEJyb3dzZXJoYWNrc1xuXHQvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG5cdC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcblx0Ly8gdG8gb3BlcmF0ZSBjb3JyZWN0bHkgaW50byBub24tc3RhbmRhcmQgZW52aXJvbm1lbnRzXG5cdC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuXHRyZXR1cm4gd2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7XG59KTtcblxudmFyIGdldFRhcmdldCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlIFwiaGVhZFwiIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmVcbiAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAgICAgLy8gICBpbnNlcnRJbnRvOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2Zvb1wiKS5zaGFkb3dSb290IH1cbiAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdHZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7XG5cdFx0XHQvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXHRcdFx0aWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG5cdFx0XHRcdFx0Ly8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuXHRcdFx0XHR9IGNhdGNoKGUpIHtcblx0XHRcdFx0XHRzdHlsZVRhcmdldCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1t0YXJnZXRdXG5cdH07XG59KSgpO1xuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhclx0c2luZ2xldG9uQ291bnRlciA9IDA7XG52YXJcdHN0eWxlc0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyXHRmaXhVcmxzID0gcmVxdWlyZShcIi4vdXJsc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7XG5cdGlmICh0eXBlb2YgREVCVUcgIT09IFwidW5kZWZpbmVkXCIgJiYgREVCVUcpIHtcblx0XHRpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3R5bGUtbG9hZGVyIGNhbm5vdCBiZSB1c2VkIGluIGEgbm9uLWJyb3dzZXIgZW52aXJvbm1lbnRcIik7XG5cdH1cblxuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRvcHRpb25zLmF0dHJzID0gdHlwZW9mIG9wdGlvbnMuYXR0cnMgPT09IFwib2JqZWN0XCIgPyBvcHRpb25zLmF0dHJzIDoge307XG5cblx0Ly8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG5cdC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2Vcblx0aWYgKCFvcHRpb25zLnNpbmdsZXRvbiAmJiB0eXBlb2Ygb3B0aW9ucy5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuICAgICAgICBpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRpZihvcHRpb25zLmF0dHJzLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuXHRcdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge2FwcGx5X2dhbWVzX2NoYW5nZXMsIEdhbWUsIEdhbWVzQ2hhbmdlc30gZnJvbSBcIi4vZ2FtZVwiO1xyXG5pbXBvcnQgUmVjb25uZWN0aW5nV2ViU29ja2V0IGZyb20gXCJyZWNvbm5lY3Rpbmd3ZWJzb2NrZXRcIjtcclxuaW1wb3J0IHt3ZWJTb2NrZXRVUkx9IGZyb20gXCIuLi8uLi91dGlscy91dGlsc1wiO1xyXG5pbXBvcnQgXCIuL2Zvb3RiYWxsLmNzc1wiO1xyXG5cclxuZW51bSBDb2wge1xyXG4gICAgb3JkZXIgPSAnb3JkZXInLFxyXG4gICAgaG9tZSA9ICdob21lJyxcclxuICAgIHNjb3JlID0gJ3Njb3JlJyxcclxuICAgIGF3YXkgPSAnYXdheScsXHJcbiAgICB0aW1lID0gJ3RpbWUnLFxyXG4gICAgY29tcGV0aXRpb24gPSAnY29tcGV0aXRpb24nLFxyXG4gICAgY291bnRyeSA9ICdjb3VudHJ5JyxcclxuICAgIHRvdGFsX21hdGNoZWQgPSAndG90YWxfbWF0Y2hlZCcsXHJcbiAgICB0b3RhbF9hdmFpbGFibGUgPSAndG90YWxfYXZhaWxhYmxlJyxcclxuICAgIHdpbl9iYWNrID0gJ3dpbl9iYWNrJyxcclxuICAgIHdpbl9sYXkgPSAnd2luX2xheScsXHJcbiAgICBkcmF3X2JhY2sgPSAnZHJhd19iYWNrJyxcclxuICAgIGRyYXdfbGF5ID0gJ2RyYXdfbGF5JyxcclxuICAgIGxvc2VfYmFjayA9ICdsb3NlX2JhY2snLFxyXG4gICAgbG9zZV9sYXkgPSAnbG9zZV9sYXknLFxyXG59XHJcblxyXG5jb25zdCBjb2xzID0gT2JqZWN0LmtleXMoQ29sKS5tYXAoIChrKSA9PiBrIGFzIGFueSBhcyBDb2wpO1xyXG5cclxuXHJcblxyXG5jb25zdCByZW5kZXJDb2VmZmljaWVudCA9ICh2Om51bWJlcikgOiBSZWFjdC5SZWFjdE5vZGUgPT4gdiA/IGAke3Z9YCA6ICcnO1xyXG5jb25zdCByZW5kZXJEb2xsYXIgPSAodjpudW1iZXIpIDogUmVhY3QuUmVhY3ROb2RlID0+IHYgPyBgJHt2fSRgIDogJyc7XHJcbmNvbnN0IGxlZnRBbGlnbkl0YWxpYyA6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7XHJcbiAgICB0ZXh0QWxpZ246XCJyaWdodFwiLFxyXG4gICAgZm9udFN0eWxlOlwiaXRhbGljXCIsXHJcbn07XHJcblxyXG5jb25zdCBjb2xfaW5mbyA9ICh4OiBDb2wpIDoge1xyXG4gICAgdGl0bGU6IHN0cmluZyxcclxuICAgIHZhbHVlOiAoeDogR2FtZSkgPT4gUmVhY3QuUmVhY3ROb2RlLFxyXG4gICAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzLFxyXG59ID0+IHtcclxuICAgIHN3aXRjaCAoeCkge1xyXG4gICAgICAgIGNhc2UgQ29sLm9yZGVyOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfihJYnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh4KSA9PiAgeC5vcmRlciArIDEgLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC5ob21lOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQlNC+0LzQsCcsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHgpID0+IHguaG9tZSxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7IHRleHRBbGlnbjpcImNlbnRlclwiIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wuYXdheTpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn0JIg0LPQvtGB0YLRj9GFJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAoeCkgPT4gIHguYXdheSxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7IHRleHRBbGlnbjpcImNlbnRlclwiIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wuc2NvcmU6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Ch0YfRkdGCJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAoeCkgPT4gICB4LmluX3BsYXkgPyAgYCR7eC5zY29yZV9ob21lfSAtICR7eC5zY29yZV9hd2F5fWAgOiAnJyAsXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogeyB0ZXh0QWxpZ246XCJjZW50ZXJcIiB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGNhc2UgQ29sLnRpbWU6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CS0YDQtdC80Y8nLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh4KSA9PiAgIHgudGltZSxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7IHRleHRBbGlnbjpcImNlbnRlclwiIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wuY29tcGV0aXRpb246XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9Cn0LXQvNC/0LjQvtC90LDRgicsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHgpID0+ICB4LmNvbXBldGl0aW9uLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC5jb3VudHJ5OlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQodGC0YDQsNC90LAnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh4KSA9PiAgeC5jb3VudHJ5LFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC50b3RhbF9tYXRjaGVkOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQkiDQv9Cw0YDQtScsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHgpID0+ICByZW5kZXJEb2xsYXIoeC50b3RhbF9tYXRjaGVkKSxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiBsZWZ0QWxpZ25JdGFsaWMsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIGNhc2UgQ29sLnRvdGFsX2F2YWlsYWJsZTpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn0J3QtSDQsiDQv9Cw0YDQtScsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHgpID0+ICByZW5kZXJEb2xsYXIoeC50b3RhbF9hdmFpbGFibGUpLFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IGxlZnRBbGlnbkl0YWxpYyxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wud2luX2JhY2s6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CfMSsnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh4KSA9PiAgcmVuZGVyQ29lZmZpY2llbnQoeC53aW5fYmFjayksXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC53aW5fbGF5OlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQnzEtJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAoeCkgPT4gIHJlbmRlckNvZWZmaWNpZW50KHgud2luX2xheSksXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC5kcmF3X2JhY2s6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CdKycsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogKHgpID0+ICByZW5kZXJDb2VmZmljaWVudCh4LmRyYXdfYmFjayksXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICBjYXNlIENvbC5kcmF3X2xheTpcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAn0J0tJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAoeCkgPT4gIHJlbmRlckNvZWZmaWNpZW50KHguZHJhd19sYXkpLFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IGxlZnRBbGlnbkl0YWxpYyxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wubG9zZV9iYWNrOlxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfQnzIrJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiAoeCkgPT4gIHJlbmRlckNvZWZmaWNpZW50KHgubG9zZV9sYXkpLFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IGxlZnRBbGlnbkl0YWxpYyxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY2FzZSBDb2wubG9zZV9sYXk6XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ9CfMi0nLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh4KSA9PiAgcmVuZGVyQ29lZmZpY2llbnQoeC5sb3NlX2xheSksXHJcbiAgICAgICAgICAgICAgICBzdHlsZTogbGVmdEFsaWduSXRhbGljLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgfVxyXG59O1xyXG5cclxudHlwZSBzb3J0X2RpciA9ICdhc2MnIHwgJ2Rlc2MnO1xyXG5cclxuaW50ZXJmYWNlIHN0YXRlIHtcclxuICAgIHdzOiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQsXHJcbiAgICBnYW1lczogR2FtZSBbXVxyXG4gICAgc29ydF9jb2w6IENvbDtcclxuICAgIHNvcnRfZGlyOiBzb3J0X2RpcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvb3RiYWxsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PHt9LCBzdGF0ZT4ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiB7fSkge1xyXG4gICAgICAgIHN1cGVyKHByb3BzKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLnJlbmRlckhlYWRDZWxsID0gdGhpcy5yZW5kZXJIZWFkQ2VsbC5iaW5kKHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3Qgd3MgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KHdlYlNvY2tldFVSTCgnL2Zvb3RiYWxsJyksIFtdLCB7XHJcbiAgICAgICAgICAgIGRlYnVnOiB0cnVlLFxyXG4gICAgICAgICAgICBhdXRvbWF0aWNPcGVuOiBmYWxzZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB3cy5vbm1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgoeDogc3RhdGUpOiBzdGF0ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gYXBwbHlfZ2FtZXNfY2hhbmdlcyh4LmdhbWVzLCBuZXcgR2FtZXNDaGFuZ2VzKEpTT04ucGFyc2UoZXZlbnQuZGF0YSkpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUud3MuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLngsIGdhbWVzOiB2LCB9O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdzLm9uY2xvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid3M6IGNsb3NlZFwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdzLm9uY29ubmVjdGluZyA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ3czogY29ubmVjdGluZ1wiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdzLm9ub3BlbiA9ICgpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ3czogY29ubmVjdGVkXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgd3Mub3BlbigpO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XHJcbiAgICAgICAgICAgIHdzOiB3cyxcclxuICAgICAgICAgICAgZ2FtZXM6IFtdLFxyXG4gICAgICAgICAgICBzb3J0X2NvbDogQ29sLm9yZGVyLFxyXG4gICAgICAgICAgICBzb3J0X2RpcjogJ2FzYycsXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBzdGF0aWMgcmVuZGVyQ2VsbCAoYzpDb2wsIHg6R2FtZSkge1xyXG4gICAgICAgIGxldCBhID0gY29sX2luZm8oYyk7XHJcbiAgICAgICAgcmV0dXJuIDx0ZCBrZXk9e2N9IHN0eWxlPXt7Li4uYS5zdHlsZX19ID5cclxuICAgICAgICAgICAge2EudmFsdWUoeCl9XHJcbiAgICAgICAgPC90ZD47XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVySGVhZENlbGwgKGM6Q29sKSB7XHJcbiAgICAgICAgbGV0IGEgPSBjb2xfaW5mbyhjKTtcclxuICAgICAgICBjb25zdCBbY2gsIGNvbG9yXSA9XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc29ydF9jb2wgPT09IGNcclxuICAgICAgICAgICAgICAgID8gWyB0aGlzLnN0YXRlLnNvcnRfZGlyID09PSAnYXNjJyA/ICfihpMnIDogJ+KGkScsICdyZ2IoODUsIDg1LCA4NSknXVxyXG4gICAgICAgICAgICAgICAgOiBbJ+KGlScsICdyZ2IoMjA0LCAyMDQsIDIwNCknXTtcclxuICAgICAgICByZXR1cm4gPHRoXHJcbiAgICAgICAgICAgIGtleT17Y31cclxuXHJcbiAgICAgICAgICAgIG9uQ2xpY2s9eyAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoey4uLnRoaXMuc3RhdGUsIHNvcnRfY29sOiBjLCBzb3J0X2RpcjogdGhpcy5zdGF0ZS5zb3J0X2RpciA9PT0gJ2FzYycgPyAnZGVzYycgOiAnYXNjJ30pO1xyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICBzdHlsZT17e2N1cnNvcjoncG9pbnRlcid9fSA+XHJcbiAgICAgICAgICAgIHthLnRpdGxlfVxyXG4gICAgICAgICAgICA8c3BhblxyXG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA6IGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQ6J2JvbGQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOjE2LFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdjYWxpYnJpLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmJ1xyXG4gICAgICAgICAgICAgICAgfX0+XHJcbiAgICAgICAgICAgICAgICB7Y2h9XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICA8L3RoPjtcclxuICAgIH1cclxuXHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgY29uc3Qgc29ydEZ1biA9IGNvbF9pbmZvKHRoaXMuc3RhdGUuc29ydF9jb2wpLnZhbHVlO1xyXG4gICAgICAgIGxldCBnYW1lcyA9IHRoaXMuc3RhdGUuZ2FtZXMuc2xpY2UoKTtcclxuICAgICAgICBnYW1lcy5zb3J0KCAoeCwgeSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBhIDphbnkgPSBzb3J0RnVuKHgpO1xyXG4gICAgICAgICAgICBjb25zdCBiIDphbnkgPSBzb3J0RnVuKHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gKChhIDwgYikgPyAtMSA6IChhID4gYikgPyAxIDogMCkgKiAodGhpcy5zdGF0ZS5zb3J0X2RpciA9PT0gJ2FzYycgPyAxIDogLTEpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiA8dGFibGUgY2xhc3NOYW1lPXsnZm9vdGJhbGwtdGFibGUnfT5cclxuICAgICAgICAgICAgPHRoZWFkPlxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgICB7Y29scy5tYXAodGhpcy5yZW5kZXJIZWFkQ2VsbCl9XHJcbiAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgIDwvdGhlYWQ+XHJcbiAgICAgICAgICAgIDx0Ym9keT5cclxuICAgICAgICAgICAge2dhbWVzLm1hcCgoeCkgPT5cclxuICAgICAgICAgICAgICAgIDx0ciBrZXk9e3guaWR9PlxyXG4gICAgICAgICAgICAgICAgICAgIHsgY29scy5tYXAoKGMpID0+IEZvb3RiYWxsLnJlbmRlckNlbGwoYyx4KSApIH1cclxuICAgICAgICAgICAgICAgIDwvdHI+XHJcbiAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgIDwvdGJvZHk+XHJcbiAgICAgICAgPC90YWJsZT5cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3RiYWxsLmNzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9mb290YmFsbC5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2Zvb3RiYWxsLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImltcG9ydCB7UGFyc2VEYXRlLCBUb09iamVjdH0gZnJvbSBcIi4uLy4uL3V0aWxzL2dvbGFuZ190eXBlc2NyaXB0aWZ5X2hlbHBlcnNcIjtcblxuLy8gc3RydWN0MnRzOmdpdGh1Yi5jb20vZnBhd2VsL2JldGZhaXJzL2Zvb3RiYWxsL2Zvb3RiYWxsMi5HYW1lXG5leHBvcnQgY2xhc3MgR2FtZSB7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBvcmRlcjogbnVtYmVyO1xuICAgIGhvbWU6IHN0cmluZztcbiAgICBhd2F5OiBzdHJpbmc7XG4gICAgc2NvcmVfaG9tZTogbnVtYmVyO1xuICAgIHNjb3JlX2F3YXk6IG51bWJlcjtcbiAgICBpbl9wbGF5OiBib29sZWFuO1xuICAgIHRpbWU6IHN0cmluZztcbiAgICBjb21wZXRpdGlvbjogc3RyaW5nO1xuICAgIGNvdW50cnk6IHN0cmluZztcbiAgICBvcGVuX2RhdGU6IERhdGU7XG4gICAgd2luX2JhY2s6IG51bWJlcjtcbiAgICB3aW5fbGF5OiBudW1iZXI7XG4gICAgbG9zZV9iYWNrOiBudW1iZXI7XG4gICAgbG9zZV9sYXk6IG51bWJlcjtcbiAgICBkcmF3X2JhY2s6IG51bWJlcjtcbiAgICBkcmF3X2xheTogbnVtYmVyO1xuICAgIHRvdGFsX21hdGNoZWQ6IG51bWJlcjtcbiAgICB0b3RhbF9hdmFpbGFibGU6IG51bWJlcjtcbiAgICBlcnJvcjogc3RyaW5nO1xuXG4gICAgZ2V0IFNjb3JlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmluX3BsYXkgPyBgJHt0aGlzLnNjb3JlX2hvbWV9IC0gJHt0aGlzLnNjb3JlX2F3YXl9YCA6ICcnO1xuICAgIH1cblxuICAgIGdldCBPcmRlcigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmRlciArIDE7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoZGF0YT86IGFueSkge1xuXG4gICAgICAgIGNvbnN0IGQ6IGFueSA9IChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBUb09iamVjdChkYXRhKSA6IHt9O1xuICAgICAgICB0aGlzLmlkID0gKCdpZCcgaW4gZCkgPyBkLmlkIGFzIG51bWJlciA6IDA7XG4gICAgICAgIHRoaXMub3JkZXIgPSAoJ29yZGVyJyBpbiBkKSA/IGQub3JkZXIgYXMgbnVtYmVyIDogMDtcbiAgICAgICAgdGhpcy5ob21lID0gKCdob21lJyBpbiBkKSA/IGQuaG9tZSBhcyBzdHJpbmcgOiAnJztcbiAgICAgICAgdGhpcy5hd2F5ID0gKCdhd2F5JyBpbiBkKSA/IGQuYXdheSBhcyBzdHJpbmcgOiAnJztcbiAgICAgICAgdGhpcy5zY29yZV9ob21lID0gKCdzY29yZV9ob21lJyBpbiBkKSA/IGQuc2NvcmVfaG9tZSBhcyBudW1iZXIgOiAwO1xuICAgICAgICB0aGlzLnNjb3JlX2F3YXkgPSAoJ3Njb3JlX2F3YXknIGluIGQpID8gZC5zY29yZV9hd2F5IGFzIG51bWJlciA6IDA7XG4gICAgICAgIHRoaXMuaW5fcGxheSA9ICgnaW5fcGxheScgaW4gZCkgPyBkLmluX3BsYXkgYXMgYm9vbGVhbiA6IGZhbHNlO1xuICAgICAgICB0aGlzLnRpbWUgPSAoJ3RpbWUnIGluIGQpID8gZC50aW1lIGFzIHN0cmluZyA6ICcnO1xuICAgICAgICB0aGlzLmNvbXBldGl0aW9uID0gKCdjb21wZXRpdGlvbicgaW4gZCkgPyBkLmNvbXBldGl0aW9uIGFzIHN0cmluZyA6ICcnO1xuICAgICAgICB0aGlzLmNvdW50cnkgPSAoJ2NvdW50cnknIGluIGQpID8gZC5jb3VudHJ5IGFzIHN0cmluZyA6ICcnO1xuICAgICAgICB0aGlzLm9wZW5fZGF0ZSA9ICgnb3Blbl9kYXRlJyBpbiBkKSA/IFBhcnNlRGF0ZShkLm9wZW5fZGF0ZSkgOiBuZXcgRGF0ZSgpO1xuICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIGFzIG51bWJlciA6IDA7XG4gICAgICAgIHRoaXMud2luX2xheSA9ICgnd2luX2xheScgaW4gZCkgPyBkLndpbl9sYXkgYXMgbnVtYmVyIDogMDtcbiAgICAgICAgdGhpcy5sb3NlX2JhY2sgPSAoJ2xvc2VfYmFjaycgaW4gZCkgPyBkLmxvc2VfYmFjayBhcyBudW1iZXIgOiAwO1xuICAgICAgICB0aGlzLmxvc2VfbGF5ID0gKCdsb3NlX2xheScgaW4gZCkgPyBkLmxvc2VfbGF5IGFzIG51bWJlciA6IDA7XG4gICAgICAgIHRoaXMuZHJhd19iYWNrID0gKCdkcmF3X2JhY2snIGluIGQpID8gZC5kcmF3X2JhY2sgYXMgbnVtYmVyIDogMDtcbiAgICAgICAgdGhpcy5kcmF3X2xheSA9ICgnZHJhd19sYXknIGluIGQpID8gZC5kcmF3X2xheSBhcyBudW1iZXIgOiAwO1xuICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIGFzIG51bWJlciA6IDA7XG4gICAgICAgIHRoaXMudG90YWxfYXZhaWxhYmxlID0gKCd0b3RhbF9hdmFpbGFibGUnIGluIGQpID8gZC50b3RhbF9hdmFpbGFibGUgYXMgbnVtYmVyIDogMDtcbiAgICAgICAgdGhpcy5lcnJvciA9ICgnZXJyb3InIGluIGQpID8gZC5lcnJvciBhcyBzdHJpbmcgOiAnJztcbiAgICB9XG5cbiAgICB0b09iamVjdCgpOiBhbnkge1xuICAgICAgICBjb25zdCBjZmc6IGFueSA9IHt9O1xuICAgICAgICBjZmcuaWQgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLm9yZGVyID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5zY29yZV9ob21lID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5zY29yZV9hd2F5ID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5vcGVuX2RhdGUgPSAnc3RyaW5nJztcbiAgICAgICAgY2ZnLndpbl9iYWNrID0gJ251bWJlcic7XG4gICAgICAgIGNmZy53aW5fbGF5ID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5sb3NlX2JhY2sgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLmxvc2VfbGF5ID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5kcmF3X2JhY2sgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLmRyYXdfbGF5ID0gJ251bWJlcic7XG4gICAgICAgIGNmZy50b3RhbF9tYXRjaGVkID0gJ251bWJlcic7XG4gICAgICAgIGNmZy50b3RhbF9hdmFpbGFibGUgPSAnbnVtYmVyJztcbiAgICAgICAgcmV0dXJuIFRvT2JqZWN0KHRoaXMsIGNmZyk7XG4gICAgfVxuXG4gICAgYXBwbHlHYW1lQ2hhbmdlcyhhOiBHYW1lQ2hhbmdlcykge1xuICAgICAgICBpZiAoYS5vcmRlcilcbiAgICAgICAgICAgIHRoaXMub3JkZXIgPSBhLm9yZGVyO1xuICAgICAgICBpZiAoYS5zY29yZV9ob21lKVxuICAgICAgICAgICAgdGhpcy5zY29yZV9ob21lID0gYS5zY29yZV9ob21lO1xuICAgICAgICBpZiAoYS5zY29yZV9hd2F5KVxuICAgICAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gYS5zY29yZV9hd2F5O1xuICAgICAgICBpZiAoYS5pbl9wbGF5KVxuICAgICAgICAgICAgdGhpcy5pbl9wbGF5ID0gYS5pbl9wbGF5O1xuICAgICAgICBpZiAoYS50aW1lKVxuICAgICAgICAgICAgdGhpcy50aW1lID0gYS50aW1lO1xuICAgICAgICBpZiAoYS5jb21wZXRpdGlvbilcbiAgICAgICAgICAgIHRoaXMuY29tcGV0aXRpb24gPSBhLmNvbXBldGl0aW9uO1xuICAgICAgICBpZiAoYS5jb3VudHJ5KVxuICAgICAgICAgICAgdGhpcy5jb3VudHJ5ID0gYS5jb3VudHJ5O1xuICAgICAgICBpZiAoYS53aW5fYmFjaylcbiAgICAgICAgICAgIHRoaXMud2luX2JhY2sgPSBhLndpbl9iYWNrO1xuICAgICAgICBpZiAoYS53aW5fbGF5KVxuICAgICAgICAgICAgdGhpcy53aW5fbGF5ID0gYS53aW5fbGF5O1xuICAgICAgICBpZiAoYS5kcmF3X2JhY2spXG4gICAgICAgICAgICB0aGlzLmRyYXdfYmFjayA9IGEuZHJhd19iYWNrO1xuICAgICAgICBpZiAoYS5kcmF3X2xheSlcbiAgICAgICAgICAgIHRoaXMuZHJhd19sYXkgPSBhLmRyYXdfbGF5O1xuICAgICAgICBpZiAoYS5sb3NlX2JhY2spXG4gICAgICAgICAgICB0aGlzLmxvc2VfYmFjayA9IGEubG9zZV9iYWNrO1xuICAgICAgICBpZiAoYS5sb3NlX2xheSlcbiAgICAgICAgICAgIHRoaXMubG9zZV9sYXkgPSBhLmxvc2VfbGF5O1xuICAgICAgICBpZiAoYS50b3RhbF9tYXRjaGVkKVxuICAgICAgICAgICAgdGhpcy50b3RhbF9tYXRjaGVkID0gYS50b3RhbF9tYXRjaGVkO1xuICAgICAgICBpZiAoYS50b3RhbF9hdmFpbGFibGUpXG4gICAgICAgICAgICB0aGlzLnRvdGFsX2F2YWlsYWJsZSA9IGEudG90YWxfYXZhaWxhYmxlO1xuICAgICAgICBpZiAoYS5lcnJvcilcbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBhLmVycm9yO1xuICAgIH07XG59XG5cblxuLy8gc3RydWN0MnRzOmdpdGh1Yi5jb20vZnBhd2VsL2JldGZhaXJzL2Zvb3RiYWxsL2Zvb3RiYWxsMi5HYW1lQ2hhbmdlc1xuZXhwb3J0IGNsYXNzIEdhbWVDaGFuZ2VzIHtcbiAgICBpZDogbnVtYmVyO1xuICAgIG9yZGVyOiBudW1iZXIgfCBudWxsO1xuICAgIHNjb3JlX2hvbWU6IG51bWJlciB8IG51bGw7XG4gICAgc2NvcmVfYXdheTogbnVtYmVyIHwgbnVsbDtcbiAgICBpbl9wbGF5OiBib29sZWFuIHwgbnVsbDtcbiAgICB0aW1lOiBzdHJpbmcgfCBudWxsO1xuICAgIGNvbXBldGl0aW9uOiBzdHJpbmcgfCBudWxsO1xuICAgIGNvdW50cnk6IHN0cmluZyB8IG51bGw7XG4gICAgd2luX2JhY2s6IG51bWJlciB8IG51bGw7XG4gICAgd2luX2xheTogbnVtYmVyIHwgbnVsbDtcbiAgICBkcmF3X2xheTogbnVtYmVyIHwgbnVsbDtcbiAgICBkcmF3X2JhY2s6IG51bWJlciB8IG51bGw7XG4gICAgbG9zZV9sYXk6IG51bWJlciB8IG51bGw7XG4gICAgbG9zZV9iYWNrOiBudW1iZXIgfCBudWxsO1xuICAgIHRvdGFsX21hdGNoZWQ6IG51bWJlciB8IG51bGw7XG4gICAgdG90YWxfYXZhaWxhYmxlOiBudW1iZXIgfCBudWxsO1xuICAgIGVycm9yOiBzdHJpbmcgfCBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoZGF0YT86IGFueSkge1xuICAgICAgICBjb25zdCBkOiBhbnkgPSAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpID8gVG9PYmplY3QoZGF0YSkgOiB7fTtcbiAgICAgICAgdGhpcy5pZCA9ICgnaWQnIGluIGQpID8gZC5pZCBhcyBudW1iZXIgOiAwO1xuICAgICAgICB0aGlzLm9yZGVyID0gKCdvcmRlcicgaW4gZCkgPyBkLm9yZGVyIGFzIG51bWJlciA6IG51bGw7XG4gICAgICAgIHRoaXMuc2NvcmVfaG9tZSA9ICgnc2NvcmVfaG9tZScgaW4gZCkgPyBkLnNjb3JlX2hvbWUgYXMgbnVtYmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gKCdzY29yZV9hd2F5JyBpbiBkKSA/IGQuc2NvcmVfYXdheSBhcyBudW1iZXIgOiBudWxsO1xuICAgICAgICB0aGlzLmluX3BsYXkgPSAoJ2luX3BsYXknIGluIGQpID8gZC5pbl9wbGF5IGFzIGJvb2xlYW4gOiBudWxsO1xuICAgICAgICB0aGlzLnRpbWUgPSAoJ3RpbWUnIGluIGQpID8gZC50aW1lIGFzIHN0cmluZyA6IG51bGw7XG4gICAgICAgIHRoaXMuY29tcGV0aXRpb24gPSAoJ2NvbXBldGl0aW9uJyBpbiBkKSA/IGQuY29tcGV0aXRpb24gYXMgc3RyaW5nIDogbnVsbDtcbiAgICAgICAgdGhpcy5jb3VudHJ5ID0gKCdjb3VudHJ5JyBpbiBkKSA/IGQuY291bnRyeSBhcyBzdHJpbmcgOiBudWxsO1xuICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIGFzIG51bWJlciA6IG51bGw7XG4gICAgICAgIHRoaXMud2luX2xheSA9ICgnd2luX2xheScgaW4gZCkgPyBkLndpbl9sYXkgYXMgbnVtYmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy5kcmF3X2xheSA9ICgnZHJhd19sYXknIGluIGQpID8gZC5kcmF3X2xheSBhcyBudW1iZXIgOiBudWxsO1xuICAgICAgICB0aGlzLmRyYXdfYmFjayA9ICgnZHJhd19iYWNrJyBpbiBkKSA/IGQuZHJhd19iYWNrIGFzIG51bWJlciA6IG51bGw7XG4gICAgICAgIHRoaXMubG9zZV9sYXkgPSAoJ2xvc2VfbGF5JyBpbiBkKSA/IGQubG9zZV9sYXkgYXMgbnVtYmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy5sb3NlX2JhY2sgPSAoJ2xvc2VfYmFjaycgaW4gZCkgPyBkLmxvc2VfYmFjayBhcyBudW1iZXIgOiBudWxsO1xuICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIGFzIG51bWJlciA6IG51bGw7XG4gICAgICAgIHRoaXMudG90YWxfYXZhaWxhYmxlID0gKCd0b3RhbF9hdmFpbGFibGUnIGluIGQpID8gZC50b3RhbF9hdmFpbGFibGUgYXMgbnVtYmVyIDogbnVsbDtcbiAgICAgICAgdGhpcy5lcnJvciA9ICgnZXJyb3InIGluIGQpID8gZC5lcnJvciBhcyBzdHJpbmcgOiBudWxsO1xuICAgIH1cblxuICAgIHRvT2JqZWN0KCk6IGFueSB7XG4gICAgICAgIGNvbnN0IGNmZzogYW55ID0ge307XG4gICAgICAgIGNmZy5pZCA9ICdudW1iZXInO1xuICAgICAgICBjZmcub3JkZXIgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLnNjb3JlX2hvbWUgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLnNjb3JlX2F3YXkgPSAnbnVtYmVyJztcbiAgICAgICAgY2ZnLndpbl9iYWNrID0gJ251bWJlcic7XG4gICAgICAgIGNmZy53aW5fbGF5ID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5kcmF3X2xheSA9ICdudW1iZXInO1xuICAgICAgICBjZmcuZHJhd19iYWNrID0gJ251bWJlcic7XG4gICAgICAgIGNmZy5sb3NlX2xheSA9ICdudW1iZXInO1xuICAgICAgICBjZmcubG9zZV9iYWNrID0gJ251bWJlcic7XG4gICAgICAgIGNmZy50b3RhbF9tYXRjaGVkID0gJ251bWJlcic7XG4gICAgICAgIGNmZy50b3RhbF9hdmFpbGFibGUgPSAnbnVtYmVyJztcbiAgICAgICAgcmV0dXJuIFRvT2JqZWN0KHRoaXMsIGNmZyk7XG4gICAgfVxufVxuXG5cbi8vIHN0cnVjdDJ0czpnaXRodWIuY29tL2ZwYXdlbC9iZXRmYWlycy9mb290YmFsbC9mb290YmFsbDIuR2FtZXNDaGFuZ2VzXG5leHBvcnQgY2xhc3MgR2FtZXNDaGFuZ2VzIHtcbiAgICByZXNldDogYm9vbGVhbjtcbiAgICBuZXc6IEdhbWVbXTtcbiAgICBvdXQ6IG51bWJlcltdO1xuICAgIHVwZDogR2FtZUNoYW5nZXNbXTtcblxuICAgIGNvbnN0cnVjdG9yKGRhdGE/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgZDogYW55ID0gKGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSA/IFRvT2JqZWN0KGRhdGEpIDoge307XG4gICAgICAgIHRoaXMucmVzZXQgPSAoJ3Jlc2V0JyBpbiBkKSA/IGQucmVzZXQgYXMgYm9vbGVhbiA6IGZhbHNlO1xuICAgICAgICB0aGlzLm5ldyA9IEFycmF5LmlzQXJyYXkoZC5uZXcpID8gZC5uZXcubWFwKCh2OiBhbnkpID0+IG5ldyBHYW1lKHYpKSA6IFtdO1xuICAgICAgICB0aGlzLm91dCA9ICgnb3V0JyBpbiBkKSA/IGQub3V0IGFzIG51bWJlcltdIDogW107XG4gICAgICAgIHRoaXMudXBkID0gQXJyYXkuaXNBcnJheShkLnVwZCkgPyBkLnVwZC5tYXAoKHY6IGFueSkgPT4gbmV3IEdhbWVDaGFuZ2VzKHYpKSA6IFtdO1xuICAgIH1cblxuICAgIHRvT2JqZWN0KCk6IGFueSB7XG4gICAgICAgIGNvbnN0IGNmZzogYW55ID0ge307XG4gICAgICAgIHJldHVybiBUb09iamVjdCh0aGlzLCBjZmcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5X2dhbWVzX2NoYW5nZXMoZ2FtZXM6IEdhbWVbXSwgZ2FtZXNDaGFuZ2VzOiBHYW1lc0NoYW5nZXMpIHtcblxuICAgIGlmIChnYW1lc0NoYW5nZXMucmVzZXQpIHtcbiAgICAgICAgcmV0dXJuIGdhbWVzQ2hhbmdlcy5uZXc7XG4gICAgfVxuXG4gICAgY29uc3QgdSA9IGdldEdhbWVzQ2hhbmdlcyhnYW1lc0NoYW5nZXMpO1xuXG4gICAgbGV0IG5leHRHYW1lcyA9IGdhbWVzQ2hhbmdlcy5uZXc7XG5cbiAgICBnYW1lcy5maWx0ZXIoKGdhbWUpID0+IHtcbiAgICAgICAgcmV0dXJuICEodS5vdXQuaGFzKGdhbWUuaWQpIHx8IHUubmV3LmhhcyhnYW1lLmlkKSk7XG4gICAgfSkubWFwKChnYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGdhbWVDaGFuZ2VzID0gdS51cGQuZ2V0KGdhbWUuaWQpO1xuICAgICAgICBpZiAoZ2FtZUNoYW5nZXMpIHtcbiAgICAgICAgICAgIGdhbWUuYXBwbHlHYW1lQ2hhbmdlcyhnYW1lQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdhbWU7XG4gICAgfSkuZm9yRWFjaCgoZ2FtZSkgPT4gbmV4dEdhbWVzLnB1c2goZ2FtZSkpO1xuICAgIG5leHRHYW1lcy5zb3J0KCh4LCB5KSA9PiB4Lm9yZGVyIC0geS5vcmRlcik7XG5cbiAgICBsZXQgaWRfZ2FtZSA9IG5ldyBNYXA8bnVtYmVyLCBHYW1lPigpO1xuICAgIGxldCBvcmRlcl9nYW1lID0gbmV3IE1hcDxudW1iZXIsIEdhbWU+KCk7XG5cbiAgICBmb3IgKGxldCB4IG9mIG5leHRHYW1lcykge1xuICAgICAgICBjb25zdCBmb3JtYXRHYW1lID0gKHg6IEdhbWUpID0+IGAke3gub3JkZXJ9ICR7eC5ob21lfSAke3guYXdheX1gO1xuXG4gICAgICAgIGNvbnN0IHkgPSBpZF9nYW1lLmdldCh4LmlkKTtcbiAgICAgICAgaWYgKHkpIHtcbiAgICAgICAgICAgIHJldHVybiBgYXNzZXJ0IHVuaXF1ZSBnYW1lIGlkOiAke2Zvcm1hdEdhbWUoeCl9IGFuZCAke2Zvcm1hdEdhbWUoeSl9YDtcbiAgICAgICAgfVxuICAgICAgICBpZF9nYW1lLnNldCh4LmlkLCB4KTtcblxuICAgICAgICBjb25zdCB6ID0gb3JkZXJfZ2FtZS5nZXQoeC5vcmRlcik7XG4gICAgICAgIGlmICh6KSB7XG4gICAgICAgICAgICByZXR1cm4gYGFzc2VydCB1bmlxdWUgZ2FtZSBvcmRlcjogJHtmb3JtYXRHYW1lKHgpfSBhbmQgJHtmb3JtYXRHYW1lKHopfWA7XG4gICAgICAgIH1cbiAgICAgICAgb3JkZXJfZ2FtZS5zZXQoeC5vcmRlciwgeCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5leHRHYW1lcztcbn1cblxuXG5mdW5jdGlvbiBnZXRHYW1lc0NoYW5nZXMoeDogR2FtZXNDaGFuZ2VzKSB7XG4gICAgbGV0IHIgPSB7XG4gICAgICAgIG91dDogbmV3IFNldDxudW1iZXI+KCksXG4gICAgICAgIG5ldzogbmV3IE1hcDxudW1iZXIsIEdhbWU+KCksXG4gICAgICAgIHVwZDogbmV3IE1hcDxudW1iZXIsIEdhbWVDaGFuZ2VzPigpLFxuICAgIH07XG5cblxuICAgIGlmICh4Lm91dCkge1xuICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB4Lm91dCkge1xuICAgICAgICAgICAgci5vdXQuYWRkKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh4Lm5ldykge1xuICAgICAgICBmb3IgKGxldCB2YWx1ZSBvZiB4Lm5ldykge1xuICAgICAgICAgICAgci5uZXcuc2V0KHZhbHVlLmlkLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoeC51cGQpIHtcbiAgICAgICAgZm9yIChsZXQgdmFsdWUgb2YgeC51cGQpIHtcbiAgICAgICAgICAgIHIudXBkLnNldCh2YWx1ZS5pZCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByO1xufVxuXG5cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XHJcbmltcG9ydCB7IEZvb3RiYWxsIH0gZnJvbSBcIi4vY29tcG9uZW50cy9Gb290YmFsbC9Gb290YmFsbFwiO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPEZvb3RiYWxsICAvPixcclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwXCIpXHJcbik7XHJcblxyXG4iLCJcbi8vIGhlbHBlcnNcbmNvbnN0IG1heFVuaXhUU0luU2Vjb25kcyA9IDk5OTk5OTk5OTk7XG5cbmZ1bmN0aW9uIFBhcnNlRGF0ZShkOiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nKTogRGF0ZSB7XG5cdGlmIChkIGluc3RhbmNlb2YgRGF0ZSkgcmV0dXJuIGQ7XG5cdGlmICh0eXBlb2YgZCA9PT0gJ251bWJlcicpIHtcblx0XHRpZiAoZCA+IG1heFVuaXhUU0luU2Vjb25kcykgcmV0dXJuIG5ldyBEYXRlKGQpO1xuXHRcdHJldHVybiBuZXcgRGF0ZShkICogMTAwMCk7IC8vIGdvIHRzXG5cdH1cblx0cmV0dXJuIG5ldyBEYXRlKGQpO1xufVxuXG5mdW5jdGlvbiBQYXJzZU51bWJlcih2OiBudW1iZXIgfCBzdHJpbmcsIGlzSW50ID0gZmFsc2UpOiBudW1iZXIge1xuXHRpZiAoIXYpIHJldHVybiAwO1xuXHRpZiAodHlwZW9mIHYgPT09ICdudW1iZXInKSByZXR1cm4gdjtcblx0cmV0dXJuIChpc0ludCA/IHBhcnNlSW50KHYpIDogcGFyc2VGbG9hdCh2KSkgfHwgMDtcbn1cblxuZnVuY3Rpb24gRnJvbUFycmF5PFQ+KEN0b3I6IHsgbmV3KHY6IGFueSk6IFQgfSwgZGF0YT86IGFueVtdIHwgYW55LCBkZWYgPSBudWxsKTogVFtdIHwgbnVsbCB7XG5cdGlmICghZGF0YSB8fCAhT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoKSByZXR1cm4gZGVmO1xuXHRjb25zdCBkID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07XG5cdHJldHVybiBkLm1hcCgodjogYW55KSA9PiBuZXcgQ3Rvcih2KSk7XG59XG5cbmZ1bmN0aW9uIFRvT2JqZWN0KG86IGFueSwgdHlwZU9yQ2ZnOiBhbnkgPSB7fSwgY2hpbGQgPSBmYWxzZSk6IGFueSB7XG5cdGlmICghbykgcmV0dXJuIG51bGw7XG5cdGlmICh0eXBlb2Ygby50b09iamVjdCA9PT0gJ2Z1bmN0aW9uJyAmJiBjaGlsZCkgcmV0dXJuIG8udG9PYmplY3QoKTtcblxuXHRzd2l0Y2ggKHR5cGVvZiBvKSB7XG5cdFx0Y2FzZSAnc3RyaW5nJzpcblx0XHRcdHJldHVybiB0eXBlT3JDZmcgPT09ICdudW1iZXInID8gUGFyc2VOdW1iZXIobykgOiBvO1xuXHRcdGNhc2UgJ2Jvb2xlYW4nOlxuXHRcdGNhc2UgJ251bWJlcic6XG5cdFx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGlmIChvIGluc3RhbmNlb2YgRGF0ZSkge1xuXHRcdHJldHVybiB0eXBlT3JDZmcgPT09ICdzdHJpbmcnID8gby50b0lTT1N0cmluZygpIDogTWF0aC5mbG9vcihvLmdldFRpbWUoKSAvIDEwMDApO1xuXHR9XG5cblx0aWYgKEFycmF5LmlzQXJyYXkobykpIHJldHVybiBvLm1hcCgodjogYW55KSA9PiBUb09iamVjdCh2LCB0eXBlT3JDZmcsIHRydWUpKTtcblxuXHRjb25zdCBkOiBhbnkgPSB7fTtcblxuXHRmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMobykpIHtcblx0XHRjb25zdCB2OiBhbnkgPSBvW2tdO1xuXHRcdGlmICghdikgY29udGludWU7XG5cdFx0ZFtrXSA9IFRvT2JqZWN0KHYsIHR5cGVPckNmZ1trXSB8fCB7fSwgdHJ1ZSk7XG5cdH1cblxuXHRyZXR1cm4gZDtcbn1cblxuLy8gY2xhc3Nlc1xuLy8gZXhwb3J0c1xuZXhwb3J0IHtcbiAgICBtYXhVbml4VFNJblNlY29uZHMsXG5cdFBhcnNlRGF0ZSxcblx0UGFyc2VOdW1iZXIsXG5cdEZyb21BcnJheSxcblx0VG9PYmplY3QsXG59O1xuXG4vL2ltcG9ydCB7bWF4VW5peFRTSW5TZWNvbmRzLCBQYXJzZURhdGUsIFBhcnNlTnVtYmVyLCBGcm9tQXJyYXksIFRvT2JqZWN0fSBmcm9tIFwiLi9nb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXCI7XG4iLCJleHBvcnQgZnVuY3Rpb24gd2ViU29ja2V0VVJMICh1cmkgOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IHByb3RvID0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wucmVwbGFjZShcImh0dHBcIiwgXCJ3c1wiKTtcclxuICAgIHJldHVybiBgJHtwcm90b30vLyR7ZG9jdW1lbnQubG9jYXRpb24uaG9zdH0ke3VyaX1gO1xyXG59IiwibW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsiLCJtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NOyJdLCJzb3VyY2VSb290IjoiIn0=\"")
}
