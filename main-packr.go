// Code generated by github.com/gobuffalo/packr. DO NOT EDIT

package main

import "github.com/gobuffalo/packr"

// !!! GENERATED FILE !!!
// Do NOT hand edit this file!!
// It is recommended that you DO NOT check into this file into SCM.
// We STRONGLY recommend you delete this file after you have built your
// Go binary. You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "index.html", "\"PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCjxoZWFkPg0KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04IiAvPg0KICAgIDx0aXRsZT5IZWxsbyBSZWFjdCE8L3RpdGxlPg0KPC9oZWFkPg0KPGJvZHk+DQo8ZGl2IGlkPSJhcHAiPjwvZGl2Pg0KDQo8IS0tIHJlYWN0IERlcGVuZGVuY2llcyAtLT4NCjxzY3JpcHQgY3Jvc3NvcmlnaW4gc3JjPSJodHRwczovL3VucGtnLmNvbS9yZWFjdEAxNi91bWQvcmVhY3QuZGV2ZWxvcG1lbnQuanMiPjwvc2NyaXB0Pg0KPHNjcmlwdCBjcm9zc29yaWdpbiBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LWRvbUAxNi91bWQvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzIj48L3NjcmlwdD4NCg0KPCEtLSByZWFjdC10YWJsZSBDU1MgLS0+DQo8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LXRhYmxlQGxhdGVzdC9yZWFjdC10YWJsZS5jc3MiPg0KDQo8IS0tIHJlYWN0LXRhYmxlIEpTIC0tPg0KPHNjcmlwdCBzcmM9Imh0dHBzOi8vdW5wa2cuY29tL3JlYWN0LXRhYmxlQGxhdGVzdC9yZWFjdC10YWJsZS5qcyI+PC9zY3JpcHQ+DQoNCjxzY3JpcHQ+DQogICAgbGV0IFJlYWN0VGFibGUgPSB3aW5kb3cuUmVhY3RUYWJsZS5kZWZhdWx0DQo8L3NjcmlwdD4NCg0KPCEtLSBNYWluIC0tPg0KPHNjcmlwdCBzcmM9Ii4vc2NyaXB0cy9tYWluLmpzIj48L3NjcmlwdD4NCjwvYm9keT4NCjwvaHRtbD4=\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js", "\"LyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykgewovKioqKioqLyAJCWlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdAovKioqKioqLyAJLy8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zCi8qKioqKiovIAkvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3QKLyoqKioqKi8gCS8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7Ci8qKioqKiovIAkJaWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTsKLyoqKioqKi8gCQlpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlOwovKioqKioqLyAJCXZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTsKLyoqKioqKi8gCQlPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7Ci8qKioqKiovIAkJaWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpOwovKioqKioqLyAJCXJldHVybiBuczsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7Ci8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwovKioqKioqLyAJCXJldHVybiBnZXR0ZXI7Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07Ci8qKioqKiovCi8qKioqKiovIAkvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfXwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gIiI7Ci8qKioqKiovCi8qKioqKiovCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoewoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9mb290YmFsbC5jc3MiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9mb290YmFsbC5jc3MgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgpleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMgKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIikoZmFsc2UpOwovLyBpbXBvcnRzCgoKLy8gbW9kdWxlCmV4cG9ydHMucHVzaChbbW9kdWxlLmksICJ0YWJsZS5mb290YmFsbC10YWJsZSB7XHJcbiAgICBib3JkZXItc3BhY2luZzogMDtcclxuICAgIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XHJcbiAgICB3aWR0aDogMTAwJTtcclxufVxyXG50YWJsZS5mb290YmFsbC10YWJsZSB0aCB7XHJcbiAgICBwb3NpdGlvbjogc3RpY2t5O1xyXG4gICAgdG9wOiAxcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRkZGO1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG59XHJcbnRhYmxlLmZvb3RiYWxsLXRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTRlNGU0O1xyXG59XHJcbnRhYmxlLmZvb3RiYWxsLXRhYmxlIHRoLCB0YWJsZS5mb290YmFsbC10YWJsZSB0ZCB7XHJcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2JhYmFiYTtcclxuXHJcbiAgICBib3JkZXItcmlnaHQ6IHNvbGlkIDFweCAjYmFiYWJhO1xyXG4gICAgYm9yZGVyLWxlZnQ6IHNvbGlkIDFweCAjYmFiYWJhO1xyXG59XHJcblxyXG50YWJsZS5mb290YmFsbC10YWJsZSB0ZCB7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZzogMnB4IDRweDtcclxufVxyXG4iLCAiIl0pOwoKLy8gZXhwb3J0cwoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7Cgl2YXIgbGlzdCA9IFtdOwoKCS8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmcKCWxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHsKCQlyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKCQkJdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7CgkJCWlmKGl0ZW1bMl0pIHsKCQkJCXJldHVybiAiQG1lZGlhICIgKyBpdGVtWzJdICsgInsiICsgY29udGVudCArICJ9IjsKCQkJfSBlbHNlIHsKCQkJCXJldHVybiBjb250ZW50OwoJCQl9CgkJfSkuam9pbigiIik7Cgl9OwoKCS8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0CglsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7CgkJaWYodHlwZW9mIG1vZHVsZXMgPT09ICJzdHJpbmciKQoJCQltb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAiIl1dOwoJCXZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307CgkJZm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHsKCQkJdmFyIGlkID0gdGhpc1tpXVswXTsKCQkJaWYodHlwZW9mIGlkID09PSAibnVtYmVyIikKCQkJCWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTsKCQl9CgkJZm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgaXRlbSA9IG1vZHVsZXNbaV07CgkJCS8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGUKCQkJLy8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnMKCQkJLy8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy4KCQkJLy8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcykKCQkJaWYodHlwZW9mIGl0ZW1bMF0gIT09ICJudW1iZXIiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7CgkJCQlpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7CgkJCQkJaXRlbVsyXSA9IG1lZGlhUXVlcnk7CgkJCQl9IGVsc2UgaWYobWVkaWFRdWVyeSkgewoJCQkJCWl0ZW1bMl0gPSAiKCIgKyBpdGVtWzJdICsgIikgYW5kICgiICsgbWVkaWFRdWVyeSArICIpIjsKCQkJCX0KCQkJCWxpc3QucHVzaChpdGVtKTsKCQkJfQoJCX0KCX07CglyZXR1cm4gbGlzdDsKfTsKCmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7Cgl2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7Cgl2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107CglpZiAoIWNzc01hcHBpbmcpIHsKCQlyZXR1cm4gY29udGVudDsKCX0KCglpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7CgkJdmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7CgkJdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHsKCQkJcmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJwoJCX0pOwoKCQlyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcbicpOwoJfQoKCXJldHVybiBbY29udGVudF0uam9pbignXG4nKTsKfQoKLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKQpmdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7CgkvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYKCXZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpOwoJdmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDsKCglyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nOwp9CgoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvcmVjb25uZWN0aW5nd2Vic29ja2V0L3JlY29ubmVjdGluZy13ZWJzb2NrZXQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9yZWNvbm5lY3Rpbmd3ZWJzb2NrZXQvcmVjb25uZWN0aW5nLXdlYnNvY2tldC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7Cgp2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsvLyBNSVQgTGljZW5zZToKLy8KLy8gQ29weXJpZ2h0IChjKSAyMDEwLTIwMTIsIEpvZSBXYWxuZXMKLy8KLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQovLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAovLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6Ci8vCi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgovLwovLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgovLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgovLyBUSEUgU09GVFdBUkUuCgovKioKICogVGhpcyBiZWhhdmVzIGxpa2UgYSBXZWJTb2NrZXQgaW4gZXZlcnkgd2F5LCBleGNlcHQgaWYgaXQgZmFpbHMgdG8gY29ubmVjdCwKICogb3IgaXQgZ2V0cyBkaXNjb25uZWN0ZWQsIGl0IHdpbGwgcmVwZWF0ZWRseSBwb2xsIHVudGlsIGl0IHN1Y2Nlc3NmdWxseSBjb25uZWN0cwogKiBhZ2Fpbi4KICoKICogSXQgaXMgQVBJIGNvbXBhdGlibGUsIHNvIHdoZW4geW91IGhhdmU6CiAqICAgd3MgPSBuZXcgV2ViU29ja2V0KCd3czovLy4uLi4nKTsKICogeW91IGNhbiByZXBsYWNlIHdpdGg6CiAqICAgd3MgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KCd3czovLy4uLi4nKTsKICoKICogVGhlIGV2ZW50IHN0cmVhbSB3aWxsIHR5cGljYWxseSBsb29rIGxpa2U6CiAqICBvbmNvbm5lY3RpbmcKICogIG9ub3BlbgogKiAgb25tZXNzYWdlCiAqICBvbm1lc3NhZ2UKICogIG9uY2xvc2UgLy8gbG9zdCBjb25uZWN0aW9uCiAqICBvbmNvbm5lY3RpbmcKICogIG9ub3BlbiAgLy8gc29tZXRpbWUgbGF0ZXIuLi4KICogIG9ubWVzc2FnZQogKiAgb25tZXNzYWdlCiAqICBldGMuLi4KICoKICogSXQgaXMgQVBJIGNvbXBhdGlibGUgd2l0aCB0aGUgc3RhbmRhcmQgV2ViU29ja2V0IEFQSSwgYXBhcnQgZnJvbSB0aGUgZm9sbG93aW5nIG1lbWJlcnM6CiAqCiAqIC0gYGJ1ZmZlcmVkQW1vdW50YAogKiAtIGBleHRlbnNpb25zYAogKiAtIGBiaW5hcnlUeXBlYAogKgogKiBMYXRlc3QgdmVyc2lvbjogaHR0cHM6Ly9naXRodWIuY29tL2pvZXdhbG5lcy9yZWNvbm5lY3Rpbmctd2Vic29ja2V0LwogKiAtIEpvZSBXYWxuZXMKICoKICogU3ludGF4CiAqID09PT09PQogKiB2YXIgc29ja2V0ID0gbmV3IFJlY29ubmVjdGluZ1dlYlNvY2tldCh1cmwsIHByb3RvY29scywgb3B0aW9ucyk7CiAqCiAqIFBhcmFtZXRlcnMKICogPT09PT09PT09PQogKiB1cmwgLSBUaGUgdXJsIHlvdSBhcmUgY29ubmVjdGluZyB0by4KICogcHJvdG9jb2xzIC0gT3B0aW9uYWwgc3RyaW5nIG9yIGFycmF5IG9mIHByb3RvY29scy4KICogb3B0aW9ucyAtIFNlZSBiZWxvdwogKgogKiBPcHRpb25zCiAqID09PT09PT0KICogT3B0aW9ucyBjYW4gZWl0aGVyIGJlIHBhc3NlZCB1cG9uIGluc3RhbnRpYXRpb24gb3Igc2V0IGFmdGVyIGluc3RhbnRpYXRpb246CiAqCiAqIHZhciBzb2NrZXQgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KHVybCwgbnVsbCwgeyBkZWJ1ZzogdHJ1ZSwgcmVjb25uZWN0SW50ZXJ2YWw6IDQwMDAgfSk7CiAqCiAqIG9yCiAqCiAqIHZhciBzb2NrZXQgPSBuZXcgUmVjb25uZWN0aW5nV2ViU29ja2V0KHVybCk7CiAqIHNvY2tldC5kZWJ1ZyA9IHRydWU7CiAqIHNvY2tldC5yZWNvbm5lY3RJbnRlcnZhbCA9IDQwMDA7CiAqCiAqIGRlYnVnCiAqIC0gV2hldGhlciB0aGlzIGluc3RhbmNlIHNob3VsZCBsb2cgZGVidWcgbWVzc2FnZXMuIEFjY2VwdHMgdHJ1ZSBvciBmYWxzZS4gRGVmYXVsdDogZmFsc2UuCiAqCiAqIGF1dG9tYXRpY09wZW4KICogLSBXaGV0aGVyIG9yIG5vdCB0aGUgd2Vic29ja2V0IHNob3VsZCBhdHRlbXB0IHRvIGNvbm5lY3QgaW1tZWRpYXRlbHkgdXBvbiBpbnN0YW50aWF0aW9uLiBUaGUgc29ja2V0IGNhbiBiZSBtYW51YWxseSBvcGVuZWQgb3IgY2xvc2VkIGF0IGFueSB0aW1lIHVzaW5nIHdzLm9wZW4oKSBhbmQgd3MuY2xvc2UoKS4KICoKICogcmVjb25uZWN0SW50ZXJ2YWwKICogLSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheSBiZWZvcmUgYXR0ZW1wdGluZyB0byByZWNvbm5lY3QuIEFjY2VwdHMgaW50ZWdlci4gRGVmYXVsdDogMTAwMC4KICoKICogbWF4UmVjb25uZWN0SW50ZXJ2YWwKICogLSBUaGUgbWF4aW11bSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGEgcmVjb25uZWN0aW9uIGF0dGVtcHQuIEFjY2VwdHMgaW50ZWdlci4gRGVmYXVsdDogMzAwMDAuCiAqCiAqIHJlY29ubmVjdERlY2F5CiAqIC0gVGhlIHJhdGUgb2YgaW5jcmVhc2Ugb2YgdGhlIHJlY29ubmVjdCBkZWxheS4gQWxsb3dzIHJlY29ubmVjdCBhdHRlbXB0cyB0byBiYWNrIG9mZiB3aGVuIHByb2JsZW1zIHBlcnNpc3QuIEFjY2VwdHMgaW50ZWdlciBvciBmbG9hdC4gRGVmYXVsdDogMS41LgogKgogKiB0aW1lb3V0SW50ZXJ2YWwKICogLSBUaGUgbWF4aW11bSB0aW1lIGluIG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciBhIGNvbm5lY3Rpb24gdG8gc3VjY2VlZCBiZWZvcmUgY2xvc2luZyBhbmQgcmV0cnlpbmcuIEFjY2VwdHMgaW50ZWdlci4gRGVmYXVsdDogMjAwMC4KICoKICovCihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7CiAgICBpZiAodHJ1ZSkgewogICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksCgkJCQlfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyA9ICh0eXBlb2YgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID09PSAnZnVuY3Rpb24nID8KCQkJCShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSwKCQkJCV9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsKICAgIH0gZWxzZSB7fQp9KSh0aGlzLCBmdW5jdGlvbiAoKSB7CgogICAgaWYgKCEoJ1dlYlNvY2tldCcgaW4gd2luZG93KSkgewogICAgICAgIHJldHVybjsKICAgIH0KCiAgICBmdW5jdGlvbiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQodXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpIHsKCiAgICAgICAgLy8gRGVmYXVsdCBzZXR0aW5ncwogICAgICAgIHZhciBzZXR0aW5ncyA9IHsKCiAgICAgICAgICAgIC8qKiBXaGV0aGVyIHRoaXMgaW5zdGFuY2Ugc2hvdWxkIGxvZyBkZWJ1ZyBtZXNzYWdlcy4gKi8KICAgICAgICAgICAgZGVidWc6IGZhbHNlLAoKICAgICAgICAgICAgLyoqIFdoZXRoZXIgb3Igbm90IHRoZSB3ZWJzb2NrZXQgc2hvdWxkIGF0dGVtcHQgdG8gY29ubmVjdCBpbW1lZGlhdGVseSB1cG9uIGluc3RhbnRpYXRpb24uICovCiAgICAgICAgICAgIGF1dG9tYXRpY09wZW46IHRydWUsCgogICAgICAgICAgICAvKiogVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgYmVmb3JlIGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0LiAqLwogICAgICAgICAgICByZWNvbm5lY3RJbnRlcnZhbDogMTAwMCwKICAgICAgICAgICAgLyoqIFRoZSBtYXhpbXVtIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgYSByZWNvbm5lY3Rpb24gYXR0ZW1wdC4gKi8KICAgICAgICAgICAgbWF4UmVjb25uZWN0SW50ZXJ2YWw6IDMwMDAwLAogICAgICAgICAgICAvKiogVGhlIHJhdGUgb2YgaW5jcmVhc2Ugb2YgdGhlIHJlY29ubmVjdCBkZWxheS4gQWxsb3dzIHJlY29ubmVjdCBhdHRlbXB0cyB0byBiYWNrIG9mZiB3aGVuIHByb2JsZW1zIHBlcnNpc3QuICovCiAgICAgICAgICAgIHJlY29ubmVjdERlY2F5OiAxLjUsCgogICAgICAgICAgICAvKiogVGhlIG1heGltdW0gdGltZSBpbiBtaWxsaXNlY29uZHMgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uIHRvIHN1Y2NlZWQgYmVmb3JlIGNsb3NpbmcgYW5kIHJldHJ5aW5nLiAqLwogICAgICAgICAgICB0aW1lb3V0SW50ZXJ2YWw6IDIwMDAsCgogICAgICAgICAgICAvKiogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlY29ubmVjdGlvbiBhdHRlbXB0cyB0byBtYWtlLiBVbmxpbWl0ZWQgaWYgbnVsbC4gKi8KICAgICAgICAgICAgbWF4UmVjb25uZWN0QXR0ZW1wdHM6IG51bGwKICAgICAgICB9CiAgICAgICAgaWYgKCFvcHRpb25zKSB7IG9wdGlvbnMgPSB7fTsgfQoKICAgICAgICAvLyBPdmVyd3JpdGUgYW5kIGRlZmluZSBzZXR0aW5ncyB3aXRoIG9wdGlvbnMgaWYgdGhleSBleGlzdC4KICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2V0dGluZ3MpIHsKICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW2tleV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSBvcHRpb25zW2tleV07CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSBzZXR0aW5nc1trZXldOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyBUaGVzZSBzaG91bGQgYmUgdHJlYXRlZCBhcyByZWFkLW9ubHkgcHJvcGVydGllcwoKICAgICAgICAvKiogVGhlIFVSTCBhcyByZXNvbHZlZCBieSB0aGUgY29uc3RydWN0b3IuIFRoaXMgaXMgYWx3YXlzIGFuIGFic29sdXRlIFVSTC4gUmVhZCBvbmx5LiAqLwogICAgICAgIHRoaXMudXJsID0gdXJsOwoKICAgICAgICAvKiogVGhlIG51bWJlciBvZiBhdHRlbXB0ZWQgcmVjb25uZWN0cyBzaW5jZSBzdGFydGluZywgb3IgdGhlIGxhc3Qgc3VjY2Vzc2Z1bCBjb25uZWN0aW9uLiBSZWFkIG9ubHkuICovCiAgICAgICAgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA9IDA7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjb25uZWN0aW9uLgogICAgICAgICAqIENhbiBiZSBvbmUgb2Y6IFdlYlNvY2tldC5DT05ORUNUSU5HLCBXZWJTb2NrZXQuT1BFTiwgV2ViU29ja2V0LkNMT1NJTkcsIFdlYlNvY2tldC5DTE9TRUQKICAgICAgICAgKiBSZWFkIG9ubHkuCiAgICAgICAgICovCiAgICAgICAgdGhpcy5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7CgogICAgICAgIC8qKgogICAgICAgICAqIEEgc3RyaW5nIGluZGljYXRpbmcgdGhlIG5hbWUgb2YgdGhlIHN1Yi1wcm90b2NvbCB0aGUgc2VydmVyIHNlbGVjdGVkOyB0aGlzIHdpbGwgYmUgb25lIG9mCiAgICAgICAgICogdGhlIHN0cmluZ3Mgc3BlY2lmaWVkIGluIHRoZSBwcm90b2NvbHMgcGFyYW1ldGVyIHdoZW4gY3JlYXRpbmcgdGhlIFdlYlNvY2tldCBvYmplY3QuCiAgICAgICAgICogUmVhZCBvbmx5LgogICAgICAgICAqLwogICAgICAgIHRoaXMucHJvdG9jb2wgPSBudWxsOwoKICAgICAgICAvLyBQcml2YXRlIHN0YXRlIHZhcmlhYmxlcwoKICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgdmFyIHdzOwogICAgICAgIHZhciBmb3JjZWRDbG9zZSA9IGZhbHNlOwogICAgICAgIHZhciB0aW1lZE91dCA9IGZhbHNlOwogICAgICAgIHZhciBldmVudFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoKICAgICAgICAvLyBXaXJlIHVwICJvbioiIHByb3BlcnRpZXMgYXMgZXZlbnQgaGFuZGxlcnMKCiAgICAgICAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsICAgICAgIGZ1bmN0aW9uKGV2ZW50KSB7IHNlbGYub25vcGVuKGV2ZW50KTsgfSk7CiAgICAgICAgZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAgICAgIGZ1bmN0aW9uKGV2ZW50KSB7IHNlbGYub25jbG9zZShldmVudCk7IH0pOwogICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Nvbm5lY3RpbmcnLCBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9uY29ubmVjdGluZyhldmVudCk7IH0pOwogICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9ubWVzc2FnZShldmVudCk7IH0pOwogICAgICAgIGV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgICAgICBmdW5jdGlvbihldmVudCkgeyBzZWxmLm9uZXJyb3IoZXZlbnQpOyB9KTsKCiAgICAgICAgLy8gRXhwb3NlIHRoZSBBUEkgcmVxdWlyZWQgYnkgRXZlbnRUYXJnZXQKCiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyID0gZXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKGV2ZW50VGFyZ2V0KTsKICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBldmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyLmJpbmQoZXZlbnRUYXJnZXQpOwogICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCA9IGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQuYmluZChldmVudFRhcmdldCk7CgogICAgICAgIC8qKgogICAgICAgICAqIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGFuIGV2ZW50IHRoYXQgaXMgY29tcGF0aWJsZSB3aXRoIHN0YW5kYXJkCiAgICAgICAgICogY29tcGxpYW50IGJyb3dzZXJzIGFuZCBJRTkgLSBJRTExCiAgICAgICAgICoKICAgICAgICAgKiBUaGlzIHdpbGwgcHJldmVudCB0aGUgZXJyb3I6CiAgICAgICAgICogT2JqZWN0IGRvZXNuJ3Qgc3VwcG9ydCB0aGlzIGFjdGlvbgogICAgICAgICAqCiAgICAgICAgICogaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xOTM0NTM5Mi93aHktYXJlbnQtbXktcGFyYW1ldGVycy1nZXR0aW5nLXBhc3NlZC10aHJvdWdoLXRvLWEtZGlzcGF0Y2hlZC1ldmVudC8xOTM0NTU2MyMxOTM0NTU2MwogICAgICAgICAqIEBwYXJhbSBzIFN0cmluZyBUaGUgbmFtZSB0aGF0IHRoZSBldmVudCBzaG91bGQgdXNlCiAgICAgICAgICogQHBhcmFtIGFyZ3MgT2JqZWN0IGFuIG9wdGlvbmFsIG9iamVjdCB0aGF0IHRoZSBldmVudCB3aWxsIHVzZQogICAgICAgICAqLwogICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlRXZlbnQocywgYXJncykgewogICAgICAgIAl2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoIkN1c3RvbUV2ZW50Iik7CiAgICAgICAgCWV2dC5pbml0Q3VzdG9tRXZlbnQocywgZmFsc2UsIGZhbHNlLCBhcmdzKTsKICAgICAgICAJcmV0dXJuIGV2dDsKICAgICAgICB9OwoKICAgICAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbiAocmVjb25uZWN0QXR0ZW1wdCkgewogICAgICAgICAgICB3cyA9IG5ldyBXZWJTb2NrZXQoc2VsZi51cmwsIHByb3RvY29scyB8fCBbXSk7CgogICAgICAgICAgICBpZiAocmVjb25uZWN0QXR0ZW1wdCkgewogICAgICAgICAgICAgICAgaWYgKHRoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHMgJiYgdGhpcy5yZWNvbm5lY3RBdHRlbXB0cyA+IHRoaXMubWF4UmVjb25uZWN0QXR0ZW1wdHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KGdlbmVyYXRlRXZlbnQoJ2Nvbm5lY3RpbmcnKSk7CiAgICAgICAgICAgICAgICB0aGlzLnJlY29ubmVjdEF0dGVtcHRzID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdSZWNvbm5lY3RpbmdXZWJTb2NrZXQnLCAnYXR0ZW1wdC1jb25uZWN0Jywgc2VsZi51cmwpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgbG9jYWxXcyA9IHdzOwogICAgICAgICAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBpZiAoc2VsZi5kZWJ1ZyB8fCBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWdBbGwpIHsKICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdSZWNvbm5lY3RpbmdXZWJTb2NrZXQnLCAnY29ubmVjdGlvbi10aW1lb3V0Jywgc2VsZi51cmwpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdGltZWRPdXQgPSB0cnVlOwogICAgICAgICAgICAgICAgbG9jYWxXcy5jbG9zZSgpOwogICAgICAgICAgICAgICAgdGltZWRPdXQgPSBmYWxzZTsKICAgICAgICAgICAgfSwgc2VsZi50aW1lb3V0SW50ZXJ2YWwpOwoKICAgICAgICAgICAgd3Mub25vcGVuID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ1JlY29ubmVjdGluZ1dlYlNvY2tldCcsICdvbm9wZW4nLCBzZWxmLnVybCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBzZWxmLnByb3RvY29sID0gd3MucHJvdG9jb2w7CiAgICAgICAgICAgICAgICBzZWxmLnJlYWR5U3RhdGUgPSBXZWJTb2NrZXQuT1BFTjsKICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0QXR0ZW1wdHMgPSAwOwogICAgICAgICAgICAgICAgdmFyIGUgPSBnZW5lcmF0ZUV2ZW50KCdvcGVuJyk7CiAgICAgICAgICAgICAgICBlLmlzUmVjb25uZWN0ID0gcmVjb25uZWN0QXR0ZW1wdDsKICAgICAgICAgICAgICAgIHJlY29ubmVjdEF0dGVtcHQgPSBmYWxzZTsKICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICB3cy5vbmNsb3NlID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTsKICAgICAgICAgICAgICAgIHdzID0gbnVsbDsKICAgICAgICAgICAgICAgIGlmIChmb3JjZWRDbG9zZSkgewogICAgICAgICAgICAgICAgICAgIHNlbGYucmVhZHlTdGF0ZSA9IFdlYlNvY2tldC5DTE9TRUQ7CiAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChnZW5lcmF0ZUV2ZW50KCdjbG9zZScpKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWFkeVN0YXRlID0gV2ViU29ja2V0LkNPTk5FQ1RJTkc7CiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSBnZW5lcmF0ZUV2ZW50KCdjb25uZWN0aW5nJyk7CiAgICAgICAgICAgICAgICAgICAgZS5jb2RlID0gZXZlbnQuY29kZTsKICAgICAgICAgICAgICAgICAgICBlLnJlYXNvbiA9IGV2ZW50LnJlYXNvbjsKICAgICAgICAgICAgICAgICAgICBlLndhc0NsZWFuID0gZXZlbnQud2FzQ2xlYW47CiAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChlKTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY29ubmVjdEF0dGVtcHQgJiYgIXRpbWVkT3V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLmRlYnVnIHx8IFJlY29ubmVjdGluZ1dlYlNvY2tldC5kZWJ1Z0FsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ29uY2xvc2UnLCBzZWxmLnVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChnZW5lcmF0ZUV2ZW50KCdjbG9zZScpKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gc2VsZi5yZWNvbm5lY3RJbnRlcnZhbCAqIE1hdGgucG93KHNlbGYucmVjb25uZWN0RGVjYXksIHNlbGYucmVjb25uZWN0QXR0ZW1wdHMpOwogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVjb25uZWN0QXR0ZW1wdHMrKzsKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vcGVuKHRydWUpOwogICAgICAgICAgICAgICAgICAgIH0sIHRpbWVvdXQgPiBzZWxmLm1heFJlY29ubmVjdEludGVydmFsID8gc2VsZi5tYXhSZWNvbm5lY3RJbnRlcnZhbCA6IHRpbWVvdXQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICB3cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ29ubWVzc2FnZScsIHNlbGYudXJsLCBldmVudC5kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBlID0gZ2VuZXJhdGVFdmVudCgnbWVzc2FnZScpOwogICAgICAgICAgICAgICAgZS5kYXRhID0gZXZlbnQuZGF0YTsKICAgICAgICAgICAgICAgIGV2ZW50VGFyZ2V0LmRpc3BhdGNoRXZlbnQoZSk7CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHdzLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudCkgewogICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ29uZXJyb3InLCBzZWxmLnVybCwgZXZlbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChnZW5lcmF0ZUV2ZW50KCdlcnJvcicpKTsKICAgICAgICAgICAgfTsKICAgICAgICB9CgogICAgICAgIC8vIFdoZXRoZXIgb3Igbm90IHRvIGNyZWF0ZSBhIHdlYnNvY2tldCB1cG9uIGluc3RhbnRpYXRpb24KICAgICAgICBpZiAodGhpcy5hdXRvbWF0aWNPcGVuID09IHRydWUpIHsKICAgICAgICAgICAgdGhpcy5vcGVuKGZhbHNlKTsKICAgICAgICB9CgogICAgICAgIC8qKgogICAgICAgICAqIFRyYW5zbWl0cyBkYXRhIHRvIHRoZSBzZXJ2ZXIgb3ZlciB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24uCiAgICAgICAgICoKICAgICAgICAgKiBAcGFyYW0gZGF0YSBhIHRleHQgc3RyaW5nLCBBcnJheUJ1ZmZlciBvciBCbG9iIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4KICAgICAgICAgKi8KICAgICAgICB0aGlzLnNlbmQgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIGlmICh3cykgewogICAgICAgICAgICAgICAgaWYgKHNlbGYuZGVidWcgfHwgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsKSB7CiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnUmVjb25uZWN0aW5nV2ViU29ja2V0JywgJ3NlbmQnLCBzZWxmLnVybCwgZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gd3Muc2VuZChkYXRhKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93ICdJTlZBTElEX1NUQVRFX0VSUiA6IFBhdXNpbmcgdG8gcmVjb25uZWN0IHdlYnNvY2tldCc7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvKioKICAgICAgICAgKiBDbG9zZXMgdGhlIFdlYlNvY2tldCBjb25uZWN0aW9uIG9yIGNvbm5lY3Rpb24gYXR0ZW1wdCwgaWYgYW55LgogICAgICAgICAqIElmIHRoZSBjb25uZWN0aW9uIGlzIGFscmVhZHkgQ0xPU0VELCB0aGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcuCiAgICAgICAgICovCiAgICAgICAgdGhpcy5jbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikgewogICAgICAgICAgICAvLyBEZWZhdWx0IENMT1NFX05PUk1BTCBjb2RlCiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgY29kZSA9IDEwMDA7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yY2VkQ2xvc2UgPSB0cnVlOwogICAgICAgICAgICBpZiAod3MpIHsKICAgICAgICAgICAgICAgIHdzLmNsb3NlKGNvZGUsIHJlYXNvbik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvKioKICAgICAgICAgKiBBZGRpdGlvbmFsIHB1YmxpYyBBUEkgbWV0aG9kIHRvIHJlZnJlc2ggdGhlIGNvbm5lY3Rpb24gaWYgc3RpbGwgb3BlbiAoY2xvc2UsIHJlLW9wZW4pLgogICAgICAgICAqIEZvciBleGFtcGxlLCBpZiB0aGUgYXBwIHN1c3BlY3RzIGJhZCBkYXRhIC8gbWlzc2VkIGhlYXJ0IGJlYXRzLCBpdCBjYW4gdHJ5IHRvIHJlZnJlc2guCiAgICAgICAgICovCiAgICAgICAgdGhpcy5yZWZyZXNoID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICh3cykgewogICAgICAgICAgICAgICAgd3MuY2xvc2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9CgogICAgLyoqCiAgICAgKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gT1BFTjsKICAgICAqIHRoaXMgaW5kaWNhdGVzIHRoYXQgdGhlIGNvbm5lY3Rpb24gaXMgcmVhZHkgdG8gc2VuZCBhbmQgcmVjZWl2ZSBkYXRhLgogICAgICovCiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uKGV2ZW50KSB7fTsKICAgIC8qKiBBbiBldmVudCBsaXN0ZW5lciB0byBiZSBjYWxsZWQgd2hlbiB0aGUgV2ViU29ja2V0IGNvbm5lY3Rpb24ncyByZWFkeVN0YXRlIGNoYW5nZXMgdG8gQ0xPU0VELiAqLwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5vbmNsb3NlID0gZnVuY3Rpb24oZXZlbnQpIHt9OwogICAgLyoqIEFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGNhbGxlZCB3aGVuIGEgY29ubmVjdGlvbiBiZWdpbnMgYmVpbmcgYXR0ZW1wdGVkLiAqLwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LnByb3RvdHlwZS5vbmNvbm5lY3RpbmcgPSBmdW5jdGlvbihldmVudCkge307CiAgICAvKiogQW4gZXZlbnQgbGlzdGVuZXIgdG8gYmUgY2FsbGVkIHdoZW4gYSBtZXNzYWdlIGlzIHJlY2VpdmVkIGZyb20gdGhlIHNlcnZlci4gKi8KICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHt9OwogICAgLyoqIEFuIGV2ZW50IGxpc3RlbmVyIHRvIGJlIGNhbGxlZCB3aGVuIGFuIGVycm9yIG9jY3Vycy4gKi8KICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5wcm90b3R5cGUub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7fTsKCiAgICAvKioKICAgICAqIFdoZXRoZXIgYWxsIGluc3RhbmNlcyBvZiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQgc2hvdWxkIGxvZyBkZWJ1ZyBtZXNzYWdlcy4KICAgICAqIFNldHRpbmcgdGhpcyB0byB0cnVlIGlzIHRoZSBlcXVpdmFsZW50IG9mIHNldHRpbmcgYWxsIGluc3RhbmNlcyBvZiBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuZGVidWcgdG8gdHJ1ZS4KICAgICAqLwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LmRlYnVnQWxsID0gZmFsc2U7CgogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LkNPTk5FQ1RJTkcgPSBXZWJTb2NrZXQuQ09OTkVDVElORzsKICAgIFJlY29ubmVjdGluZ1dlYlNvY2tldC5PUEVOID0gV2ViU29ja2V0Lk9QRU47CiAgICBSZWNvbm5lY3RpbmdXZWJTb2NrZXQuQ0xPU0lORyA9IFdlYlNvY2tldC5DTE9TSU5HOwogICAgUmVjb25uZWN0aW5nV2ViU29ja2V0LkNMT1NFRCA9IFdlYlNvY2tldC5DTE9TRUQ7CgogICAgcmV0dXJuIFJlY29ubmVjdGluZ1dlYlNvY2tldDsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgovKgoJTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKCUF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmEKKi8KCnZhciBzdHlsZXNJbkRvbSA9IHt9OwoKdmFyCW1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHsKCXZhciBtZW1vOwoKCXJldHVybiBmdW5jdGlvbiAoKSB7CgkJaWYgKHR5cGVvZiBtZW1vID09PSAidW5kZWZpbmVkIikgbWVtbyA9IGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkJcmV0dXJuIG1lbW87Cgl9Owp9OwoKdmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHsKCS8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzCgkvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1CgkvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyCgkvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHMKCS8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3NwoJcmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iOwp9KTsKCnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0KSB7CiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsKfTsKCnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikgewoJdmFyIG1lbW8gPSB7fTsKCglyZXR1cm4gZnVuY3Rpb24odGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAvLyBJZiBwYXNzaW5nIGZ1bmN0aW9uIGluIG9wdGlvbnMsIHRoZW4gdXNlIGl0IGZvciByZXNvbHZlICJoZWFkIiBlbGVtZW50LgogICAgICAgICAgICAgICAgLy8gVXNlZnVsIGZvciBTaGFkb3cgUm9vdCBzdHlsZSBpLmUKICAgICAgICAgICAgICAgIC8vIHsKICAgICAgICAgICAgICAgIC8vICAgaW5zZXJ0SW50bzogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2ZvbyIpLnNoYWRvd1Jvb3QgfQogICAgICAgICAgICAgICAgLy8gfQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICJ1bmRlZmluZWQiKSB7CgkJCXZhciBzdHlsZVRhcmdldCA9IGdldFRhcmdldC5jYWxsKHRoaXMsIHRhcmdldCk7CgkJCS8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmCgkJCWlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHsKCQkJCXRyeSB7CgkJCQkJLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWQKCQkJCQkvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9ucwoJCQkJCXN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7CgkJCQl9IGNhdGNoKGUpIHsKCQkJCQlzdHlsZVRhcmdldCA9IG51bGw7CgkJCQl9CgkJCX0KCQkJbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7CgkJfQoJCXJldHVybiBtZW1vW3RhcmdldF0KCX07Cn0pKCk7Cgp2YXIgc2luZ2xldG9uID0gbnVsbDsKdmFyCXNpbmdsZXRvbkNvdW50ZXIgPSAwOwp2YXIJc3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdOwoKdmFyCWZpeFVybHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3VybHMgKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsaXN0LCBvcHRpb25zKSB7CglpZiAodHlwZW9mIERFQlVHICE9PSAidW5kZWZpbmVkIiAmJiBERUJVRykgewoJCWlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICJvYmplY3QiKSB0aHJvdyBuZXcgRXJyb3IoIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudCIpOwoJfQoKCW9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OwoKCW9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gIm9iamVjdCIgPyBvcHRpb25zLmF0dHJzIDoge307CgoJLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+CgkvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlCglpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gImJvb2xlYW4iKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTsKCgkvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudAogICAgICAgIGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSAiaGVhZCI7CgoJLy8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXQKCWlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9ICJib3R0b20iOwoKCXZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7CgoJYWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTsKCglyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7CgkJdmFyIG1heVJlbW92ZSA9IFtdOwoKCQlmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykgewoJCQl2YXIgaXRlbSA9IHN0eWxlc1tpXTsKCQkJdmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07CgoJCQlkb21TdHlsZS5yZWZzLS07CgkJCW1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTsKCQl9CgoJCWlmKG5ld0xpc3QpIHsKCQkJdmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTsKCQkJYWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTsKCQl9CgoJCWZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7CgkJCXZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTsKCgkJCWlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHsKCQkJCWZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7CgoJCQkJZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTsKCQkJfQoJCX0KCX07Cn07CgpmdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7Cglmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykgewoJCXZhciBpdGVtID0gc3R5bGVzW2ldOwoJCXZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdOwoKCQlpZihkb21TdHlsZSkgewoJCQlkb21TdHlsZS5yZWZzKys7CgoJCQlmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHsKCQkJCWRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pOwoJCQl9CgoJCQlmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykgewoJCQkJZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7CgkJCX0KCQl9IGVsc2UgewoJCQl2YXIgcGFydHMgPSBbXTsKCgkJCWZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7CgkJCQlwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTsKCQkJfQoKCQkJc3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307CgkJfQoJfQp9CgpmdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHsKCXZhciBzdHlsZXMgPSBbXTsKCXZhciBuZXdTdHlsZXMgPSB7fTsKCglmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKCQl2YXIgaXRlbSA9IGxpc3RbaV07CgkJdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07CgkJdmFyIGNzcyA9IGl0ZW1bMV07CgkJdmFyIG1lZGlhID0gaXRlbVsyXTsKCQl2YXIgc291cmNlTWFwID0gaXRlbVszXTsKCQl2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07CgoJCWlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pOwoJCWVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpOwoJfQoKCXJldHVybiBzdHlsZXM7Cn0KCmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHsKCXZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bykKCglpZiAoIXRhcmdldCkgewoJCXRocm93IG5ldyBFcnJvcigiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC4iKTsKCX0KCgl2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07CgoJaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09ICJ0b3AiKSB7CgkJaWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkgewoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7CgkJfSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykgewoJCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7CgkJfSBlbHNlIHsKCQkJdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTsKCQl9CgkJc3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTsKCX0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gImJvdHRvbSIpIHsKCQl0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpOwoJfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gIm9iamVjdCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHsKCQl2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArICIgIiArIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKTsKCQl0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7Cgl9IGVsc2UgewoJCXRocm93IG5ldyBFcnJvcigiW1N0eWxlIExvYWRlcl1cblxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxuIik7Cgl9Cn0KCmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHsKCWlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7CglzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTsKCgl2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTsKCWlmKGlkeCA+PSAwKSB7CgkJc3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTsKCX0KfQoKZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7Cgl2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwoKCWlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7CgkJb3B0aW9ucy5hdHRycy50eXBlID0gInRleHQvY3NzIjsKCX0KCglhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7CglpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpOwoKCXJldHVybiBzdHlsZTsKfQoKZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHsKCXZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgibGluayIpOwoKCWlmKG9wdGlvbnMuYXR0cnMudHlwZSA9PT0gdW5kZWZpbmVkKSB7CgkJb3B0aW9ucy5hdHRycy50eXBlID0gInRleHQvY3NzIjsKCX0KCW9wdGlvbnMuYXR0cnMucmVsID0gInN0eWxlc2hlZXQiOwoKCWFkZEF0dHJzKGxpbmssIG9wdGlvbnMuYXR0cnMpOwoJaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspOwoKCXJldHVybiBsaW5rOwp9CgpmdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7CglPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CgkJZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7Cgl9KTsKfQoKZnVuY3Rpb24gYWRkU3R5bGUgKG9iaiwgb3B0aW9ucykgewoJdmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0OwoKCS8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzcwoJaWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHsKCSAgICByZXN1bHQgPSBvcHRpb25zLnRyYW5zZm9ybShvYmouY3NzKTsKCgkgICAgaWYgKHJlc3VsdCkgewoJICAgIAkvLyBJZiB0cmFuc2Zvcm0gcmV0dXJucyBhIHZhbHVlLCB1c2UgdGhhdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCBjc3MuCgkgICAgCS8vIFRoaXMgYWxsb3dzIHJ1bm5pbmcgcnVudGltZSB0cmFuc2Zvcm1hdGlvbnMgb24gdGhlIGNzcy4KCSAgICAJb2JqLmNzcyA9IHJlc3VsdDsKCSAgICB9IGVsc2UgewoJICAgIAkvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLgoJICAgIAkvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzcwoJICAgIAlyZXR1cm4gZnVuY3Rpb24oKSB7CgkgICAgCQkvLyBub29wCgkgICAgCX07CgkgICAgfQoJfQoKCWlmIChvcHRpb25zLnNpbmdsZXRvbikgewoJCXZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrOwoKCQlzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTsKCgkJdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7CgkJcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTsKCgl9IGVsc2UgaWYgKAoJCW9iai5zb3VyY2VNYXAgJiYKCQl0eXBlb2YgVVJMID09PSAiZnVuY3Rpb24iICYmCgkJdHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09ICJmdW5jdGlvbiIgJiYKCQl0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gImZ1bmN0aW9uIiAmJgoJCXR5cGVvZiBCbG9iID09PSAiZnVuY3Rpb24iICYmCgkJdHlwZW9mIGJ0b2EgPT09ICJmdW5jdGlvbiIKCSkgewoJCXN0eWxlID0gY3JlYXRlTGlua0VsZW1lbnQob3B0aW9ucyk7CgkJdXBkYXRlID0gdXBkYXRlTGluay5iaW5kKG51bGwsIHN0eWxlLCBvcHRpb25zKTsKCQlyZW1vdmUgPSBmdW5jdGlvbiAoKSB7CgkJCXJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7CgoJCQlpZihzdHlsZS5ocmVmKSBVUkwucmV2b2tlT2JqZWN0VVJMKHN0eWxlLmhyZWYpOwoJCX07Cgl9IGVsc2UgewoJCXN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpOwoJCXVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7CgkJcmVtb3ZlID0gZnVuY3Rpb24gKCkgewoJCQlyZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpOwoJCX07Cgl9CgoJdXBkYXRlKG9iaik7CgoJcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHsKCQlpZiAobmV3T2JqKSB7CgkJCWlmICgKCQkJCW5ld09iai5jc3MgPT09IG9iai5jc3MgJiYKCQkJCW5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmCgkJCQluZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwCgkJCSkgewoJCQkJcmV0dXJuOwoJCQl9CgoJCQl1cGRhdGUob2JqID0gbmV3T2JqKTsKCQl9IGVsc2UgewoJCQlyZW1vdmUoKTsKCQl9Cgl9Owp9Cgp2YXIgcmVwbGFjZVRleHQgPSAoZnVuY3Rpb24gKCkgewoJdmFyIHRleHRTdG9yZSA9IFtdOwoKCXJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7CgkJdGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50OwoKCQlyZXR1cm4gdGV4dFN0b3JlLmZpbHRlcihCb29sZWFuKS5qb2luKCdcbicpOwoJfTsKfSkoKTsKCmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcgKHN0eWxlLCBpbmRleCwgcmVtb3ZlLCBvYmopIHsKCXZhciBjc3MgPSByZW1vdmUgPyAiIiA6IG9iai5jc3M7CgoJaWYgKHN0eWxlLnN0eWxlU2hlZXQpIHsKCQlzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTsKCX0gZWxzZSB7CgkJdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpOwoJCXZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlczsKCgkJaWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7CgoJCWlmIChjaGlsZE5vZGVzLmxlbmd0aCkgewoJCQlzdHlsZS5pbnNlcnRCZWZvcmUoY3NzTm9kZSwgY2hpbGROb2Rlc1tpbmRleF0pOwoJCX0gZWxzZSB7CgkJCXN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpOwoJCX0KCX0KfQoKZnVuY3Rpb24gYXBwbHlUb1RhZyAoc3R5bGUsIG9iaikgewoJdmFyIGNzcyA9IG9iai5jc3M7Cgl2YXIgbWVkaWEgPSBvYmoubWVkaWE7CgoJaWYobWVkaWEpIHsKCQlzdHlsZS5zZXRBdHRyaWJ1dGUoIm1lZGlhIiwgbWVkaWEpCgl9CgoJaWYoc3R5bGUuc3R5bGVTaGVldCkgewoJCXN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzczsKCX0gZWxzZSB7CgkJd2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkgewoJCQlzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTsKCQl9CgoJCXN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpOwoJfQp9CgpmdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHsKCXZhciBjc3MgPSBvYmouY3NzOwoJdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7CgoJLyoKCQlJZiBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgaXNuJ3QgZGVmaW5lZCwgYnV0IHNvdXJjZW1hcHMgYXJlIGVuYWJsZWQKCQlhbmQgdGhlcmUgaXMgbm8gcHVibGljUGF0aCBkZWZpbmVkIHRoZW4gbGV0cyB0dXJuIGNvbnZlcnRUb0Fic29sdXRlVXJscwoJCW9uIGJ5IGRlZmF1bHQuICBPdGhlcndpc2UgZGVmYXVsdCB0byB0aGUgY29udmVydFRvQWJzb2x1dGVVcmxzIG9wdGlvbgoJCWRpcmVjdGx5CgkqLwoJdmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7CgoJaWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7CgkJY3NzID0gZml4VXJscyhjc3MpOwoJfQoKCWlmIChzb3VyY2VNYXApIHsKCQkvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NQoJCWNzcyArPSAiXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCIgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpICsgIiAqLyI7Cgl9CgoJdmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiAidGV4dC9jc3MiIH0pOwoKCXZhciBvbGRTcmMgPSBsaW5rLmhyZWY7CgoJbGluay5ocmVmID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKCglpZihvbGRTcmMpIFVSTC5yZXZva2VPYmplY3RVUkwob2xkU3JjKTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgovKioKICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG8KICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYQogKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLgogKgogKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS4KICoKICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiAiZml4ZXMiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLgogKgogKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC4KICoKICovCgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHsKICAvLyBnZXQgY3VycmVudCBsb2NhdGlvbgogIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiICYmIHdpbmRvdy5sb2NhdGlvbjsKCiAgaWYgKCFsb2NhdGlvbikgewogICAgdGhyb3cgbmV3IEVycm9yKCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvbiIpOwogIH0KCgkvLyBibGFuayBvciBudWxsPwoJaWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gInN0cmluZyIpIHsKCSAgcmV0dXJuIGNzczsKICB9CgogIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24uaG9zdDsKICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cL1teXC9dKiQvLCAiLyIpOwoKCS8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKQoJLyoKCVRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluCglhIHN0cmluZy4KCgkgL3VybFxzKlwoICA9IE1hdGNoIG9uIHRoZSB3b3JkICJ1cmwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnMKCSAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXAKCSAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cAoJICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzCgkgICAgICAgICB8ICA9IE9SCgkgICAgICAgICBcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzCgkgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHMKCSAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlcwoJICAgICAgICAgICAgICAgICB8ICA9IE9SCgkgICAgICAgICAgICAgICAgIFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICAgICAgXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXMKCSAgICAgICAgICAgICApICA9IEVuZCBHcm91cAogICAgICAgICAgICAgICpcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zCiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXAKICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmcKICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwCgkgXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnMKCgkgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuCgkgKi8KCXZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxccypcKCgoPzpbXikoXXxcKCg/OlteKShdK3xcKFteKShdKlwpKSpcKSkqKVwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHsKCQkvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpCgkJdmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmwKCQkJLnRyaW0oKQoJCQkucmVwbGFjZSgvXiIoLiopIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSkKCQkJLnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pOwoKCQkvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZQoJCWlmICgvXigjfGRhdGE6fGh0dHA6XC9cL3xodHRwczpcL1wvfGZpbGU6XC9cL1wvfFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7CgkJICByZXR1cm4gZnVsbE1hdGNoOwoJCX0KCgkJLy8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmwKCQl2YXIgbmV3VXJsOwoKCQlpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoIi8vIikgPT09IDApIHsKCQkgIAkvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/CgkJCW5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDsKCQl9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKCIvIikgPT09IDApIHsKCQkJLy8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsCgkJCW5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nCgkJfSBlbHNlIHsKCQkJLy8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3RvcnkKCQkJbmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXC5cLy8sICIiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nCgkJfQoKCQkvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pCgkJcmV0dXJuICJ1cmwoIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyAiKSI7Cgl9KTsKCgkvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzcwoJcmV0dXJuIGZpeGVkQ3NzOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwudHN4IjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9Gb290YmFsbC50c3ggKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoNCnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHsNCiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fA0KICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8DQogICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9Ow0KICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikgew0KICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpOw0KICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH0NCiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpOw0KICAgIH07DQp9KSgpOw0KdmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7DQogICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7DQogICAgICAgIHMgPSBhcmd1bWVudHNbaV07DQogICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkNCiAgICAgICAgICAgIHRbcF0gPSBzW3BdOw0KICAgIH0NCiAgICByZXR1cm4gdDsNCn07DQp2YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHsNCiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kOw0KICAgIHZhciByZXN1bHQgPSB7fTsNCiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgcmVzdWx0W2tdID0gbW9kW2tdOw0KICAgIHJlc3VsdFsiZGVmYXVsdCJdID0gbW9kOw0KICAgIHJldHVybiByZXN1bHQ7DQp9Ow0KdmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7DQogICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyAiZGVmYXVsdCI6IG1vZCB9Ow0KfTsNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7DQp2YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gInJlYWN0IikpOw0KdmFyIGdhbWVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZ2FtZSAqLyAiLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9nYW1lLnRzIik7DQp2YXIgcmVjb25uZWN0aW5nd2Vic29ja2V0XzEgPSBfX2ltcG9ydERlZmF1bHQoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVjb25uZWN0aW5nd2Vic29ja2V0ICovICIuL25vZGVfbW9kdWxlcy9yZWNvbm5lY3Rpbmd3ZWJzb2NrZXQvcmVjb25uZWN0aW5nLXdlYnNvY2tldC5qcyIpKTsNCnZhciB1dGlsc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vdXRpbHMvdXRpbHMgKi8gIi4vc3JjL3V0aWxzL3V0aWxzLnRzIik7DQpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Zvb3RiYWxsLmNzcyAqLyAiLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9mb290YmFsbC5jc3MiKTsNCmZ1bmN0aW9uIHN0ckVudW0obykgew0KICAgIHJldHVybiBvLnJlZHVjZShmdW5jdGlvbiAocmVzLCBrZXkpIHsNCiAgICAgICAgcmVzW2tleV0gPSBrZXk7DQogICAgICAgIHJldHVybiByZXM7DQogICAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7DQp9DQp2YXIgY29sdW1ucyA9IFsNCiAgICAnb3JkZXInLCAnaG9tZScsICdTY29yZScsICdhd2F5JywgJ2NvbXBldGl0aW9uJywNCiAgICAnY291bnRyeScsICd0b3RhbF9tYXRjaGVkJywgJ3RvdGFsX2F2YWlsYWJsZScsICd3aW5fYmFjaycsICd3aW5fbGF5JywgJ2RyYXdfYmFjaycsICdkcmF3X2xheScsICdsb3NlX2JhY2snLCAnbG9zZV9sYXknDQpdOw0KdmFyIGNvbHVtbnMyID0gc3RyRW51bShjb2x1bW5zKTsNCnZhciBjb2xzID0gew0KICAgIG9yZGVyOiAn4oSWJywNCiAgICBob21lOiAn0JTQvtC80LAnLA0KICAgIGF3YXk6ICfQkiDQs9C+0YHRgtGP0YUnLA0KICAgIFNjb3JlOiAn0KHRh9GR0YInLA0KICAgIGNvbXBldGl0aW9uOiAn0KfQtdC80L/QuNC+0L3QsNGCJywNCiAgICBjb3VudHJ5OiAn0KHRgtGA0LDQvdCwJywNCiAgICB0b3RhbF9tYXRjaGVkOiAn0JIg0L/QsNGA0LUnLA0KICAgIHRvdGFsX2F2YWlsYWJsZTogJ9Cd0LUg0LIg0L/QsNGA0LUnLA0KICAgIHdpbl9iYWNrOiAn0J8xKycsDQogICAgd2luX2xheTogJ9CfMS0nLA0KICAgIGRyYXdfYmFjazogJ9CdKycsDQogICAgZHJhd19sYXk6ICfQnS0nLA0KICAgIGxvc2VfYmFjazogJ9CfMisnLA0KICAgIGxvc2VfbGF5OiAn0J8yLScNCn07DQp2YXIgQ29lZmZpY2llbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7DQogICAgX19leHRlbmRzKENvZWZmaWNpZW50LCBfc3VwZXIpOw0KICAgIGZ1bmN0aW9uIENvZWZmaWNpZW50KCkgew0KICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7DQogICAgfQ0KICAgIENvZWZmaWNpZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciB2ID0gdGhpcy5wcm9wcy52YWx1ZTsNCiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRkIiwgbnVsbCwNCiAgICAgICAgICAgIHYgPyB2IDogJycsDQogICAgICAgICAgICAiICIsDQogICAgICAgICAgICB2ID8gJyQnIDogJycpOw0KICAgIH07DQogICAgcmV0dXJuIENvZWZmaWNpZW50Ow0KfShSZWFjdC5Db21wb25lbnQpKTsNCmV4cG9ydHMuQ29lZmZpY2llbnQgPSBDb2VmZmljaWVudDsNCnZhciBGb290YmFsbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHsNCiAgICBfX2V4dGVuZHMoRm9vdGJhbGwsIF9zdXBlcik7DQogICAgZnVuY3Rpb24gRm9vdGJhbGwocHJvcHMpIHsNCiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7DQogICAgICAgIF90aGlzLnN0YXRlID0gew0KICAgICAgICAgICAgd3M6IG5ldyByZWNvbm5lY3Rpbmd3ZWJzb2NrZXRfMS5kZWZhdWx0KHV0aWxzXzEud2ViU29ja2V0VVJMKCcvZm9vdGJhbGwnKSwgW10sIHsNCiAgICAgICAgICAgICAgICBkZWJ1ZzogdHJ1ZSwNCiAgICAgICAgICAgICAgICBhdXRvbWF0aWNPcGVuOiBmYWxzZSwNCiAgICAgICAgICAgIH0pLA0KICAgICAgICAgICAgZ2FtZXM6IFtdLA0KICAgICAgICAgICAgc29ydF9jb2w6ICfihJYnLA0KICAgICAgICAgICAgc29ydF9kaXI6ICdhc2MnLA0KICAgICAgICB9Ow0KICAgICAgICBfdGhpcy5zdGF0ZS53cy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKGZ1bmN0aW9uICh4KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIF9fYXNzaWduKHt9LCB4LCB7IGdhbWVzOiBnYW1lXzEuYXBwbHlfZ2FtZXNfY2hhbmdlcyh4LmdhbWVzLCBuZXcgZ2FtZV8xLkdhbWVzQ2hhbmdlcyhKU09OLnBhcnNlKGV2ZW50LmRhdGEpKSkgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgfTsNCiAgICAgICAgX3RoaXMuc3RhdGUud3Mub3BlbigpOw0KICAgICAgICByZXR1cm4gX3RoaXM7DQogICAgfQ0KICAgIEZvb3RiYWxsLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KCJ0YWJsZSIsIHsgY2xhc3NOYW1lOiAnZm9vdGJhbGwtdGFibGUnIH0sDQogICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCJ0aGVhZCIsIG51bGwsDQogICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidHIiLCBudWxsLCBjb2x1bW5zLm1hcChmdW5jdGlvbiAoeCkgeyByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgidGgiLCB7IGtleTogeCB9LA0KICAgICAgICAgICAgICAgICAgICAiICIsDQogICAgICAgICAgICAgICAgICAgIGNvbHNbeF0sDQogICAgICAgICAgICAgICAgICAgICIgIik7IH0pKSksDQogICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCJ0Ym9keSIsIG51bGwsIHRoaXMuc3RhdGUuZ2FtZXMubWFwKGZ1bmN0aW9uICh4KSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRyIiwgeyBrZXk6IHguaWQgfSwNCiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCBudWxsLCB4Lm9yZGVyICsgMSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRkIiwgbnVsbCwgeC5ob21lKSwNCiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCBudWxsLCB4LlNjb3JlKSwNCiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCBudWxsLCB4LmF3YXkpLA0KICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCJ0ZCIsIG51bGwsIHguY29tcGV0aXRpb24pLA0KICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCJ0ZCIsIG51bGwsIHguY291bnRyeSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoInRkIiwgbnVsbCwgeC50b3RhbF9tYXRjaGVkKSwNCiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgidGQiLCBudWxsLCB4LnRvdGFsX2F2YWlsYWJsZSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29lZmZpY2llbnQsIHsgdmFsdWU6IHgud2luX2JhY2sgfSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29lZmZpY2llbnQsIHsgdmFsdWU6IHgud2luX2xheSB9KSwNCiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChDb2VmZmljaWVudCwgeyB2YWx1ZTogeC5kcmF3X2JhY2sgfSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29lZmZpY2llbnQsIHsgdmFsdWU6IHguZHJhd19sYXkgfSksDQogICAgICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29lZmZpY2llbnQsIHsgdmFsdWU6IHgubG9zZV9iYWNrIH0pLA0KICAgICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KENvZWZmaWNpZW50LCB7IHZhbHVlOiB4Lmxvc2VfbGF5IH0pKTsNCiAgICAgICAgICAgIH0pKSk7DQogICAgfTsNCiAgICByZXR1cm4gRm9vdGJhbGw7DQp9KFJlYWN0LkNvbXBvbmVudCkpOw0KZXhwb3J0cy5Gb290YmFsbCA9IEZvb3RiYWxsOw0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2Zvb3RiYWxsLmNzcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvZm9vdGJhbGwuY3NzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgp2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohICEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlciEuL2Zvb3RiYWxsLmNzcyAqLyAiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2Zvb3RiYWxsLmNzcyIpOwoKaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaSwgY29udGVudCwgJyddXTsKCnZhciB0cmFuc2Zvcm07CnZhciBpbnNlcnRJbnRvOwoKCgp2YXIgb3B0aW9ucyA9IHsiaG1yIjp0cnVlfQoKb3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm0Kb3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkOwoKdmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyAqLyAiLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiKShjb250ZW50LCBvcHRpb25zKTsKCmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzOwoKaWYoZmFsc2UpIHt9CgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9jb21wb25lbnRzL0Zvb3RiYWxsL2dhbWUudHMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvY29tcG9uZW50cy9Gb290YmFsbC9nYW1lLnRzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgeyB2YWx1ZTogdHJ1ZSB9KTsNCnZhciBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi91dGlscy9nb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzICovICIuL3NyYy91dGlscy9nb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzLnRzIik7DQovLyBzdHJ1Y3QydHM6Z2l0aHViLmNvbS9mcGF3ZWwvYmV0ZmFpcnMvZm9vdGJhbGwvZm9vdGJhbGwyLkdhbWUNCnZhciBHYW1lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkgew0KICAgIGZ1bmN0aW9uIEdhbWUoZGF0YSkgew0KICAgICAgICB2YXIgZCA9IChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QoZGF0YSkgOiB7fTsNCiAgICAgICAgdGhpcy5pZCA9ICgnaWQnIGluIGQpID8gZC5pZCA6IDA7DQogICAgICAgIHRoaXMub3JkZXIgPSAoJ29yZGVyJyBpbiBkKSA/IGQub3JkZXIgOiAwOw0KICAgICAgICB0aGlzLmhvbWUgPSAoJ2hvbWUnIGluIGQpID8gZC5ob21lIDogJyc7DQogICAgICAgIHRoaXMuYXdheSA9ICgnYXdheScgaW4gZCkgPyBkLmF3YXkgOiAnJzsNCiAgICAgICAgdGhpcy5zY29yZV9ob21lID0gKCdzY29yZV9ob21lJyBpbiBkKSA/IGQuc2NvcmVfaG9tZSA6IDA7DQogICAgICAgIHRoaXMuc2NvcmVfYXdheSA9ICgnc2NvcmVfYXdheScgaW4gZCkgPyBkLnNjb3JlX2F3YXkgOiAwOw0KICAgICAgICB0aGlzLmluX3BsYXkgPSAoJ2luX3BsYXknIGluIGQpID8gZC5pbl9wbGF5IDogZmFsc2U7DQogICAgICAgIHRoaXMudGltZSA9ICgndGltZScgaW4gZCkgPyBkLnRpbWUgOiAnJzsNCiAgICAgICAgdGhpcy5jb21wZXRpdGlvbiA9ICgnY29tcGV0aXRpb24nIGluIGQpID8gZC5jb21wZXRpdGlvbiA6ICcnOw0KICAgICAgICB0aGlzLmNvdW50cnkgPSAoJ2NvdW50cnknIGluIGQpID8gZC5jb3VudHJ5IDogJyc7DQogICAgICAgIHRoaXMub3Blbl9kYXRlID0gKCdvcGVuX2RhdGUnIGluIGQpID8gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlBhcnNlRGF0ZShkLm9wZW5fZGF0ZSkgOiBuZXcgRGF0ZSgpOw0KICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIDogMDsNCiAgICAgICAgdGhpcy53aW5fbGF5ID0gKCd3aW5fbGF5JyBpbiBkKSA/IGQud2luX2xheSA6IDA7DQogICAgICAgIHRoaXMubG9zZV9iYWNrID0gKCdsb3NlX2JhY2snIGluIGQpID8gZC5sb3NlX2JhY2sgOiAwOw0KICAgICAgICB0aGlzLmxvc2VfbGF5ID0gKCdsb3NlX2xheScgaW4gZCkgPyBkLmxvc2VfbGF5IDogMDsNCiAgICAgICAgdGhpcy5kcmF3X2JhY2sgPSAoJ2RyYXdfYmFjaycgaW4gZCkgPyBkLmRyYXdfYmFjayA6IDA7DQogICAgICAgIHRoaXMuZHJhd19sYXkgPSAoJ2RyYXdfbGF5JyBpbiBkKSA/IGQuZHJhd19sYXkgOiAwOw0KICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIDogMDsNCiAgICAgICAgdGhpcy50b3RhbF9hdmFpbGFibGUgPSAoJ3RvdGFsX2F2YWlsYWJsZScgaW4gZCkgPyBkLnRvdGFsX2F2YWlsYWJsZSA6IDA7DQogICAgICAgIHRoaXMuZXJyb3IgPSAoJ2Vycm9yJyBpbiBkKSA/IGQuZXJyb3IgOiAnJzsNCiAgICB9DQogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEdhbWUucHJvdG90eXBlLCAiU2NvcmUiLCB7DQogICAgICAgIGdldDogZnVuY3Rpb24gKCkgew0KICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5fcGxheSA/IHRoaXMuc2NvcmVfaG9tZSArICIgLSAiICsgdGhpcy5zY29yZV9hd2F5IDogJyc7DQogICAgICAgIH0sDQogICAgICAgIGVudW1lcmFibGU6IHRydWUsDQogICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQ0KICAgIH0pOw0KICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShHYW1lLnByb3RvdHlwZSwgIk9yZGVyIiwgew0KICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsNCiAgICAgICAgICAgIHJldHVybiB0aGlzLm9yZGVyICsgMTsNCiAgICAgICAgfSwNCiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSwNCiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlDQogICAgfSk7DQogICAgR2FtZS5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBjZmcgPSB7fTsNCiAgICAgICAgY2ZnLmlkID0gJ251bWJlcic7DQogICAgICAgIGNmZy5vcmRlciA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfaG9tZSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfYXdheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcub3Blbl9kYXRlID0gJ3N0cmluZyc7DQogICAgICAgIGNmZy53aW5fYmFjayA9ICdudW1iZXInOw0KICAgICAgICBjZmcud2luX2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcubG9zZV9iYWNrID0gJ251bWJlcic7DQogICAgICAgIGNmZy5sb3NlX2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuZHJhd19iYWNrID0gJ251bWJlcic7DQogICAgICAgIGNmZy5kcmF3X2xheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcudG90YWxfbWF0Y2hlZCA9ICdudW1iZXInOw0KICAgICAgICBjZmcudG90YWxfYXZhaWxhYmxlID0gJ251bWJlcic7DQogICAgICAgIHJldHVybiBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QodGhpcywgY2ZnKTsNCiAgICB9Ow0KICAgIEdhbWUucHJvdG90eXBlLmFwcGx5R2FtZUNoYW5nZXMgPSBmdW5jdGlvbiAoYSkgew0KICAgICAgICBpZiAoYS5vcmRlcikNCiAgICAgICAgICAgIHRoaXMub3JkZXIgPSBhLm9yZGVyOw0KICAgICAgICBpZiAoYS5zY29yZV9ob21lKQ0KICAgICAgICAgICAgdGhpcy5zY29yZV9ob21lID0gYS5zY29yZV9ob21lOw0KICAgICAgICBpZiAoYS5zY29yZV9hd2F5KQ0KICAgICAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gYS5zY29yZV9hd2F5Ow0KICAgICAgICBpZiAoYS5pbl9wbGF5KQ0KICAgICAgICAgICAgdGhpcy5pbl9wbGF5ID0gYS5pbl9wbGF5Ow0KICAgICAgICBpZiAoYS50aW1lKQ0KICAgICAgICAgICAgdGhpcy50aW1lID0gYS50aW1lOw0KICAgICAgICBpZiAoYS5jb21wZXRpdGlvbikNCiAgICAgICAgICAgIHRoaXMuY29tcGV0aXRpb24gPSBhLmNvbXBldGl0aW9uOw0KICAgICAgICBpZiAoYS5jb3VudHJ5KQ0KICAgICAgICAgICAgdGhpcy5jb3VudHJ5ID0gYS5jb3VudHJ5Ow0KICAgICAgICBpZiAoYS53aW5fYmFjaykNCiAgICAgICAgICAgIHRoaXMud2luX2JhY2sgPSBhLndpbl9iYWNrOw0KICAgICAgICBpZiAoYS53aW5fbGF5KQ0KICAgICAgICAgICAgdGhpcy53aW5fbGF5ID0gYS53aW5fbGF5Ow0KICAgICAgICBpZiAoYS5kcmF3X2JhY2spDQogICAgICAgICAgICB0aGlzLmRyYXdfYmFjayA9IGEuZHJhd19iYWNrOw0KICAgICAgICBpZiAoYS5kcmF3X2xheSkNCiAgICAgICAgICAgIHRoaXMuZHJhd19sYXkgPSBhLmRyYXdfbGF5Ow0KICAgICAgICBpZiAoYS5sb3NlX2JhY2spDQogICAgICAgICAgICB0aGlzLmxvc2VfYmFjayA9IGEubG9zZV9iYWNrOw0KICAgICAgICBpZiAoYS5sb3NlX2xheSkNCiAgICAgICAgICAgIHRoaXMubG9zZV9sYXkgPSBhLmxvc2VfbGF5Ow0KICAgICAgICBpZiAoYS50b3RhbF9tYXRjaGVkKQ0KICAgICAgICAgICAgdGhpcy50b3RhbF9tYXRjaGVkID0gYS50b3RhbF9tYXRjaGVkOw0KICAgICAgICBpZiAoYS50b3RhbF9hdmFpbGFibGUpDQogICAgICAgICAgICB0aGlzLnRvdGFsX2F2YWlsYWJsZSA9IGEudG90YWxfYXZhaWxhYmxlOw0KICAgICAgICBpZiAoYS5lcnJvcikNCiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBhLmVycm9yOw0KICAgIH07DQogICAgOw0KICAgIHJldHVybiBHYW1lOw0KfSgpKTsNCmV4cG9ydHMuR2FtZSA9IEdhbWU7DQovLyBzdHJ1Y3QydHM6Z2l0aHViLmNvbS9mcGF3ZWwvYmV0ZmFpcnMvZm9vdGJhbGwvZm9vdGJhbGwyLkdhbWVDaGFuZ2VzDQp2YXIgR2FtZUNoYW5nZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7DQogICAgZnVuY3Rpb24gR2FtZUNoYW5nZXMoZGF0YSkgew0KICAgICAgICB2YXIgZCA9IChkYXRhICYmIHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JykgPyBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QoZGF0YSkgOiB7fTsNCiAgICAgICAgdGhpcy5pZCA9ICgnaWQnIGluIGQpID8gZC5pZCA6IDA7DQogICAgICAgIHRoaXMub3JkZXIgPSAoJ29yZGVyJyBpbiBkKSA/IGQub3JkZXIgOiBudWxsOw0KICAgICAgICB0aGlzLnNjb3JlX2hvbWUgPSAoJ3Njb3JlX2hvbWUnIGluIGQpID8gZC5zY29yZV9ob21lIDogbnVsbDsNCiAgICAgICAgdGhpcy5zY29yZV9hd2F5ID0gKCdzY29yZV9hd2F5JyBpbiBkKSA/IGQuc2NvcmVfYXdheSA6IG51bGw7DQogICAgICAgIHRoaXMuaW5fcGxheSA9ICgnaW5fcGxheScgaW4gZCkgPyBkLmluX3BsYXkgOiBudWxsOw0KICAgICAgICB0aGlzLnRpbWUgPSAoJ3RpbWUnIGluIGQpID8gZC50aW1lIDogbnVsbDsNCiAgICAgICAgdGhpcy5jb21wZXRpdGlvbiA9ICgnY29tcGV0aXRpb24nIGluIGQpID8gZC5jb21wZXRpdGlvbiA6IG51bGw7DQogICAgICAgIHRoaXMuY291bnRyeSA9ICgnY291bnRyeScgaW4gZCkgPyBkLmNvdW50cnkgOiBudWxsOw0KICAgICAgICB0aGlzLndpbl9iYWNrID0gKCd3aW5fYmFjaycgaW4gZCkgPyBkLndpbl9iYWNrIDogbnVsbDsNCiAgICAgICAgdGhpcy53aW5fbGF5ID0gKCd3aW5fbGF5JyBpbiBkKSA/IGQud2luX2xheSA6IG51bGw7DQogICAgICAgIHRoaXMuZHJhd19sYXkgPSAoJ2RyYXdfbGF5JyBpbiBkKSA/IGQuZHJhd19sYXkgOiBudWxsOw0KICAgICAgICB0aGlzLmRyYXdfYmFjayA9ICgnZHJhd19iYWNrJyBpbiBkKSA/IGQuZHJhd19iYWNrIDogbnVsbDsNCiAgICAgICAgdGhpcy5sb3NlX2xheSA9ICgnbG9zZV9sYXknIGluIGQpID8gZC5sb3NlX2xheSA6IG51bGw7DQogICAgICAgIHRoaXMubG9zZV9iYWNrID0gKCdsb3NlX2JhY2snIGluIGQpID8gZC5sb3NlX2JhY2sgOiBudWxsOw0KICAgICAgICB0aGlzLnRvdGFsX21hdGNoZWQgPSAoJ3RvdGFsX21hdGNoZWQnIGluIGQpID8gZC50b3RhbF9tYXRjaGVkIDogbnVsbDsNCiAgICAgICAgdGhpcy50b3RhbF9hdmFpbGFibGUgPSAoJ3RvdGFsX2F2YWlsYWJsZScgaW4gZCkgPyBkLnRvdGFsX2F2YWlsYWJsZSA6IG51bGw7DQogICAgICAgIHRoaXMuZXJyb3IgPSAoJ2Vycm9yJyBpbiBkKSA/IGQuZXJyb3IgOiBudWxsOw0KICAgIH0NCiAgICBHYW1lQ2hhbmdlcy5wcm90b3R5cGUudG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgIHZhciBjZmcgPSB7fTsNCiAgICAgICAgY2ZnLmlkID0gJ251bWJlcic7DQogICAgICAgIGNmZy5vcmRlciA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfaG9tZSA9ICdudW1iZXInOw0KICAgICAgICBjZmcuc2NvcmVfYXdheSA9ICdudW1iZXInOw0KICAgICAgICBjZmcud2luX2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLndpbl9sYXkgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLmRyYXdfbGF5ID0gJ251bWJlcic7DQogICAgICAgIGNmZy5kcmF3X2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLmxvc2VfbGF5ID0gJ251bWJlcic7DQogICAgICAgIGNmZy5sb3NlX2JhY2sgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLnRvdGFsX21hdGNoZWQgPSAnbnVtYmVyJzsNCiAgICAgICAgY2ZnLnRvdGFsX2F2YWlsYWJsZSA9ICdudW1iZXInOw0KICAgICAgICByZXR1cm4gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlRvT2JqZWN0KHRoaXMsIGNmZyk7DQogICAgfTsNCiAgICByZXR1cm4gR2FtZUNoYW5nZXM7DQp9KCkpOw0KZXhwb3J0cy5HYW1lQ2hhbmdlcyA9IEdhbWVDaGFuZ2VzOw0KLy8gc3RydWN0MnRzOmdpdGh1Yi5jb20vZnBhd2VsL2JldGZhaXJzL2Zvb3RiYWxsL2Zvb3RiYWxsMi5HYW1lc0NoYW5nZXMNCnZhciBHYW1lc0NoYW5nZXMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7DQogICAgZnVuY3Rpb24gR2FtZXNDaGFuZ2VzKGRhdGEpIHsNCiAgICAgICAgdmFyIGQgPSAoZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpID8gZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVyc18xLlRvT2JqZWN0KGRhdGEpIDoge307DQogICAgICAgIHRoaXMucmVzZXQgPSAoJ3Jlc2V0JyBpbiBkKSA/IGQucmVzZXQgOiBmYWxzZTsNCiAgICAgICAgdGhpcy5uZXcgPSBBcnJheS5pc0FycmF5KGQubmV3KSA/IGQubmV3Lm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IEdhbWUodik7IH0pIDogW107DQogICAgICAgIHRoaXMub3V0ID0gKCdvdXQnIGluIGQpID8gZC5vdXQgOiBbXTsNCiAgICAgICAgdGhpcy51cGQgPSBBcnJheS5pc0FycmF5KGQudXBkKSA/IGQudXBkLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IEdhbWVDaGFuZ2VzKHYpOyB9KSA6IFtdOw0KICAgIH0NCiAgICBHYW1lc0NoYW5nZXMucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgICB2YXIgY2ZnID0ge307DQogICAgICAgIHJldHVybiBnb2xhbmdfdHlwZXNjcmlwdGlmeV9oZWxwZXJzXzEuVG9PYmplY3QodGhpcywgY2ZnKTsNCiAgICB9Ow0KICAgIHJldHVybiBHYW1lc0NoYW5nZXM7DQp9KCkpOw0KZXhwb3J0cy5HYW1lc0NoYW5nZXMgPSBHYW1lc0NoYW5nZXM7DQpmdW5jdGlvbiBhcHBseV9nYW1lc19jaGFuZ2VzKGdhbWVzLCBnYW1lc0NoYW5nZXMpIHsNCiAgICB2YXIgdSA9IGdldEdhbWVzQ2hhbmdlcyhnYW1lc0NoYW5nZXMpOw0KICAgIHZhciBuZXh0R2FtZXMgPSBnYW1lc0NoYW5nZXMubmV3Ow0KICAgIGdhbWVzLmZpbHRlcihmdW5jdGlvbiAoZ2FtZSkgew0KICAgICAgICByZXR1cm4gISh1Lm91dC5oYXMoZ2FtZS5pZCkgfHwgdS5uZXcuaGFzKGdhbWUuaWQpKTsNCiAgICB9KS5tYXAoZnVuY3Rpb24gKGdhbWUpIHsNCiAgICAgICAgdmFyIGdhbWVDaGFuZ2VzID0gdS51cGQuZ2V0KGdhbWUuaWQpOw0KICAgICAgICBpZiAoZ2FtZUNoYW5nZXMpIHsNCiAgICAgICAgICAgIGdhbWUuYXBwbHlHYW1lQ2hhbmdlcyhnYW1lQ2hhbmdlcyk7DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuIGdhbWU7DQogICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoZ2FtZSkgeyByZXR1cm4gbmV4dEdhbWVzLnB1c2goZ2FtZSk7IH0pOw0KICAgIG5leHRHYW1lcy5zb3J0KGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4Lm9yZGVyIC0geS5vcmRlcjsgfSk7DQogICAgdmFyIGlkX2dhbWUgPSBuZXcgTWFwKCk7DQogICAgZm9yICh2YXIgX2kgPSAwLCBuZXh0R2FtZXNfMSA9IG5leHRHYW1lczsgX2kgPCBuZXh0R2FtZXNfMS5sZW5ndGg7IF9pKyspIHsNCiAgICAgICAgdmFyIHggPSBuZXh0R2FtZXNfMVtfaV07DQogICAgICAgIHZhciB5ID0gaWRfZ2FtZS5nZXQoeC5pZCk7DQogICAgICAgIGlmICh5KSB7DQogICAgICAgICAgICB2YXIgZm9ybWF0R2FtZSA9IGZ1bmN0aW9uICh4KSB7IHJldHVybiAiJCIgKyB4Lm9yZGVyICsgIiAiICsgeC5ob21lICsgIiAiICsgeC5hd2F5OyB9Ow0KICAgICAgICAgICAgdGhyb3cgKCJBc3NlcnQgdW5pcXVlIGdhbWUgaWQ6ICIgKyBmb3JtYXRHYW1lKHgpICsgIiBhbmQgIiArIGZvcm1hdEdhbWUoeSkpOw0KICAgICAgICB9DQogICAgICAgIGlkX2dhbWUuc2V0KHguaWQsIHgpOw0KICAgIH0NCiAgICByZXR1cm4gbmV4dEdhbWVzOw0KfQ0KZXhwb3J0cy5hcHBseV9nYW1lc19jaGFuZ2VzID0gYXBwbHlfZ2FtZXNfY2hhbmdlczsNCmZ1bmN0aW9uIGdldEdhbWVzQ2hhbmdlcyh4KSB7DQogICAgdmFyIHIgPSB7DQogICAgICAgIG91dDogbmV3IFNldCgpLA0KICAgICAgICBuZXc6IG5ldyBNYXAoKSwNCiAgICAgICAgdXBkOiBuZXcgTWFwKCksDQogICAgfTsNCiAgICBpZiAoeC5vdXQpIHsNCiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHgub3V0OyBfaSA8IF9hLmxlbmd0aDsgX2krKykgew0KICAgICAgICAgICAgdmFyIHZhbHVlID0gX2FbX2ldOw0KICAgICAgICAgICAgci5vdXQuYWRkKHZhbHVlKTsNCiAgICAgICAgfQ0KICAgIH0NCiAgICBpZiAoeC5uZXcpIHsNCiAgICAgICAgZm9yICh2YXIgX2IgPSAwLCBfYyA9IHgubmV3OyBfYiA8IF9jLmxlbmd0aDsgX2IrKykgew0KICAgICAgICAgICAgdmFyIHZhbHVlID0gX2NbX2JdOw0KICAgICAgICAgICAgci5uZXcuc2V0KHZhbHVlLmlkLCB2YWx1ZSk7DQogICAgICAgIH0NCiAgICB9DQogICAgaWYgKHgudXBkKSB7DQogICAgICAgIGZvciAodmFyIF9kID0gMCwgX2UgPSB4LnVwZDsgX2QgPCBfZS5sZW5ndGg7IF9kKyspIHsNCiAgICAgICAgICAgIHZhciB2YWx1ZSA9IF9lW19kXTsNCiAgICAgICAgICAgIHIudXBkLnNldCh2YWx1ZS5pZCwgdmFsdWUpOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiByOw0KfQ0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9pbmRleC50c3giOgovKiEqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvaW5kZXgudHN4ICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKiovCi8qISBubyBzdGF0aWMgZXhwb3J0cyBmb3VuZCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cg0KdmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7DQogICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDsNCiAgICB2YXIgcmVzdWx0ID0ge307DQogICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIHJlc3VsdFtrXSA9IG1vZFtrXTsNCiAgICByZXN1bHRbImRlZmF1bHQiXSA9IG1vZDsNCiAgICByZXR1cm4gcmVzdWx0Ow0KfTsNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7DQp2YXIgUmVhY3QgPSBfX2ltcG9ydFN0YXIoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QgKi8gInJlYWN0IikpOw0KdmFyIFJlYWN0RE9NID0gX19pbXBvcnRTdGFyKF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LWRvbSAqLyAicmVhY3QtZG9tIikpOw0KdmFyIEZvb3RiYWxsXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwgKi8gIi4vc3JjL2NvbXBvbmVudHMvRm9vdGJhbGwvRm9vdGJhbGwudHN4Iik7DQpSZWFjdERPTS5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChGb290YmFsbF8xLkZvb3RiYWxsLCBudWxsKSwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImFwcCIpKTsNCgoKLyoqKi8gfSksCgovKioqLyAiLi9zcmMvdXRpbHMvZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVycy50cyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvdXRpbHMvZ29sYW5nX3R5cGVzY3JpcHRpZnlfaGVscGVycy50cyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KLy8gaGVscGVycw0KdmFyIG1heFVuaXhUU0luU2Vjb25kcyA9IDk5OTk5OTk5OTk7DQpleHBvcnRzLm1heFVuaXhUU0luU2Vjb25kcyA9IG1heFVuaXhUU0luU2Vjb25kczsNCmZ1bmN0aW9uIFBhcnNlRGF0ZShkKSB7DQogICAgaWYgKGQgaW5zdGFuY2VvZiBEYXRlKQ0KICAgICAgICByZXR1cm4gZDsNCiAgICBpZiAodHlwZW9mIGQgPT09ICdudW1iZXInKSB7DQogICAgICAgIGlmIChkID4gbWF4VW5peFRTSW5TZWNvbmRzKQ0KICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGQpOw0KICAgICAgICByZXR1cm4gbmV3IERhdGUoZCAqIDEwMDApOyAvLyBnbyB0cw0KICAgIH0NCiAgICByZXR1cm4gbmV3IERhdGUoZCk7DQp9DQpleHBvcnRzLlBhcnNlRGF0ZSA9IFBhcnNlRGF0ZTsNCmZ1bmN0aW9uIFBhcnNlTnVtYmVyKHYsIGlzSW50KSB7DQogICAgaWYgKGlzSW50ID09PSB2b2lkIDApIHsgaXNJbnQgPSBmYWxzZTsgfQ0KICAgIGlmICghdikNCiAgICAgICAgcmV0dXJuIDA7DQogICAgaWYgKHR5cGVvZiB2ID09PSAnbnVtYmVyJykNCiAgICAgICAgcmV0dXJuIHY7DQogICAgcmV0dXJuIChpc0ludCA/IHBhcnNlSW50KHYpIDogcGFyc2VGbG9hdCh2KSkgfHwgMDsNCn0NCmV4cG9ydHMuUGFyc2VOdW1iZXIgPSBQYXJzZU51bWJlcjsNCmZ1bmN0aW9uIEZyb21BcnJheShDdG9yLCBkYXRhLCBkZWYpIHsNCiAgICBpZiAoZGVmID09PSB2b2lkIDApIHsgZGVmID0gbnVsbDsgfQ0KICAgIGlmICghZGF0YSB8fCAhT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoKQ0KICAgICAgICByZXR1cm4gZGVmOw0KICAgIHZhciBkID0gQXJyYXkuaXNBcnJheShkYXRhKSA/IGRhdGEgOiBbZGF0YV07DQogICAgcmV0dXJuIGQubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgQ3Rvcih2KTsgfSk7DQp9DQpleHBvcnRzLkZyb21BcnJheSA9IEZyb21BcnJheTsNCmZ1bmN0aW9uIFRvT2JqZWN0KG8sIHR5cGVPckNmZywgY2hpbGQpIHsNCiAgICBpZiAodHlwZU9yQ2ZnID09PSB2b2lkIDApIHsgdHlwZU9yQ2ZnID0ge307IH0NCiAgICBpZiAoY2hpbGQgPT09IHZvaWQgMCkgeyBjaGlsZCA9IGZhbHNlOyB9DQogICAgaWYgKCFvKQ0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICBpZiAodHlwZW9mIG8udG9PYmplY3QgPT09ICdmdW5jdGlvbicgJiYgY2hpbGQpDQogICAgICAgIHJldHVybiBvLnRvT2JqZWN0KCk7DQogICAgc3dpdGNoICh0eXBlb2Ygbykgew0KICAgICAgICBjYXNlICdzdHJpbmcnOg0KICAgICAgICAgICAgcmV0dXJuIHR5cGVPckNmZyA9PT0gJ251bWJlcicgPyBQYXJzZU51bWJlcihvKSA6IG87DQogICAgICAgIGNhc2UgJ2Jvb2xlYW4nOg0KICAgICAgICBjYXNlICdudW1iZXInOg0KICAgICAgICAgICAgcmV0dXJuIG87DQogICAgfQ0KICAgIGlmIChvIGluc3RhbmNlb2YgRGF0ZSkgew0KICAgICAgICByZXR1cm4gdHlwZU9yQ2ZnID09PSAnc3RyaW5nJyA/IG8udG9JU09TdHJpbmcoKSA6IE1hdGguZmxvb3Ioby5nZXRUaW1lKCkgLyAxMDAwKTsNCiAgICB9DQogICAgaWYgKEFycmF5LmlzQXJyYXkobykpDQogICAgICAgIHJldHVybiBvLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gVG9PYmplY3QodiwgdHlwZU9yQ2ZnLCB0cnVlKTsgfSk7DQogICAgdmFyIGQgPSB7fTsNCiAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMobyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7DQogICAgICAgIHZhciBrID0gX2FbX2ldOw0KICAgICAgICB2YXIgdiA9IG9ba107DQogICAgICAgIGlmICghdikNCiAgICAgICAgICAgIGNvbnRpbnVlOw0KICAgICAgICBkW2tdID0gVG9PYmplY3QodiwgdHlwZU9yQ2ZnW2tdIHx8IHt9LCB0cnVlKTsNCiAgICB9DQogICAgcmV0dXJuIGQ7DQp9DQpleHBvcnRzLlRvT2JqZWN0ID0gVG9PYmplY3Q7DQovL2ltcG9ydCB7bWF4VW5peFRTSW5TZWNvbmRzLCBQYXJzZURhdGUsIFBhcnNlTnVtYmVyLCBGcm9tQXJyYXksIFRvT2JqZWN0fSBmcm9tICIuL2dvbGFuZ190eXBlc2NyaXB0aWZ5X2hlbHBlcnMiOw0KCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy91dGlscy91dGlscy50cyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vc3JjL3V0aWxzL3V0aWxzLnRzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOw0KZnVuY3Rpb24gd2ViU29ja2V0VVJMKHVyaSkgew0KICAgIHZhciBwcm90byA9IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sLnJlcGxhY2UoImh0dHAiLCAid3MiKTsNCiAgICByZXR1cm4gcHJvdG8gKyAiLy8iICsgZG9jdW1lbnQubG9jYXRpb24uaG9zdCArIHVyaTsNCn0NCmV4cG9ydHMud2ViU29ja2V0VVJMID0gd2ViU29ja2V0VVJMOw0KCgovKioqLyB9KSwKCi8qKiovIDA6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBtdWx0aSAuL3NyYy9pbmRleC50c3ggKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9zcmMvaW5kZXgudHN4ICovIi4vc3JjL2luZGV4LnRzeCIpOwoKCi8qKiovIH0pLAoKLyoqKi8gInJlYWN0IjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBleHRlcm5hbCAiUmVhY3QiICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqLwovKiEgbm8gc3RhdGljIGV4cG9ydHMgZm91bmQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSBSZWFjdDsKCi8qKiovIH0pLAoKLyoqKi8gInJlYWN0LWRvbSI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgIlJlYWN0RE9NIiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyohIG5vIHN0YXRpYyBleHBvcnRzIGZvdW5kICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gUmVhY3RET007CgovKioqLyB9KQoKLyoqKioqKi8gfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPW1haW4uanMubWFw\"")
		packr.PackJSONBytes("./../../../../../../Frontend/betfairf/dist", "scripts/main.js.map", "\"\"")
}
